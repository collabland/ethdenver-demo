---
description: This is the mineflayer docs
globs: mineflayer.service.ts
---
└── docs
    ├── .nojekyll
    ├── CONTRIBUTING.md
    ├── FAQ.md
    ├── README.md
    ├── _sidebar.md
    ├── api.md
    ├── br
        ├── CONTRIBUTING_BR.md
        ├── FAQ_BR.md
        ├── README_BR.md
        ├── api_br.md
        └── unstable_api_br.md
    ├── demos.md
    ├── es
        ├── CONTRIBUTING_ES.md
        ├── FAQ_ES.md
        ├── README_ES.md
        ├── api_es.md
        └── unstable_api_es.md
    ├── fr
        ├── FAQ_FR.md
        └── README_FR.md
    ├── history.md
    ├── index.html
    ├── mineflayer.ipynb
    ├── ru
        ├── CONTRIBUTING_RU.md
        ├── FAQ_RU.md
        ├── README_RU.md
        ├── _sidebar.md
        ├── api_ru.md
        ├── demos_ru.md
        ├── index.html
        ├── tutorial_ru.md
        └── unstable_api_ru.md
    ├── tr
        └── README_TR.md
    ├── tutorial.md
    ├── unstable_api.md
    └── zh
        ├── CONTRIBUTING.md
        ├── FAQ.md
        ├── README_ZH_CN.md
        ├── _sidebar.md
        ├── api.md
        ├── demos.md
        ├── history.md
        ├── index.html
        └── tutorial.md


/docs/.nojekyll:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/PrismarineJS/mineflayer/33627f79d9e6243f2b9f19daa6be3418467c4518/docs/.nojekyll


--------------------------------------------------------------------------------
/docs/CONTRIBUTING.md:
--------------------------------------------------------------------------------
  1 | # Contribute
  2 | 
  3 | Mineflayer has originally been made mostly by [andrewrk](http://github.com/andrewrk)
  4 | but has since then be improved and fixed by many [contributors](https://github.com/andrewrk/mineflayer/graphs/contributors).
  5 | That's why it is important to know the best ways to contribute to mineflayer.
  6 | 
  7 | ## Issue organization
  8 | 
  9 | We have 3 stage labels to try to organize issues:
 10 | 
 11 | * Stage 1: just created by someone new to the project, we don't know yet if it deserves an implementation / a fix
 12 | * Stage 2: promising idea, but needs more thinking before implementation
 13 | * Stage 3: idea is precisely specified, only coding is left to do
 14 | 
 15 | Links like https://github.com/PrismarineJS/mineflayer/issues?q=is%3Aopen+is%3Aissue+-label%3AStage1 can be used to filter out stage 1 if you're looking for things that are ready for contribution
 16 | 
 17 | ## Creating tests
 18 | Mineflayer has two kind of tests :
 19 | 
 20 |  * [internal tests](test/internalTest.js) : tests that are done against a simple server created with node-minecraft-protocol
 21 |  * [external tests](test/externalTests/) : tests that are done against the vanilla server
 22 |  
 23 | The objective of these tests is to know automatically what works and what doesn't in mineflayer, so it's easier to make mineflayer work.
 24 | 
 25 | 
 26 | ## Running tests
 27 | You can run tests for Different Minecraft versions using the `-g` flag with npm run mocha_test. For example:
 28 | 
 29 | ```bash
 30 | # Run all tests in all supported versions
 31 | npm run test
 32 | 
 33 | # Run a specific test in Minecraft 1.20.4
 34 | npm run mocha_test -- -g "mineflayer_external 1.20.4v.*exampleBee"
 35 | 
 36 | # Run all tests in just version 1.20.4
 37 | npm run mocha_test -- -g "mineflayer_external 1.20.4v"
 38 | ```
 39 | 
 40 | 
 41 | ### Creating an external test
 42 | 
 43 | In order to add an external test now you only need to create a file in [test/externalTests](test/externalTests)
 44 | 
 45 | An example : [test/externalTests/digAndBuild.js](https://github.com/PrismarineJS/mineflayer/blob/master/test/externalTests/digAndBuild.js)
 46 | 
 47 | That file needs to export a function returning a function or an array of function taking as parameter the bot object and a done callback,
 48 |  it should contain asserts to test if the tested functionality failed.
 49 | 
 50 | 
 51 | ## Creating a third party plugin
 52 | Mineflayer is pluggable; anyone can create a plugin that adds an even higher level API on top of Mineflayer.
 53 | 
 54 | Several such third party plugins have already been [created](https://github.com/andrewrk/mineflayer#third-party-plugins)
 55 | 
 56 | In order to create a new one you need to :
 57 | 
 58 | 1. create a new repo
 59 | 2. in your index.js file, exports an init function taking in argument mineflayer ([example](https://github.com/andrewrk/mineflayer-navigate/blob/e24cb6a868ce64ae43bea2d035832c15ed01d301/index.js#L18))
 60 | 3. that function returns a inject function taking in argument the bot object ([example](https://github.com/andrewrk/mineflayer-navigate/blob/e24cb6a868ce64ae43bea2d035832c15ed01d301/index.js#L23))
 61 | 4. that inject function add functionalities to the bot object ([example](https://github.com/andrewrk/mineflayer-navigate/blob/e24cb6a868ce64ae43bea2d035832c15ed01d301/index.js#L32))
 62 | 
 63 | Since the mineflayer object is passed in parameter, that new package doesn't need to depend on mineflayer (no mineflayer dependency in the package.json)
 64 | 
 65 | See a [full example](https://github.com/andrewrk/mineflayer-navigate/tree/e24cb6a868ce64ae43bea2d035832c15ed01d301) here.
 66 | 
 67 | ## Reporting bugs
 68 | Mineflayer works well for most usages, but it sometimes still has bugs.
 69 | 
 70 | When finding one it's best to report an issue providing these information :
 71 | 
 72 | * what you want to do (the objective in english)
 73 | * what you tried (the code)
 74 | * what happened
 75 | * what you expected to happen
 76 | 
 77 | ## Mineflayer code
 78 | Some things to think about when submitting a Pull Request or making a commit :
 79 | 
 80 | ### Error handling
 81 | In most cases, mineflayer shouldn't crash the bot. Even if something fails, the bot can take an alternative route to get to its objective.
 82 | 
 83 | What that means is we shouldn't use `throw(new Error("error"))` but instead use the node.js convention of passing the error in the callback.
 84 | 
 85 | For example : 
 86 | 
 87 | ```js
 88 | function myfunction (param1, callback) {
 89 |   // do stuff
 90 |   let toDo = 1
 91 |   toDo = 2
 92 |   if (toDo === 2) { // everything worked
 93 |     callback()
 94 |   } else {
 95 |     callback(new Error('something failed'))
 96 |   }
 97 | }
 98 | ```
 99 | 
100 | See an other example of that in [mineflayer code](https://github.com/andrewrk/mineflayer/blob/a8736c4ea473cf1a609c5a29046c0cdad006d429/lib/plugins/bed.js#L10)
101 | 
102 | ### Updating the documentation
103 | The table of content of docs/api.md is made with doctoc. After updating that file, you should run doctoc docs/api.md to update the table of content.
104 | 


--------------------------------------------------------------------------------
/docs/FAQ.md:
--------------------------------------------------------------------------------
  1 | ## FAQ
  2 | 
  3 | This Frequently Asked Question document is meant to help people for the most common things.
  4 | 
  5 | ### I get an error (ie. protocol/data) when bot is trying to connect to minecraft server
  6 | 
  7 | Make sure the Minecraft server version is supported (cf. root readme), else you should retry using one of the [mineflayer tested versions](../lib/version.js).
  8 | 
  9 | ### I get an error when trying to login with a microsoft account.
 10 | 
 11 | Make sure the email you entered into the username option in createBot can be used to login to `minecraft.net` using the 'Login with Microsoft' button.
 12 | Make sure you have the option `auth: 'microsoft'` in your createBot options. 
 13 | 
 14 | When you get an error that says something about invalid credentials or 'Does this account own Minecraft?' try removing the password field in the `createBot` options and try again.
 15 | 
 16 | ### How to hide errors ?
 17 | 
 18 | Use `hideErrors: true` in createBot options
 19 | You may also choose to add these listeners :
 20 | ```js
 21 | client.on('error', () => {})
 22 | client.on('end', () => {})
 23 | ```
 24 | 
 25 | ### I'm not getting chat event on a custom server, how can I solve it ?
 26 | 
 27 | Spigot servers, in particular some plugins, use custom chat formats, you need to parse it with a custom regex / parser.
 28 | Read and adapt [chat_parsing.js](https://github.com/PrismarineJS/mineflayer/blob/master/examples/chat_parsing.js) to make it work for your particular
 29 | chat plugin. Also read http://prismarinejs.github.io/mineflayer/#/tutorial?id=custom-chat
 30 | 
 31 | ### How can I collect info from an custom plugin in chat ?
 32 | 
 33 | Most custom minecraft servers have plugin support, and a lot of these plugins say something in chat when something happens. If it is just one message, it's best to use the solution discussed in the solution above, but when these messages are split into many small messages, another option is using the `"messagestr"` event as it allows for easily parsing multi-line messages.
 34 | 
 35 | **Example:**
 36 | 
 37 | chat message in chat looks like:
 38 | ```
 39 | (!) U9G has won the /jackpot and received
 40 | $26,418,402,450! They purchased 2,350,000 (76.32%) ticket(s) out of the
 41 | 3,079,185 ticket(s) sold!
 42 | ```
 43 | ```js
 44 | const regex = {
 45 |   first: /\(!\) (.+) has won the \/jackpot and received +/,
 46 |   second: /\$(.+)! They purchased (.+) \((.+)%\) ticket\(s\) out of the /,
 47 |   third: /(.+) ticket\(s\) sold!/
 48 | }
 49 | 
 50 | let jackpot = {}
 51 | bot.on('messagestr', msg => {
 52 |   if (regex.first.test(msg)) {
 53 |     const username = msg.match(regex.first)[1]
 54 |     jackpot.username = username
 55 |   } else if (regex.second.test(msg)) {
 56 |     const [, moneyWon, boughtTickets, winPercent] = msg.match(regex.second)
 57 |     jackpot.moneyWon = parseInt(moneyWon.replace(/,/g, ''))
 58 |     jackpot.boughtTickets = parseInt(boughtTickets.replace(/,/g, ''))
 59 |     jackpot.winPercent = parseFloat(winPercent)
 60 |   } else if (regex.third.test(msg)) {
 61 |     const totalTickets = msg.match(regex.third)[1]
 62 |     jackpot.totalTickets = parseInt(totalTickets.replace(/,/g, ''))
 63 |     onDone(jackpot)
 64 |     jackpot = {}
 65 |   }
 66 | })
 67 | ```
 68 | ### How can I send a command ?
 69 | 
 70 | By using `bot.chat()`.
 71 | 
 72 | **Example:**
 73 | ```js
 74 | bot.chat('/give @p diamond')
 75 | ```
 76 | 
 77 | ### Is it possible to login multiple accounts using bot = mineflayer.createbot while controlling them all separately ?
 78 | 
 79 | Create different bot instances by calling createBot then do different things for each, see multiple.js
 80 | 
 81 | ### How would I make the bot drop it's entire inventory?
 82 | 
 83 | bot.inventory.items() returns an array of the bot's items. You can use a recursive function to loop through them and drop every item using bot.toss(). Click [here](https://gist.github.com/dada513/3d88f772be4224b40f9e5d1787bd63e9) to see an example
 84 | 
 85 | ### How do I check packets that are sent/received ?
 86 | 
 87 | Enabled debug mode https://github.com/PrismarineJS/mineflayer#debug
 88 | 
 89 | ### I want to avoid disconnection even in case of server lag, how can I achieve this ?
 90 | 
 91 | One way is to increase the [checkTimeoutInterval](https://github.com/PrismarineJS/node-minecraft-protocol/blob/master/docs/API.md#mccreateclientoptions) option (to set in createBot) to an higher value (for example `300*1000` which is 5min instead of the default 30s). If you still get disconnected, you can auto reconnect using something like this example https://github.com/PrismarineJS/mineflayer/blob/master/examples/reconnector.js
 92 | 
 93 | ### How to get the lore / text of an item ?
 94 | 
 95 | You can use the `item.nbt` property. It is also recommended to use the `prismarine-nbt` library. The `nbt.simplify()` method may be useful.
 96 | 
 97 | **Example:**
 98 | ```js
 99 | function getLore (item) {
100 |   let message = ''
101 |   if (item.nbt == null) return message
102 | 
103 |   const nbt = require('prismarine-nbt')
104 |   const ChatMessage = require('prismarine-chat')(bot.version)
105 | 
106 |   const data = nbt.simplify(item.nbt)
107 |   const display = data.display
108 |   if (display == null) return message
109 | 
110 |   const lore = display.Lore
111 |   if (lore == null) return message
112 |   for (const line of lore) {
113 |     message += new ChatMessage(line).toString()
114 |     message += '\n'
115 |   }
116 | 
117 |   return message
118 | }
119 | ```
120 | 
121 | ### How can I send message from the console to the server?
122 | 
123 | You can use a library like `repl` to read the console input and use `bot.chat()` to send it. You can find an example [here.](https://github.com/PrismarineJS/mineflayer/blob/master/examples/repl.js)
124 | 
125 | ### When creating a plugin, how can I specify another plugin as a dependency?
126 | 
127 | In the `inject()` function for your plugin, you can safely call `bot.loadPlugin(anotherPlugin)` to make sure that plugin is loaded. If the plugin was already loaded before, nothing happens.
128 | 
129 | Note that the order in which plugins are loaded is dynamic, so you should never call another plugin in your `inject()` function.
130 | 
131 | ### How can I use a socks5 proxy?
132 | 
133 | In the options object for `mineflayer.createBot(options)`, remove your `host` option from the options object, have the following variables declared `PROXY_IP, PROXY_PORT, PROXY_USERNAME, PROXY_PASSWORD, MC_SERVER_ADDRESS, MC_SERVER_PORT` and add this to your options object:
134 | ```js
135 | connect: (client) => {
136 |     socks.createConnection({
137 |       proxy: {
138 |         host: PROXY_IP,
139 |         port: PROXY_PORT,
140 |         type: 5,
141 |         userId: PROXY_USERNAME,
142 |         password: PROXY_PASSWORD
143 |       },
144 |       command: 'connect',
145 |       destination: {
146 |         host: MC_SERVER_ADDRESS,
147 |         port: MC_SERVER_PORT
148 |       }
149 |     }, (err, info) => {
150 |       if (err) {
151 |         console.log(err)
152 |         return
153 |       }
154 |       client.setSocket(info.socket)
155 |       client.emit('connect')
156 |     })
157 |   }
158 |   ```
159 |   `socks` is declared with `const socks = require('socks').SocksClient` and uses [this](https://www.npmjs.com/package/socks) package.
160 |   Some servers might reject the connection. If that happens try adding `fakeHost: MC_SERVER_ADDRESS` to your createBot options.
161 |   
162 | # Common Errors
163 | 
164 | ### `UnhandledPromiseRejectionWarning: Error: Failed to read asymmetric key`
165 | 
166 | This is what happens when either you gave mineflayer the wrong server version, or mineflayer detects the wrong server version
167 | 
168 | ### `TypeError: Cannot read property '?' of undefined`
169 | 
170 | You may be trying to use something on the bot object that isn't there yet, try calling the statement after the `spawn` event
171 | 
172 | ### `SyntaxError: Unexpected token '?'`
173 | 
174 | Update your node version.
175 | 
176 | ### The bot can't break/place blocks or open chests
177 | 
178 | Check that spawn protection isn't stopping the bot from it's action
179 | 
180 | 


--------------------------------------------------------------------------------
/docs/README.md:
--------------------------------------------------------------------------------
  1 | # Mineflayer
  2 | 
  3 | [![NPM version](https://img.shields.io/npm/v/mineflayer.svg?color=success&label=npm%20package&logo=npm)](https://www.npmjs.com/package/mineflayer)
  4 | [![Build Status](https://img.shields.io/github/actions/workflow/status/PrismarineJS/mineflayer/ci.yml.svg?label=CI&logo=github&logoColor=lightgrey)](https://github.com/PrismarineJS/mineflayer/actions?query=workflow%3A%22CI%22)
  5 | [![Try it on gitpod](https://img.shields.io/static/v1.svg?label=try&message=on%20gitpod&color=brightgreen&logo=gitpod)](https://gitpod.io/#https://github.com/PrismarineJS/mineflayer)
  6 | [![Open In Colab](https://img.shields.io/static/v1.svg?label=open&message=on%20colab&color=blue&logo=google-colab)](https://colab.research.google.com/github/PrismarineJS/mineflayer/blob/master/docs/mineflayer.ipynb)
  7 | [![GitHub Sponsors](https://img.shields.io/github/sponsors/PrismarineJS)](https://github.com/sponsors/PrismarineJS)
  8 | 
  9 | [![Official Discord](https://img.shields.io/static/v1.svg?label=OFFICIAL&message=DISCORD&color=blue&logo=discord&style=for-the-badge)](https://discord.gg/GsEFRM8)
 10 | 
 11 | | <sub>EN</sub> [English](README.md) | <sub>RU</sub> [русский](ru/README_RU.md) | <sub>ES</sub> [Español](es/README_ES.md) | <sub>FR</sub> [Français](fr/README_FR.md) | <sub>TR</sub> [Türkçe](tr/README_TR.md) | <sub>ZH</sub> [中文](zh/README_ZH_CN.md) | <sub>BR</sub> [Português](br/README_BR.md) |
 12 | |-------------------------|----------------------------|----------------------------|----------------------------|----------------------------|-------------------------|--------------------|
 13 | 
 14 | Create Minecraft bots with a powerful, stable, and high level JavaScript [API](api.md), also usable from Python.
 15 | 
 16 | First time using Node.js? You may want to start with the [tutorial](tutorial.md). Know Python? Checkout some [Python examples](https://github.com/PrismarineJS/mineflayer/tree/master/examples/python) and try out [Mineflayer on Google Colab](https://colab.research.google.com/github/PrismarineJS/mineflayer/blob/master/docs/mineflayer.ipynb).
 17 | 
 18 | ## Features
 19 | 
 20 |  * Supports Minecraft 1.8 to 1.21 (1.8, 1.9, 1.10, 1.11, 1.12, 1.13, 1.14, 1.15, 1.16, 1.17, 1.18, 1.19, 1.20, and 1.21)
 21 |  * Entity knowledge and tracking.
 22 |  * Block knowledge. You can query the world around you. Milliseconds to find any block.
 23 |  * Physics and movement - handle all bounding boxes
 24 |  * Attacking entities and using vehicles.
 25 |  * Inventory management.
 26 |  * Crafting, chests, dispensers, enchantment tables.
 27 |  * Digging and building.
 28 |  * Miscellaneous stuff such as knowing your health and whether it is raining.
 29 |  * Activating blocks and using items.
 30 |  * Chat.
 31 | 
 32 | ### Roadmap
 33 | 
 34 |  Checkout [this page](https://github.com/PrismarineJS/mineflayer/wiki/Big-Prismarine-projects) to see what our current projects are.
 35 | 
 36 | ## Installation
 37 | 
 38 | First install Node.js >= 18 from [nodejs.org](https://nodejs.org/) then:
 39 | 
 40 | ```bash
 41 | npm install mineflayer
 42 | ```
 43 | 
 44 | To update mineflayer (or any Node.js) package and its dependencies, use 
 45 | ```bash
 46 | npm update
 47 | ```
 48 | 
 49 | ## Documentation
 50 | 
 51 | | link | description |
 52 | |---|---|
 53 | |[tutorial](tutorial.md) | Begin with Node.js and mineflayer |
 54 | | [FAQ.md](FAQ.md) | Got a question ? go there first |
 55 | | **[api.md](api.md)** <br/>[unstable_api.md](unstable_api.md) | The full API reference |
 56 | | [history.md](history.md) | The changelog for mineflayer |
 57 | | [examples/](https://github.com/PrismarineJS/mineflayer/tree/master/examples) | Checkout all the mineflayer examples |
 58 | 
 59 | 
 60 | ## Contribute
 61 | 
 62 | Please read [CONTRIBUTING.md](CONTRIBUTING.md) and [prismarine-contribute](https://github.com/PrismarineJS/prismarine-contribute)
 63 | 
 64 | ## Usage
 65 | 
 66 | **Videos**
 67 | 
 68 | A tutorial video explaining the basic set up process for a bot can be found [here.](https://www.youtube.com/watch?v=ltWosy4Z0Kw)
 69 | 
 70 | If you want to learn more, more video tutorials are [there,](https://www.youtube.com/playlist?list=PLh_alXmxHmzGy3FKbo95AkPp5D8849PEV) and the corresponding source codes for those bots is [there.](https://github.com/TheDudeFromCI/Mineflayer-Youtube-Tutorials)
 71 | 
 72 | [<img src="https://img.youtube.com/vi/ltWosy4Z0Kw/0.jpg" alt="tutorial 1" width="200">](https://www.youtube.com/watch?v=ltWosy4Z0Kw)
 73 | [<img src="https://img.youtube.com/vi/UWGSf08wQSc/0.jpg" alt="tutorial 2" width="200">](https://www.youtube.com/watch?v=UWGSf08wQSc)
 74 | [<img src="https://img.youtube.com/vi/ssWE0kXDGJE/0.jpg" alt="tutorial 3" width="200">](https://www.youtube.com/watch?v=ssWE0kXDGJE)
 75 | [<img src="https://img.youtube.com/vi/walbRk20KYU/0.jpg" alt="tutorial 4" width="200">](https://www.youtube.com/watch?v=walbRk20KYU)
 76 | 
 77 | **Getting Started**
 78 | 
 79 | Without a version specified, the version of the server will be guessed automatically.
 80 | Without auth specified, the mojang auth style will be guessed.
 81 | 
 82 | ### Echo Example
 83 | ```js
 84 | const mineflayer = require('mineflayer')
 85 | 
 86 | const bot = mineflayer.createBot({
 87 |   host: 'localhost', // minecraft server ip
 88 |   username: 'Bot', // username to join as if auth is `offline`, else a unique identifier for this account. Switch if you want to change accounts
 89 |   auth: 'microsoft' // for offline mode servers, you can set this to 'offline'
 90 |   // port: 25565,              // set if you need a port that isn't 25565
 91 |   // version: false,           // only set if you need a specific version or snapshot (ie: "1.8.9" or "1.16.5"), otherwise it's set automatically
 92 |   // password: '12345678'      // set if you want to use password-based auth (may be unreliable). If specified, the `username` must be an email
 93 | })
 94 | 
 95 | bot.on('chat', (username, message) => {
 96 |   if (username === bot.username) return
 97 |   bot.chat(message)
 98 | })
 99 | 
100 | // Log errors and kick reasons:
101 | bot.on('kicked', console.log)
102 | bot.on('error', console.log)
103 | ```
104 | 
105 | If `auth` is set to `microsoft`, you will be prompted to login to microsoft.com with a code in your browser. After signing in on your browser, 
106 | the bot will automatically obtain and cache authentication tokens (under your specified username) so you don't have to sign-in again. 
107 | 
108 | To switch the account, update the supplied `username`. By default, cached tokens will be stored in your user's .minecraft folder, or if `profilesFolder` is specified, they'll instead be stored there.
109 | For more information on bot options see node-minecraft-protocol's [API doc](https://github.com/PrismarineJS/node-minecraft-protocol/blob/master/docs/API.md#mccreateclientoptions).
110 | 
111 | #### Connecting to a Realm
112 | 
113 | To join a Realm that your Minecraft account has been invited to, you can pass a `realms` object with a selector function like below.
114 | 
115 | ```js
116 | const client = mineflayer.createBot({
117 |   username: 'email@example.com', // minecraft username
118 |   realms: {
119 |     // This function is called with an array of Realms the account can join. It should return the one it wants to join.
120 |     pickRealm: (realms) => realms[0]
121 |   },
122 |   auth: 'microsoft'
123 | })
124 | ```
125 | 
126 | ### See what your bot is doing
127 | 
128 | Thanks to the [prismarine-viewer](https://github.com/PrismarineJS/prismarine-viewer) project, it's possible to display in a browser window what your bot is doing.
129 | Just run `npm install prismarine-viewer` and add this to your bot:
130 | ```js
131 | const { mineflayer: mineflayerViewer } = require('prismarine-viewer')
132 | bot.once('spawn', () => {
133 |   mineflayerViewer(bot, { port: 3007, firstPerson: true }) // port is the minecraft server port, if first person is false, you get a bird's-eye view
134 | })
135 | ```
136 | And you'll get a *live* view looking like this:
137 | 
138 | [<img src="https://prismarinejs.github.io/prismarine-viewer/test_1.16.1.png" alt="viewer" width="500">](https://prismarinejs.github.io/prismarine-viewer/)
139 | 
140 | #### More Examples
141 | 
142 | | example | description |
143 | |---|---|
144 | |[viewer](https://github.com/PrismarineJS/mineflayer/tree/master/examples/viewer) | Display your bot world view in the browser |
145 | |[pathfinder](https://github.com/PrismarineJS/mineflayer/tree/master/examples/pathfinder) | Make your bot go to any location automatically |
146 | |[chest](https://github.com/PrismarineJS/mineflayer/blob/master/examples/chest.js) | Use chests, furnaces, dispensers, enchantment tables |
147 | |[digger](https://github.com/PrismarineJS/mineflayer/blob/master/examples/digger.js) | Learn how to create a simple bot that is capable of digging blocks |
148 | |[discord](https://github.com/PrismarineJS/mineflayer/blob/master/examples/discord.js) | Connect a discord bot with a mineflayer bot |
149 | |[jumper](https://github.com/PrismarineJS/mineflayer/blob/master/examples/jumper.js) | Learn how to move, jump, ride vehicles, attack nearby entities |
150 | |[ansi](https://github.com/PrismarineJS/mineflayer/blob/master/examples/ansi.js) | Display your bot's chat with all of the chat colors shown in your terminal |
151 | |[guard](https://github.com/PrismarineJS/mineflayer/blob/master/examples/guard.js) | Make a bot guard a defined area from nearby mobs |
152 | |[multiple-from-file](https://github.com/PrismarineJS/mineflayer/blob/master/examples/multiple_from_file.js) | Add a text file with accounts and have them all login |
153 | 
154 | And many more in the [examples](https://github.com/PrismarineJS/mineflayer/tree/master/examples) folder.
155 | 
156 | ### Modules
157 | 
158 | A lot of the active development is happening inside of small npm packages which are used by mineflayer.
159 | 
160 | #### The Node Way&trade;
161 | 
162 | > "When applications are done well, they are just the really application-specific, brackish residue that can't be so easily abstracted away. All the nice, reusable components sublimate away onto github and npm where everybody can collaborate to advance the commons." — substack from ["how I write modules"](https://gist.github.com/substack/5075355)
163 | 
164 | #### Modules
165 | 
166 | These are the main modules that make up mineflayer:
167 | 
168 | | module | description |
169 | |---|---|
170 | | [minecraft-protocol](https://github.com/PrismarineJS/node-minecraft-protocol) | Parse and serialize minecraft packets, plus authentication and encryption.
171 | | [minecraft-data](https://github.com/PrismarineJS/minecraft-data) | Language independent module providing minecraft data for minecraft clients, servers and libraries.
172 | | [prismarine-physics](https://github.com/PrismarineJS/prismarine-physics) | Provide the physics engine for minecraft entities
173 | | [prismarine-chunk](https://github.com/PrismarineJS/prismarine-chunk) | A class to hold chunk data for Minecraft
174 | | [node-vec3](https://github.com/PrismarineJS/node-vec3) | 3d vector math with robust unit tests
175 | | [prismarine-block](https://github.com/PrismarineJS/prismarine-block) | Represent a minecraft block with its associated data
176 | | [prismarine-chat](https://github.com/PrismarineJS/prismarine-chat) | A parser for a minecraft chat message (extracted from mineflayer)
177 | | [node-yggdrasil](https://github.com/PrismarineJS/node-yggdrasil) | Node.js library to interact with Mojang's authentication system, known as Yggdrasil
178 | | [prismarine-world](https://github.com/PrismarineJS/prismarine-world) | The core implementation of worlds for prismarine
179 | | [prismarine-windows](https://github.com/PrismarineJS/prismarine-windows) | Represent minecraft windows
180 | | [prismarine-item](https://github.com/PrismarineJS/prismarine-item) | Represent a minecraft item with its associated data
181 | | [prismarine-nbt](https://github.com/PrismarineJS/prismarine-nbt) | An NBT parser for node-minecraft-protocol
182 | | [prismarine-recipe](https://github.com/PrismarineJS/prismarine-recipe) | Represent minecraft recipes
183 | | [prismarine-biome](https://github.com/PrismarineJS/prismarine-biome) | Represent a minecraft biome with its associated data
184 | | [prismarine-entity](https://github.com/PrismarineJS/prismarine-entity) | Represent a minecraft entity
185 | 
186 | 
187 | ### Debug
188 | 
189 | You can enable some protocol debugging output using `DEBUG` environment variable:
190 | 
191 | ```bash
192 | DEBUG="minecraft-protocol" node [...]
193 | ```
194 | 
195 | On windows :
196 | ```
197 | set DEBUG=minecraft-protocol
198 | node your_script.js
199 | ```
200 | 
201 | ## Third Party Plugins
202 | 
203 | Mineflayer is pluggable; anyone can create a plugin that adds an even
204 | higher level API on top of Mineflayer.
205 | 
206 | The most updated and useful are :
207 | 
208 |  * [pathfinder](https://github.com/Karang/mineflayer-pathfinder) - advanced A* pathfinding with a lot of configurable features
209 |  * [prismarine-viewer](https://github.com/PrismarineJS/prismarine-viewer) - simple web chunk viewer
210 |  * [web-inventory](https://github.com/ImHarvol/mineflayer-web-inventory) - web based inventory viewer
211 |  * [statemachine](https://github.com/PrismarineJS/mineflayer-statemachine) - A state machine API for more complex bot behaviors
212 |  * [Armor Manager](https://github.com/G07cha/MineflayerArmorManager) - automatic armor management
213 |  * [Dashboard](https://github.com/wvffle/mineflayer-dashboard) - Frontend dashboard for mineflayer bot
214 |  * [PVP](https://github.com/PrismarineJS/mineflayer-pvp) - Easy API for basic PVP and PVE.
215 |  * [Auto Eat](https://github.com/link-discord/mineflayer-auto-eat) - Automatic eating of food.
216 |  * [Auto Crystal](https://github.com/link-discord/mineflayer-autocrystal) - Automatic placing & breaking of end crystals.
217 |  * [Tool](https://github.com/TheDudeFromCI/mineflayer-tool) - A utility for automatic tool/weapon selection with a high level API.
218 |  * [Hawkeye](https://github.com/sefirosweb/minecraftHawkEye) - A utility for using auto-aim with bows.
219 |  * [GUI](https://github.com/firejoust/mineflayer-GUI) - Interact with nested GUI windows using async/await
220 |  * [Projectile](https://github.com/firejoust/mineflayer-projectile) - Get the required launch angle for projectiles
221 |  * [Movement](https://github.com/firejoust/mineflayer-movement) - Smooth and realistic player movement, best suited for PvP
222 |  * [Collect Block](https://github.com/PrismarineJS/mineflayer-collectblock) - Quick and simple block collection API.
223 | 
224 |  But also check out :
225 | 
226 |  * [radar](https://github.com/andrewrk/mineflayer-radar/) - web based radar
227 |    interface using canvas and socket.io. [YouTube Demo](https://www.youtube.com/watch?v=FjDmAfcVulQ)
228 |  * [auto-auth](https://github.com/G07cha/MineflayerAutoAuth) - chat-based bot authentication
229 |  * [Bloodhound](https://github.com/Nixes/mineflayer-bloodhound) - determine who and what is responsible for damage to another entity
230 |  * [tps](https://github.com/SiebeDW/mineflayer-tps) - get the current tps (processed tps)
231 |  * [panorama](https://github.com/IceTank/mineflayer-panorama) - take Panorama Images of your world
232 |  * [player-death-event](https://github.com/tuanzisama/mineflayer-death-event) - emit player death event in Mineflayer.
233 | 
234 | ## Projects Using Mineflayer
235 | 
236 |  * [Voyager](https://github.com/MineDojo/Voyager) An Open-Ended Embodied Agent with Large Language Models
237 |  * [mindcraft](https://github.com/kolbytn/mindcraft) Lib for using mineflayer with LLMs
238 |  * [rom1504/rbot](https://github.com/rom1504/rbot)
239 |    - [YouTube - building a spiral staircase](https://www.youtube.com/watch?v=UM1ZV5200S0)
240 |    - [YouTube - replicating a building](https://www.youtube.com/watch?v=0cQxg9uDnzA)
241 |  * [Darthfett/Helperbot](https://github.com/Darthfett/Helperbot)
242 |  * [vogonistic/voxel](https://github.com/vogonistic/mineflayer-voxel) - visualize what
243 |    the bot is up to using voxel.js
244 |  * [JonnyD/Skynet](https://github.com/JonnyD/Skynet) -  log player activity onto an online API
245 |  * [MinecraftChat](https://github.com/rom1504/MinecraftChat) (last open source version, built by AlexKvazos) -  Minecraft web based chat client
246 |  * [Cheese Bot](https://github.com/Minecheesecraft/Cheese-Bot) - Plugin based bot with a clean GUI. Made with Node-Webkit.
247 |  * [Chaoscraft](https://github.com/schematical/chaoscraft) - Minecraft bot using genetic algorithms, see [its youtube videos](https://www.youtube.com/playlist?list=PLLkpLgU9B5xJ7Qy4kOyBJl5J6zsDIMceH)
248 |  * [hexatester/minetelegram](https://github.com/hexatester/minetelegram) -  Minecraft - Telegram bridge, build on top of mineflayer & telegraf.
249 |  * [PrismarineJS/mineflayer-builder](https://github.com/PrismarineJS/mineflayer-builder) - Prints minecraft schematics in survival, keeping orientation
250 |  * [SilkePilon/OpenDeliveryBot](https://github.com/SilkePilon/OpenDeliveryBot) - Minecraft bot in python to deliver items from place to place.
251 |  * [and hundreds more](https://github.com/PrismarineJS/mineflayer/network/dependents) - All the projects that github detected are using mineflayer
252 | 
253 | 
254 | ## Testing
255 | 
256 | ### Testing everything
257 | 
258 | Simply run: 
259 | 
260 | ```bash
261 | npm test
262 | ```
263 | 
264 | ### Testing specific version
265 | Run 
266 | 
267 | ```bash
268 | npm run mocha_test -- -g <version>
269 | ```
270 | 
271 | where `<version>` is a minecraft version like `1.12`, `1.15.2`...
272 | 
273 | ### Testing specific test
274 | Run 
275 | 
276 | ```bash
277 | npm run mocha_test -- -g <test_name>
278 | ```
279 | 
280 | where `<test_name>` is a name of the test like `bed`, `useChests`, `rayTrace`...
281 | 
282 | ### Example
283 | 
284 | ```bash
285 | npm run mocha_test -- -g "1.18.1.*BlockFinder"
286 | ```
287 | to run the block finder test for 1.18.1
288 | 
289 | ## License
290 | 
291 | [MIT](/LICENSE)
292 | 


--------------------------------------------------------------------------------
/docs/_sidebar.md:
--------------------------------------------------------------------------------
1 | - Getting Started
2 |   - [Introduction](/)
3 |   - [API](api.md)
4 |   - [FAQ](FAQ.md)
5 |   - [Demos](demos.md)
6 |   - [Tutorial](tutorial.md)
7 |   - [Unstable API](unstable_api.md)
8 |   - [Contribute](CONTRIBUTING.md)
9 |   - [History](history.md)


--------------------------------------------------------------------------------
/docs/api.md:
--------------------------------------------------------------------------------
   1 | <!-- START doctoc generated TOC please keep comment here to allow auto update -->
   2 | <!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
   3 | **Table of Contents**  *generated with [DocToc](https://github.com/thlorenz/doctoc)*
   4 | 
   5 | - [API](#api)
   6 |   - [Enums](#enums)
   7 |     - [minecraft-data](#minecraft-data)
   8 |     - [mcdata.blocks](#mcdatablocks)
   9 |     - [mcdata.items](#mcdataitems)
  10 |     - [mcdata.materials](#mcdatamaterials)
  11 |     - [mcdata.recipes](#mcdatarecipes)
  12 |     - [mcdata.instruments](#mcdatainstruments)
  13 |     - [mcdata.biomes](#mcdatabiomes)
  14 |     - [mcdata.entities](#mcdataentities)
  15 |   - [Classes](#classes)
  16 |     - [vec3](#vec3)
  17 |     - [mineflayer.Location](#mineflayerlocation)
  18 |     - [Entity](#entity)
  19 |       - [Player Skin Data](#player-skin-data)
  20 |     - [Block](#block)
  21 |     - [Biome](#biome)
  22 |     - [Item](#item)
  23 |     - [windows.Window (base class)](#windowswindow-base-class)
  24 |       - [window.deposit(itemType, metadata, count, nbt)](#windowdeposititemtype-metadata-count-nbt)
  25 |       - [window.withdraw(itemType, metadata, count, nbt)](#windowwithdrawitemtype-metadata-count-nbt)
  26 |       - [window.close()](#windowclose)
  27 |     - [Recipe](#recipe)
  28 |     - [mineflayer.Container](#mineflayercontainer)
  29 |     - [mineflayer.Furnace](#mineflayerfurnace)
  30 |       - [furnace "update"](#furnace-update)
  31 |       - [furnace.takeInput()](#furnacetakeinput)
  32 |       - [furnace.takeFuel()](#furnacetakefuel)
  33 |       - [furnace.takeOutput()](#furnacetakeoutput)
  34 |       - [furnace.putInput(itemType, metadata, count)](#furnaceputinputitemtype-metadata-count)
  35 |       - [furnace.putFuel(itemType, metadata, count)](#furnaceputfuelitemtype-metadata-count)
  36 |       - [furnace.inputItem()](#furnaceinputitem)
  37 |       - [furnace.fuelItem()](#furnacefuelitem)
  38 |       - [furnace.outputItem()](#furnaceoutputitem)
  39 |       - [furnace.fuel](#furnacefuel)
  40 |       - [furnace.progress](#furnaceprogress)
  41 |     - [mineflayer.EnchantmentTable](#mineflayerenchantmenttable)
  42 |       - [enchantmentTable "ready"](#enchantmenttable-ready)
  43 |       - [enchantmentTable.targetItem()](#enchantmenttabletargetitem)
  44 |       - [enchantmentTable.xpseed](#enchantmenttablexpseed)
  45 |       - [enchantmentTable.enchantments](#enchantmenttableenchantments)
  46 |       - [enchantmentTable.enchant(choice)](#enchantmenttableenchantchoice)
  47 |       - [enchantmentTable.takeTargetItem()](#enchantmenttabletaketargetitem)
  48 |       - [enchantmentTable.putTargetItem(item)](#enchantmenttableputtargetitemitem)
  49 |       - [enchantmentTable.putLapis(item)](#enchantmenttableputlapisitem)
  50 |     - [mineflayer.anvil](#mineflayeranvil)
  51 |       - [anvil.combine(itemOne, itemTwo[, name])](#anvilcombineitemone-itemtwo-name)
  52 |       - [anvil.combine(item[, name])](#anvilcombineitem-name)
  53 |       - [villager "ready"](#villager-ready)
  54 |       - [villager.trades](#villagertrades)
  55 |       - [villager.trade(tradeIndex, [times])](#villagertradetradeindex-times)
  56 |     - [mineflayer.ScoreBoard](#mineflayerscoreboard)
  57 |       - [ScoreBoard.name](#scoreboardname)
  58 |       - [ScoreBoard.title](#scoreboardtitle)
  59 |       - [ScoreBoard.itemsMap](#scoreboarditemsmap)
  60 |       - [ScoreBoard.items](#scoreboarditems)
  61 |     - [mineflayer.Team](#mineflayerteam)
  62 |       - [Team.name](#teamname)
  63 |       - [Team.friendlyFire](#teamfriendlyfire)
  64 |       - [Team.nameTagVisibility](#teamnametagvisibility)
  65 |       - [Team.collisionRule](#teamcollisionrule)
  66 |       - [Team.color](#teamcolor)
  67 |       - [Team.prefix](#teamprefix)
  68 |       - [Team.suffix](#teamsuffix)
  69 |       - [Team.members](#teammembers)
  70 |     - [mineflayer.BossBar](#mineflayerbossbar)
  71 |       - [BossBar.title](#bossbartitle)
  72 |       - [BossBar.health](#bossbarhealth)
  73 |       - [BossBar.dividers](#bossbardividers)
  74 |       - [BossBar.entityUUID](#bossbarentityuuid)
  75 |       - [BossBar.shouldDarkenSky](#bossbarshoulddarkensky)
  76 |       - [BossBar.isDragonBar](#bossbarisdragonbar)
  77 |       - [BossBar.createFog](#bossbarcreatefog)
  78 |       - [BossBar.color](#bossbarcolor)
  79 |     - [mineflayer.Particle](#mineflayerparticle)
  80 |       - [Particle.id](#particleid)
  81 |       - [Particle.name](#particlename)
  82 |       - [Particle.position](#particleposition)
  83 |       - [Particle.offset](#particleoffset)
  84 |       - [Particle.longDistanceRender](#particlelongdistancerender)
  85 |       - [Particle.count](#particlecount)
  86 |       - [Particle.movementSpeed](#particlemovementspeed)
  87 |   - [Bot](#bot)
  88 |     - [mineflayer.createBot(options)](#mineflayercreatebotoptions)
  89 |     - [Properties](#properties)
  90 |       - [bot.registry](#botregistry)
  91 |       - [bot.world](#botworld)
  92 |         - [world "blockUpdate" (oldBlock, newBlock)](#world-blockupdate-oldblock-newblock)
  93 |         - [world "blockUpdate:(x, y, z)" (oldBlock, newBlock)](#world-blockupdatex-y-z-oldblock-newblock)
  94 |       - [bot.entity](#botentity)
  95 |       - [bot.entities](#botentities)
  96 |       - [bot.username](#botusername)
  97 |       - [bot.spawnPoint](#botspawnpoint)
  98 |       - [bot.heldItem](#bothelditem)
  99 |       - [bot.usingHeldItem](#botusinghelditem)
 100 |       - [bot.game.levelType](#botgameleveltype)
 101 |       - [bot.game.dimension](#botgamedimension)
 102 |       - [bot.game.difficulty](#botgamedifficulty)
 103 |       - [bot.game.gameMode](#botgamegamemode)
 104 |       - [bot.game.hardcore](#botgamehardcore)
 105 |       - [bot.game.maxPlayers](#botgamemaxplayers)
 106 |       - [bot.game.serverBrand](#botgameserverbrand)
 107 |       - [bot.game.minY](#botgameminy)
 108 |       - [bot.game.height](#botgameheight)
 109 |       - [bot.physicsEnabled](#botphysicsenabled)
 110 |       - [bot.player](#botplayer)
 111 |       - [bot.players](#botplayers)
 112 |       - [bot.tablist](#bottablist)
 113 |       - [bot.isRaining](#botisraining)
 114 |       - [bot.rainState](#botrainstate)
 115 |       - [bot.thunderState](#botthunderstate)
 116 |       - [bot.chatPatterns](#botchatpatterns)
 117 |       - [bot.settings.chat](#botsettingschat)
 118 |       - [bot.settings.colorsEnabled](#botsettingscolorsenabled)
 119 |       - [bot.settings.viewDistance](#botsettingsviewdistance)
 120 |       - [bot.settings.difficulty](#botsettingsdifficulty)
 121 |       - [bot.settings.skinParts](#botsettingsskinparts)
 122 |         - [bot.settings.skinParts.showCape - boolean](#botsettingsskinpartsshowcape---boolean)
 123 |         - [bot.settings.skinParts.showJacket - boolean](#botsettingsskinpartsshowjacket---boolean)
 124 |         - [bot.settings.skinParts.showLeftSleeve - boolean](#botsettingsskinpartsshowleftsleeve---boolean)
 125 |         - [bot.settings.skinParts.showRightSleeve - boolean](#botsettingsskinpartsshowrightsleeve---boolean)
 126 |         - [bot.settings.skinParts.showLeftPants - boolean](#botsettingsskinpartsshowleftpants---boolean)
 127 |         - [bot.settings.skinParts.showRightPants - boolean](#botsettingsskinpartsshowrightpants---boolean)
 128 |         - [bot.settings.skinParts.showHat - boolean](#botsettingsskinpartsshowhat---boolean)
 129 |       - [bot.settings.enableTextFiltering - boolean](#botsettingsenabletextfiltering---boolean)
 130 |       - [bot.settings.enableServerListing - boolean](#botsettingsenableserverlisting---boolean)
 131 |       - [bot.experience.level](#botexperiencelevel)
 132 |       - [bot.experience.points](#botexperiencepoints)
 133 |       - [bot.experience.progress](#botexperienceprogress)
 134 |       - [bot.health](#bothealth)
 135 |       - [bot.food](#botfood)
 136 |       - [bot.foodSaturation](#botfoodsaturation)
 137 |       - [bot.oxygenLevel](#botoxygenlevel)
 138 |       - [bot.physics](#botphysics)
 139 |       - [bot.fireworkRocketDuration](#botfireworkrocketduration)
 140 |       - [bot.simpleClick.leftMouse (slot)](#botsimpleclickleftmouse-slot)
 141 |       - [bot.simpleClick.rightMouse (slot)](#botsimpleclickrightmouse-slot)
 142 |       - [bot.time.doDaylightCycle](#bottimedodaylightcycle)
 143 |       - [bot.time.bigTime](#bottimebigtime)
 144 |       - [bot.time.time](#bottimetime)
 145 |       - [bot.time.timeOfDay](#bottimetimeofday)
 146 |       - [bot.time.day](#bottimeday)
 147 |       - [bot.time.isDay](#bottimeisday)
 148 |       - [bot.time.moonPhase](#bottimemoonphase)
 149 |       - [bot.time.bigAge](#bottimebigage)
 150 |       - [bot.time.age](#bottimeage)
 151 |       - [bot.quickBarSlot](#botquickbarslot)
 152 |       - [bot.inventory](#botinventory)
 153 |       - [bot.targetDigBlock](#bottargetdigblock)
 154 |       - [bot.isSleeping](#botissleeping)
 155 |       - [bot.scoreboards](#botscoreboards)
 156 |       - [bot.scoreboard](#botscoreboard)
 157 |       - [bot.teams](#botteams)
 158 |       - [bot.teamMap](#botteammap)
 159 |       - [bot.controlState](#botcontrolstate)
 160 |     - [Events](#events)
 161 |       - ["chat" (username, message, translate, jsonMsg, matches)](#chat-username-message-translate-jsonmsg-matches)
 162 |       - ["whisper" (username, message, translate, jsonMsg, matches)](#whisper-username-message-translate-jsonmsg-matches)
 163 |       - ["actionBar" (jsonMsg, verified)](#actionbar-jsonmsg-verified)
 164 |       - ["message" (jsonMsg, position, sender, verified)](#message-jsonmsg-position-sender-verified)
 165 |       - ["messagestr" (message, messagePosition, jsonMsg, sender, verified)](#messagestr-message-messageposition-jsonmsg-sender-verified)
 166 |       - ["inject_allowed"](#inject_allowed)
 167 |       - ["login"](#login)
 168 |       - ["spawn"](#spawn)
 169 |       - ["respawn"](#respawn)
 170 |       - ["game"](#game)
 171 |       - ["resourcePack" (url, hash)](#resourcepack-url-hash)
 172 |       - ["title" (title, type)](#title-title-type)
 173 |       - ["rain"](#rain)
 174 |       - ["weatherUpdate"](#weatherupdate)
 175 |       - ["time"](#time)
 176 |       - ["kicked" (reason, loggedIn)](#kicked-reason-loggedin)
 177 |       - ["end" (reason)](#end-reason)
 178 |       - ["error" (err)](#error-err)
 179 |       - ["spawnReset"](#spawnreset)
 180 |       - ["death"](#death)
 181 |       - ["health"](#health)
 182 |       - ["breath"](#breath)
 183 |       - ["entityAttributes" (entity)](#entityattributes-entity)
 184 |       - ["entitySwingArm" (entity)](#entityswingarm-entity)
 185 |       - ["entityHurt" (entity)](#entityhurt-entity)
 186 |       - ["entityDead" (entity)](#entitydead-entity)
 187 |       - ["entityTaming" (entity)](#entitytaming-entity)
 188 |       - ["entityTamed" (entity)](#entitytamed-entity)
 189 |       - ["entityShakingOffWater" (entity)](#entityshakingoffwater-entity)
 190 |       - ["entityEatingGrass" (entity)](#entityeatinggrass-entity)
 191 |       - ["entityHandSwap" (entity)](#entityhandswap-entity)
 192 |       - ["entityWake" (entity)](#entitywake-entity)
 193 |       - ["entityEat" (entity)](#entityeat-entity)
 194 |       - ["entityCriticalEffect" (entity)](#entitycriticaleffect-entity)
 195 |       - ["entityMagicCriticalEffect" (entity)](#entitymagiccriticaleffect-entity)
 196 |       - ["entityCrouch" (entity)](#entitycrouch-entity)
 197 |       - ["entityUncrouch" (entity)](#entityuncrouch-entity)
 198 |       - ["entityEquip" (entity)](#entityequip-entity)
 199 |       - ["entitySleep" (entity)](#entitysleep-entity)
 200 |       - ["entitySpawn" (entity)](#entityspawn-entity)
 201 |       - ["entityElytraFlew" (entity)](#entityelytraflew-entity)
 202 |       - ["itemDrop" (entity)](#itemdrop-entity)
 203 |       - ["playerCollect" (collector, collected)](#playercollect-collector-collected)
 204 |       - ["entityGone" (entity)](#entitygone-entity)
 205 |       - ["entityMoved" (entity)](#entitymoved-entity)
 206 |       - ["entityDetach" (entity, vehicle)](#entitydetach-entity-vehicle)
 207 |       - ["entityAttach" (entity, vehicle)](#entityattach-entity-vehicle)
 208 |       - ["entityUpdate" (entity)](#entityupdate-entity)
 209 |       - ["entityEffect" (entity, effect)](#entityeffect-entity-effect)
 210 |       - ["entityEffectEnd" (entity, effect)](#entityeffectend-entity-effect)
 211 |       - ["playerJoined" (player)](#playerjoined-player)
 212 |       - ["playerUpdated" (player)](#playerupdated-player)
 213 |       - ["playerLeft" (player)](#playerleft-player)
 214 |       - ["blockUpdate" (oldBlock, newBlock)](#blockupdate-oldblock-newblock)
 215 |       - ["blockUpdate:(x, y, z)" (oldBlock, newBlock)](#blockupdatex-y-z-oldblock-newblock)
 216 |       - ["blockPlaced" (oldBlock, newBlock)](#blockplaced-oldblock-newblock)
 217 |       - ["chunkColumnLoad" (point)](#chunkcolumnload-point)
 218 |       - ["chunkColumnUnload" (point)](#chunkcolumnunload-point)
 219 |       - ["soundEffectHeard" (soundName, position, volume, pitch)](#soundeffectheard-soundname-position-volume-pitch)
 220 |       - ["hardcodedSoundEffectHeard" (soundId, soundCategory, position, volume, pitch)](#hardcodedsoundeffectheard-soundid-soundcategory-position-volume-pitch)
 221 |       - ["noteHeard" (block, instrument, pitch)](#noteheard-block-instrument-pitch)
 222 |       - ["pistonMove" (block, isPulling, direction)](#pistonmove-block-ispulling-direction)
 223 |       - ["chestLidMove" (block, isOpen, block2)](#chestlidmove-block-isopen-block2)
 224 |       - ["blockBreakProgressObserved" (block, destroyStage, entity)](#blockbreakprogressobserved-block-destroystage-entity)
 225 |       - ["blockBreakProgressEnd" (block, entity)](#blockbreakprogressend-block-entity)
 226 |       - ["diggingCompleted" (block)](#diggingcompleted-block)
 227 |       - ["diggingAborted" (block)](#diggingaborted-block)
 228 |       - ["usedFirework" (fireworkEntityId)](#usedfirework-fireworkentityid)
 229 |       - ["move"](#move)
 230 |       - ["forcedMove"](#forcedmove)
 231 |       - ["mount"](#mount)
 232 |       - ["dismount" (vehicle)](#dismount-vehicle)
 233 |       - ["windowOpen" (window)](#windowopen-window)
 234 |       - ["windowClose" (window)](#windowclose-window)
 235 |       - ["sleep"](#sleep)
 236 |       - ["wake"](#wake)
 237 |       - ["experience"](#experience)
 238 |       - ["scoreboardCreated" (scoreboard)](#scoreboardcreated-scoreboard)
 239 |       - ["scoreboardDeleted" (scoreboard)](#scoreboarddeleted-scoreboard)
 240 |       - ["scoreboardTitleChanged" (scoreboard)](#scoreboardtitlechanged-scoreboard)
 241 |       - ["scoreUpdated" (scoreboard, item)](#scoreupdated-scoreboard-item)
 242 |       - ["scoreRemoved" (scoreboard, item)](#scoreremoved-scoreboard-item)
 243 |       - ["scoreboardPosition" (position, scoreboard)](#scoreboardposition-position-scoreboard)
 244 |       - ["teamCreated" (team)](#teamcreated-team)
 245 |       - ["teamRemoved" (team)](#teamremoved-team)
 246 |       - ["teamUpdated" (team)](#teamupdated-team)
 247 |       - ["teamMemberAdded" (team)](#teammemberadded-team)
 248 |       - ["teamMemberRemoved" (team)](#teammemberremoved-team)
 249 |       - ["bossBarCreated" (bossBar)](#bossbarcreated-bossbar)
 250 |       - ["bossBarDeleted" (bossBar)](#bossbardeleted-bossbar)
 251 |       - ["bossBarUpdated" (bossBar)](#bossbarupdated-bossbar)
 252 |       - ["heldItemChanged" (heldItem)](#helditemchanged-helditem)
 253 |       - ["physicsTick" ()](#physicstick-)
 254 |       - ["chat:name" (matches)](#chatname-matches)
 255 |       - ["particle"](#particle)
 256 |     - [Functions](#functions)
 257 |       - [bot.blockAt(point, extraInfos=true)](#botblockatpoint-extrainfostrue)
 258 |       - [bot.waitForChunksToLoad()](#botwaitforchunkstoload)
 259 |       - [bot.blockInSight(maxSteps, vectorLength)](#botblockinsightmaxsteps-vectorlength)
 260 |       - [bot.blockAtCursor(maxDistance=256)](#botblockatcursormaxdistance256)
 261 |       - [bot.entityAtCursor(maxDistance=3.5)](#botentityatcursormaxdistance35)
 262 |       - [bot.blockAtEntityCursor(entity=bot.entity, maxDistance=256)](#botblockatentitycursorentitybotentity-maxdistance256)
 263 |       - [bot.canSeeBlock(block)](#botcanseeblockblock)
 264 |       - [bot.findBlocks(options)](#botfindblocksoptions)
 265 |       - [bot.findBlock(options)](#botfindblockoptions)
 266 |       - [bot.canDigBlock(block)](#botcandigblockblock)
 267 |       - [bot.recipesFor(itemType, metadata, minResultCount, craftingTable)](#botrecipesforitemtype-metadata-minresultcount-craftingtable)
 268 |       - [bot.recipesAll(itemType, metadata, craftingTable)](#botrecipesallitemtype-metadata-craftingtable)
 269 |       - [bot.nearestEntity(match = (entity) => { return true })](#botnearestentitymatch--entity---return-true-)
 270 |     - [Methods](#methods)
 271 |       - [bot.end(reason)](#botendreason)
 272 |       - [bot.quit(reason)](#botquitreason)
 273 |       - [bot.tabComplete(str, [assumeCommand], [sendBlockInSight], [timeout])](#bottabcompletestr-assumecommand-sendblockinsight-timeout)
 274 |       - [bot.chat(message)](#botchatmessage)
 275 |       - [bot.whisper(username, message)](#botwhisperusername-message)
 276 |       - [bot.chatAddPattern(pattern, chatType, description)](#botchataddpatternpattern-chattype-description)
 277 |       - [bot.addChatPattern(name, pattern, chatPatternOptions)](#botaddchatpatternname-pattern-chatpatternoptions)
 278 |       - [bot.addChatPatternSet(name, patterns, chatPatternOptions)](#botaddchatpatternsetname-patterns-chatpatternoptions)
 279 |       - [bot.removeChatPattern(name)](#botremovechatpatternname)
 280 |       - [bot.awaitMessage(...args)](#botawaitmessageargs)
 281 |       - [bot.setSettings(options)](#botsetsettingsoptions)
 282 |       - [bot.loadPlugin(plugin)](#botloadpluginplugin)
 283 |       - [bot.loadPlugins(plugins)](#botloadpluginsplugins)
 284 |       - [bot.hasPlugin(plugin)](#bothaspluginplugin)
 285 |       - [bot.sleep(bedBlock)](#botsleepbedblock)
 286 |       - [bot.isABed(bedBlock)](#botisabedbedblock)
 287 |       - [bot.wake()](#botwake)
 288 |       - [bot.setControlState(control, state)](#botsetcontrolstatecontrol-state)
 289 |       - [bot.getControlState(control)](#botgetcontrolstatecontrol)
 290 |       - [bot.clearControlStates()](#botclearcontrolstates)
 291 |       - [bot.getExplosionDamages(entity, position, radius, [rawDamages])](#botgetexplosiondamagesentity-position-radius-rawdamages)
 292 |       - [bot.lookAt(point, [force])](#botlookatpoint-force)
 293 |       - [bot.look(yaw, pitch, [force])](#botlookyaw-pitch-force)
 294 |       - [bot.updateSign(block, text, back = false)](#botupdatesignblock-text-back--false)
 295 |       - [bot.equip(item, destination)](#botequipitem-destination)
 296 |       - [bot.unequip(destination)](#botunequipdestination)
 297 |       - [bot.tossStack(item)](#bottossstackitem)
 298 |       - [bot.toss(itemType, metadata, count)](#bottossitemtype-metadata-count)
 299 |       - [bot.elytraFly()](#botelytrafly)
 300 |       - [bot.dig(block, [forceLook = true], [digFace])](#botdigblock-forcelook--true-digface)
 301 |       - [bot.stopDigging()](#botstopdigging)
 302 |       - [bot.digTime(block)](#botdigtimeblock)
 303 |       - [bot.acceptResourcePack()](#botacceptresourcepack)
 304 |       - [bot.denyResourcePack()](#botdenyresourcepack)
 305 |       - [bot.placeBlock(referenceBlock, faceVector)](#botplaceblockreferenceblock-facevector)
 306 |       - [bot.placeEntity(referenceBlock, faceVector)](#botplaceentityreferenceblock-facevector)
 307 |       - [bot.activateBlock(block, direction?: Vec3, cursorPos?: Vec3)](#botactivateblockblock-direction-vec3-cursorpos-vec3)
 308 |       - [bot.activateEntity(entity)](#botactivateentityentity)
 309 |       - [bot.activateEntityAt(entity, position)](#botactivateentityatentity-position)
 310 |       - [bot.consume()](#botconsume)
 311 |       - [bot.fish()](#botfish)
 312 |       - [bot.activateItem(offHand=false)](#botactivateitemoffhandfalse)
 313 |       - [bot.deactivateItem()](#botdeactivateitem)
 314 |       - [bot.useOn(targetEntity)](#botuseontargetentity)
 315 |       - [bot.attack(entity, swing = true)](#botattackentity-swing--true)
 316 |       - [bot.swingArm([hand], showHand)](#botswingarmhand-showhand)
 317 |       - [bot.mount(entity)](#botmountentity)
 318 |       - [bot.dismount()](#botdismount)
 319 |       - [bot.moveVehicle(left,forward)](#botmovevehicleleftforward)
 320 |       - [bot.setQuickBarSlot(slot)](#botsetquickbarslotslot)
 321 |       - [bot.craft(recipe, count, craftingTable)](#botcraftrecipe-count-craftingtable)
 322 |       - [bot.writeBook(slot, pages)](#botwritebookslot-pages)
 323 |       - [bot.openContainer(containerBlock or containerEntity, direction?, cursorPos?)](#botopencontainercontainerblock-or-containerentity-direction-cursorpos)
 324 |       - [bot.openChest(chestBlock or minecartchestEntity, direction?, cursorPos?)](#botopenchestchestblock-or-minecartchestentity-direction-cursorpos)
 325 |       - [bot.openFurnace(furnaceBlock)](#botopenfurnacefurnaceblock)
 326 |       - [bot.openDispenser(dispenserBlock)](#botopendispenserdispenserblock)
 327 |       - [bot.openEnchantmentTable(enchantmentTableBlock)](#botopenenchantmenttableenchantmenttableblock)
 328 |       - [bot.openAnvil(anvilBlock)](#botopenanvilanvilblock)
 329 |       - [bot.openVillager(villagerEntity)](#botopenvillagervillagerentity)
 330 |       - [bot.trade(villagerInstance, tradeIndex, [times])](#bottradevillagerinstance-tradeindex-times)
 331 |       - [bot.setCommandBlock(pos, command, [options])](#botsetcommandblockpos-command-options)
 332 |       - [bot.supportFeature(name)](#botsupportfeaturename)
 333 |       - [bot.waitForTicks(ticks)](#botwaitforticksticks)
 334 |       - [bot.respawn()](#botrespawn)
 335 |     - [Lower level inventory methods](#lower-level-inventory-methods)
 336 |       - [bot.clickWindow(slot, mouseButton, mode)](#botclickwindowslot-mousebutton-mode)
 337 |       - [bot.putSelectedItemRange(start, end, window, slot)](#botputselecteditemrangestart-end-window-slot)
 338 |       - [bot.putAway(slot)](#botputawayslot)
 339 |       - [bot.closeWindow(window)](#botclosewindowwindow)
 340 |       - [bot.transfer(options)](#bottransferoptions)
 341 |       - [bot.openBlock(block, direction?: Vec3, cursorPos?: Vec3)](#botopenblockblock-direction-vec3-cursorpos-vec3)
 342 |       - [bot.openEntity(entity)](#botopenentityentity)
 343 |       - [bot.moveSlotItem(sourceSlot, destSlot)](#botmoveslotitemsourceslot-destslot)
 344 |       - [bot.updateHeldItem()](#botupdatehelditem)
 345 |       - [bot.getEquipmentDestSlot(destination)](#botgetequipmentdestslotdestination)
 346 |     - [bot.creative](#botcreative)
 347 |       - [bot.creative.setInventorySlot(slot, item)](#botcreativesetinventoryslotslot-item)
 348 |       - [bot.creative.clearSlot(slot)](#botcreativeclearslotslot)
 349 |       - [bot.creative.clearInventory()](#botcreativeclearinventory)
 350 |       - [bot.creative.flyTo(destination)](#botcreativeflytodestination)
 351 |       - [bot.creative.startFlying()](#botcreativestartflying)
 352 |       - [bot.creative.stopFlying()](#botcreativestopflying)
 353 | 
 354 | <!-- END doctoc generated TOC please keep comment here to allow auto update -->
 355 | 
 356 | # API
 357 | 
 358 | ## Enums
 359 | 
 360 | These enums are stored in the language independent [minecraft-data](https://github.com/PrismarineJS/minecraft-data) project,
 361 |  and accessed through [node-minecraft-data](https://github.com/PrismarineJS/node-minecraft-data).
 362 | 
 363 | ### minecraft-data
 364 | The data is available in [node-minecraft-data](https://github.com/PrismarineJS/node-minecraft-data) module
 365 | 
 366 | `require('minecraft-data')(bot.version)` gives you access to it.
 367 | 
 368 | ### mcdata.blocks
 369 | blocks indexed by id
 370 | 
 371 | ### mcdata.items
 372 | items indexed by id
 373 | 
 374 | ### mcdata.materials
 375 | 
 376 | The key is the material. The value is an object with the key as the item id
 377 | of the tool and the value as the efficiency multiplier.
 378 | 
 379 | ### mcdata.recipes
 380 | recipes indexed by id
 381 | 
 382 | ### mcdata.instruments
 383 | instruments indexed by id
 384 | 
 385 | ### mcdata.biomes
 386 | biomes indexed by id
 387 | 
 388 | ### mcdata.entities
 389 | entities indexed by id
 390 | 
 391 | ## Classes
 392 | 
 393 | ### vec3
 394 | 
 395 | See [andrewrk/node-vec3](https://github.com/andrewrk/node-vec3)
 396 | 
 397 | All points in mineflayer are supplied as instances of this class.
 398 | 
 399 |  * x - south
 400 |  * y - up
 401 |  * z - west
 402 | 
 403 | Functions and methods which require a point argument accept `Vec3` instances
 404 | as well as an array with 3 values, and an object with `x`, `y`, and `z`
 405 | properties.
 406 | 
 407 | ### mineflayer.Location
 408 | 
 409 | ### Entity
 410 | 
 411 | Entities represent players, mobs, and objects. They are emitted
 412 | in many events, and you can access your own entity with `bot.entity`.
 413 | See [prismarine-entity](https://github.com/PrismarineJS/prismarine-entity)
 414 | 
 415 | #### Player Skin Data
 416 | 
 417 | The skin data is stored in the `skinData` property of the player object, if present.
 418 | 
 419 | ```js
 420 | // player.skinData
 421 | {
 422 |   url: 'http://textures.minecraft.net/texture/...',
 423 |   model: 'slim' // or 'classic'
 424 | }
 425 | ```
 426 | 
 427 | ### Block
 428 | 
 429 | See [prismarine-block](https://github.com/PrismarineJS/prismarine-block)
 430 | 
 431 | Also `block.blockEntity` is additional field with block entity data as `Object`. The data in this varies between versions.
 432 | ```js
 433 | // sign.blockEntity example from 1.19
 434 | {
 435 |   GlowingText: 0, // 0 for false, 1 for true
 436 |   Color: 'black',
 437 |   Text1: '{"text":"1"}',
 438 |   Text2: '{"text":"2"}',
 439 |   Text3: '{"text":"3"}',
 440 |   Text4: '{"text":"4"}'
 441 | }
 442 | ```
 443 | 
 444 | Note if you want to get a sign's plain text, you can use [`block.getSignText()`](https://github.com/PrismarineJS/prismarine-block/blob/master/doc/API.md#sign) instead of unstable blockEntity data.
 445 | ```java
 446 | > block = bot.blockAt(new Vec3(0, 60, 0)) // assuming a sign is here
 447 | > block.getSignText()
 448 | [ "Front text\nHello world", "Back text\nHello world" ]
 449 | ```
 450 | 
 451 | ### Biome
 452 | 
 453 | See [prismarine-biome](https://github.com/PrismarineJS/prismarine-biome)
 454 | 
 455 | ### Item
 456 | 
 457 | See [prismarine-item](https://github.com/PrismarineJS/prismarine-item)
 458 | 
 459 | ### windows.Window (base class)
 460 | 
 461 | See [prismarine-windows](https://github.com/PrismarineJS/prismarine-windows)
 462 | 
 463 | #### window.deposit(itemType, metadata, count, nbt)
 464 | 
 465 | This function returns a `Promise`, with `void` as its argument when done depositing.
 466 | 
 467 |  * `itemType` - numerical item id
 468 |  * `metadata` - numerical value. `null` means match anything.
 469 |  * `count` - how many to deposit. `null` is an alias to 1.
 470 |  * `nbt` - match nbt data. `null` is do not match nbt.
 471 | 
 472 | #### window.withdraw(itemType, metadata, count, nbt)
 473 | 
 474 | This function returns a `Promise`, with `void` as its argument when done withdrawing. Throws and error if the bot has no free room in its inventory.
 475 | 
 476 |  * `itemType` - numerical item id
 477 |  * `metadata` - numerical value. `null` means match anything.
 478 |  * `count` - how many to withdraw. `null` is an alias to 1.
 479 |  * `nbt` - match nbt data. `null` is do not match nbt.
 480 | 
 481 | #### window.close()
 482 | 
 483 | ### Recipe
 484 | 
 485 | See [prismarine-recipe](https://github.com/PrismarineJS/prismarine-recipe)
 486 | 
 487 | ### mineflayer.Container
 488 | 
 489 | Extends windows.Window for chests, dispensers, etc...
 490 | See `bot.openContainer(chestBlock or minecartchestEntity)`.
 491 | 
 492 | ### mineflayer.Furnace
 493 | 
 494 | Extends windows.Window for furnace, smelter, etc...
 495 | See `bot.openFurnace(furnaceBlock)`.
 496 | 
 497 | #### furnace "update"
 498 | 
 499 | Fires when `furnace.fuel` and/or `furnace.progress` update.
 500 | 
 501 | #### furnace.takeInput()
 502 | 
 503 | This function returns a `Promise`, with `item` as its argument upon completion.
 504 | 
 505 | 
 506 | #### furnace.takeFuel()
 507 | 
 508 | This function returns a `Promise`, with `item` as its argument upon completion.
 509 | 
 510 | 
 511 | #### furnace.takeOutput()
 512 | 
 513 | This function returns a `Promise`, with `item` as its argument upon completion.
 514 | 
 515 | 
 516 | #### furnace.putInput(itemType, metadata, count)
 517 | 
 518 | This function returns a `Promise`, with `void` as its argument upon completion.
 519 | 
 520 | #### furnace.putFuel(itemType, metadata, count)
 521 | 
 522 | This function returns a `Promise`, with `void` as its argument upon completion.
 523 | 
 524 | #### furnace.inputItem()
 525 | 
 526 | Returns `Item` instance which is the input.
 527 | 
 528 | #### furnace.fuelItem()
 529 | 
 530 | Returns `Item` instance which is the fuel.
 531 | 
 532 | #### furnace.outputItem()
 533 | 
 534 | Returns `Item` instance which is the output.
 535 | 
 536 | #### furnace.fuel
 537 | 
 538 | How much fuel is left between 0 and 1.
 539 | 
 540 | #### furnace.progress
 541 | 
 542 | How much cooked the input is between 0 and 1.
 543 | 
 544 | ### mineflayer.EnchantmentTable
 545 | 
 546 | Extends windows.Window for enchantment tables
 547 | See `bot.openEnchantmentTable(enchantmentTableBlock)`.
 548 | 
 549 | #### enchantmentTable "ready"
 550 | 
 551 | Fires when `enchantmentTable.enchantments` is fully populated and you
 552 | may make a selection by calling `enchantmentTable.enchant(choice)`.
 553 | 
 554 | #### enchantmentTable.targetItem()
 555 | 
 556 | Gets the target item. This is both the input and the output of the
 557 | enchantment table.
 558 | 
 559 | #### enchantmentTable.xpseed
 560 | 
 561 | The 16 bits xpseed sent by the server.
 562 | 
 563 | #### enchantmentTable.enchantments
 564 | 
 565 | Array of length 3 which are the 3 enchantments to choose from.
 566 | `level` can be `-1` if the server has not sent the data yet.
 567 | 
 568 | Looks like:
 569 | 
 570 | ```js
 571 | [
 572 |   {
 573 |     level: 3
 574 |   },
 575 |   {
 576 |     level: 4
 577 |   },
 578 |   {
 579 |     level: 9
 580 |   }
 581 | ]
 582 | ```
 583 | 
 584 | #### enchantmentTable.enchant(choice)
 585 | 
 586 | This function returns a `Promise`, with `item` as its argument when the item has been enchanted.
 587 | 
 588 |  * `choice` - [0-2], the index of the enchantment you want to pick.
 589 | 
 590 | #### enchantmentTable.takeTargetItem()
 591 | 
 592 | This function returns a `Promise`, with `item` as its argument upon completion.
 593 | 
 594 | 
 595 | #### enchantmentTable.putTargetItem(item)
 596 | 
 597 | This function returns a `Promise`, with `void` as its argument upon completion.
 598 | 
 599 | 
 600 | #### enchantmentTable.putLapis(item)
 601 | 
 602 | This function returns a `Promise`, with `void` as its argument upon completion.
 603 | 
 604 | 
 605 | ### mineflayer.anvil
 606 | 
 607 | Extends windows.Window for anvils
 608 | See `bot.openAnvil(anvilBlock)`.
 609 | 
 610 | #### anvil.combine(itemOne, itemTwo[, name])
 611 | 
 612 | This function returns a `Promise`, with `void` as its argument upon completion.
 613 | 
 614 | 
 615 | #### anvil.combine(item[, name])
 616 | 
 617 | This function returns a `Promise`, with `void` as its argument upon completion.
 618 | 
 619 | 
 620 | #### villager "ready"
 621 | 
 622 | Fires when `villager.trades` is loaded.
 623 | 
 624 | #### villager.trades
 625 | 
 626 | Array of trades.
 627 | 
 628 | Looks like:
 629 | 
 630 | ```js
 631 | [
 632 |   {
 633 |     firstInput: Item,
 634 |     output: Item,
 635 |     hasSecondItem: false,
 636 |     secondaryInput: null,
 637 |     disabled: false,
 638 |     tooluses: 0,
 639 |     maxTradeuses: 7
 640 |   },
 641 |   {
 642 |     firstInput: Item,
 643 |     output: Item,
 644 |     hasSecondItem: false,
 645 |     secondaryInput: null,
 646 |     disabled: false,
 647 |     tooluses: 0,
 648 |     maxTradeuses: 7
 649 |   },
 650 |   {
 651 |     firstInput: Item,
 652 |     output: Item,
 653 |     hasSecondItem: true,
 654 |     secondaryInput: Item,
 655 |     disabled: false,
 656 |     tooluses: 0,
 657 |     maxTradeuses: 7
 658 |   }
 659 | ]
 660 | ```
 661 | 
 662 | #### villager.trade(tradeIndex, [times])
 663 | Is the same as [bot.trade(villagerInstance, tradeIndex, [times])](#bottradevillagerinstance-tradeindex-times)
 664 | 
 665 | ### mineflayer.ScoreBoard
 666 | 
 667 | #### ScoreBoard.name
 668 | 
 669 | Name of the scoreboard.
 670 | 
 671 | #### ScoreBoard.title
 672 | 
 673 | The title of the scoreboard (does not always equal the name)
 674 | 
 675 | #### ScoreBoard.itemsMap
 676 | 
 677 | An object with all items in the scoreboard in it
 678 | ```js
 679 | {
 680 |   wvffle: { name: 'wvffle', value: 3 },
 681 |   dzikoysk: { name: 'dzikoysk', value: 6 }
 682 | }
 683 | ```
 684 | 
 685 | #### ScoreBoard.items
 686 | 
 687 | An array with all sorted items in the scoreboard in it
 688 | ```js
 689 | [
 690 |   { name: 'dzikoysk', value: 6 },
 691 |   { name: 'wvffle', value: 3 }
 692 | ]
 693 | ```
 694 | 
 695 | ### mineflayer.Team
 696 | 
 697 | #### Team.name
 698 | 
 699 | Name of the team
 700 | 
 701 | #### Team.friendlyFire
 702 | 
 703 | #### Team.nameTagVisibility
 704 | 
 705 | One of `always`, `hideForOtherTeams`, `hideForOwnTeam`
 706 | 
 707 | #### Team.collisionRule
 708 | 
 709 | One of `always`, `pushOtherTeams`, `pushOwnTeam`
 710 | 
 711 | #### Team.color
 712 | 
 713 | Color (or formatting) name of team, e.g. `dark_green`, `red`, `underlined`
 714 | 
 715 | #### Team.prefix
 716 | 
 717 | A chat component containing team prefix
 718 | 
 719 | #### Team.suffix
 720 | 
 721 | A chat component containing team suffix
 722 | 
 723 | #### Team.members
 724 | 
 725 | Array of team members. Usernames for players and UUIDs for other entities.
 726 | 
 727 | ### mineflayer.BossBar
 728 | 
 729 | #### BossBar.title
 730 | 
 731 | Title of boss bar, instance of ChatMessage
 732 | 
 733 | #### BossBar.health
 734 | 
 735 | Percent of boss health, from `0` to `1`
 736 | 
 737 | #### BossBar.dividers
 738 | 
 739 | Number of boss bar dividers, one of `0`, `6`, `10`, `12`, `20`
 740 | 
 741 | #### BossBar.entityUUID
 742 | 
 743 | Boss bar entity uuid
 744 | 
 745 | #### BossBar.shouldDarkenSky
 746 | 
 747 | Determines whether or not to darken the sky
 748 | 
 749 | #### BossBar.isDragonBar
 750 | 
 751 | Determines whether or not boss bar is dragon bar
 752 | 
 753 | #### BossBar.createFog
 754 | 
 755 | Determines whether or not boss bar creates fog
 756 | 
 757 | #### BossBar.color
 758 | 
 759 | Determines what color the boss bar color is, one of `pink`, `blue`, `red`, `green`, `yellow`, `purple`, `white`
 760 | 
 761 | ### mineflayer.Particle
 762 | 
 763 | #### Particle.id
 764 | 
 765 | Particle ID, as defined in the [protocol](https://wiki.vg/Protocol#Particle)
 766 | 
 767 | #### Particle.name
 768 | 
 769 | Particle Name, as defined in the [protocol](https://wiki.vg/Protocol#Particle)
 770 | 
 771 | #### Particle.position
 772 | 
 773 | Vec3 instance of where the particle was created
 774 | 
 775 | #### Particle.offset
 776 | 
 777 | Vec3 instance of the particle's offset
 778 | 
 779 | #### Particle.longDistanceRender
 780 | 
 781 | Determines whether or not to force the rendering of a particle despite client particle settings and increases maximum view distance from 256 to 65536
 782 | 
 783 | #### Particle.count
 784 | 
 785 | Amount of particles created
 786 | 
 787 | #### Particle.movementSpeed
 788 | 
 789 | Particle speed in a random direction
 790 | 
 791 | ## Bot
 792 | 
 793 | ### mineflayer.createBot(options)
 794 | 
 795 | Create and return an instance of the class bot.
 796 | `options` is an object containing the optional properties :
 797 |  * username : default to 'Player'
 798 |  * port : default to 25565
 799 |  * password : can be omitted (if the tokens are also omitted then it tries to connect in offline mode)
 800 |  * host : default to localhost
 801 |  * version : default to automatically guessing the version of the server. Example of value : "1.12.2"
 802 |  * auth : default to 'mojang', can also be 'microsoft'
 803 |  * clientToken : generated if a password is given
 804 |  * accessToken : generated if a password is given
 805 |  * logErrors : true by default, catch errors and log them
 806 |  * hideErrors : true by default, do not log errors (even if logErrors is true)
 807 |  * keepAlive : send keep alive packets : default to true
 808 |  * checkTimeoutInterval : default to `30*1000` (30s), check if keepalive received at that period, disconnect otherwise.
 809 |  * loadInternalPlugins : defaults to true
 810 |  * storageBuilder : an optional function, takes as argument version and worldName and return an instance of something with the same API as prismarine-provider-anvil. Will be used to save the world.
 811 |  * client : an instance of node-minecraft-protocol, if not specified, mineflayer makes its own client. This can be used to enable using mineflayer through a proxy of many clients or a vanilla client and a mineflayer client.
 812 |  * brand : the brand name for the client to use. Defaults to vanilla. Can be used to simulate custom clients for servers that require it.
 813 |  * respawn : when set to false disables bot from automatically respawning, defaults to true.
 814 |  * plugins : object : defaults to {}
 815 |    - pluginName : false : don't load internal plugin with given name ie. `pluginName`
 816 |    - pluginName : true : load internal plugin with given name ie. `pluginName` even though loadInternalplugins is set to false
 817 |    - pluginName : external plugin inject function : loads external plugin, overrides internal plugin with given name ie. `pluginName`
 818 |  * physicsEnabled : true by default, should the bot be affected by physics? can later be modified via bot.physicsEnabled
 819 |  * [chat](#bot.settings.chat)
 820 |  * [colorsEnabled](#bot.settings.colorsEnabled)
 821 |  * [viewDistance](#bot.settings.viewDistance)
 822 |  * [difficulty](#bot.settings.difficulty)
 823 |  * [skinParts](#bot.settings.skinParts)
 824 |  * [enableTextFiltering](#bot.settings.enableTextFiltering)
 825 |  * [enableServerListing](#bot.settings.enableServerListing)
 826 |  * chatLengthLimit : the maximum amount of characters that can be sent in a single message. If this is not set, it will be 100 in < 1.11 and 256 in >= 1.11.
 827 |  * defaultChatPatterns: defaults to true, set to false to not add the patterns such as chat and whisper
 828 | 
 829 | ### Properties
 830 | 
 831 | #### bot.registry
 832 | 
 833 | Instance of minecraft-data used by the bot. Pass this to constructors that expect an instance of minecraft-data, such as prismarine-block.
 834 | 
 835 | #### bot.world
 836 | 
 837 | A sync representation of the world. Check the doc at http://github.com/PrismarineJS/prismarine-world
 838 | 
 839 | ##### world "blockUpdate" (oldBlock, newBlock)
 840 | 
 841 | Fires when a block updates. Both `oldBlock` and `newBlock` provided for
 842 | comparison.
 843 | `oldBlock` may be `null` with normal block updates.
 844 | 
 845 | ##### world "blockUpdate:(x, y, z)" (oldBlock, newBlock)
 846 | 
 847 | Fires for a specific point. Both `oldBlock` and `newBlock` provided for
 848 | comparison. All listeners receive null for `oldBlock` and `newBlock` and get automatically removed when the world is unloaded.
 849 | `oldBlock` may be `null` with normal block updates.
 850 | 
 851 | 
 852 | #### bot.entity
 853 | 
 854 | Your own entity. See `Entity`.
 855 | 
 856 | #### bot.entities
 857 | 
 858 | All nearby entities. This object is a map of entityId to entity.
 859 | 
 860 | #### bot.username
 861 | 
 862 | Use this to find out your own name.
 863 | 
 864 | #### bot.spawnPoint
 865 | 
 866 | Coordinates to the main spawn point, where all compasses point to.
 867 | 
 868 | #### bot.heldItem
 869 | 
 870 | The item in the bot's hand, represented as a [prismarine-item](https://github.com/PrismarineJS/prismarine-item) instance specified with arbitrary metadata, nbtdata, etc.
 871 | 
 872 | #### bot.usingHeldItem
 873 | 
 874 | Whether the bot is using the item that it's holding, for example eating food or using a shield.
 875 | 
 876 | #### bot.game.levelType
 877 | 
 878 | #### bot.game.dimension
 879 | 
 880 | The bot's current dimension, such as `overworld`, `the_end` or `the_nether`.
 881 | 
 882 | #### bot.game.difficulty
 883 | 
 884 | #### bot.game.gameMode
 885 | 
 886 | #### bot.game.hardcore
 887 | 
 888 | #### bot.game.maxPlayers
 889 | 
 890 | #### bot.game.serverBrand
 891 | 
 892 | #### bot.game.minY
 893 | 
 894 | minimum y of the world
 895 | 
 896 | #### bot.game.height
 897 | 
 898 | world height
 899 | 
 900 | #### bot.physicsEnabled
 901 | 
 902 | Enable physics, default true.
 903 | 
 904 | #### bot.player
 905 | 
 906 | Bot's player object
 907 | ```js
 908 | {
 909 |   username: 'player',
 910 |   displayName: { toString: Function }, // ChatMessage object.
 911 |   gamemode: 0,
 912 |   ping: 28,
 913 |   entity: entity // null if you are too far away
 914 | }
 915 | ```
 916 | 
 917 | A player's ping starts at 0, you might have to wait a bit for the server to send their actual ping.
 918 | 
 919 | #### bot.players
 920 | 
 921 | Map of username to people playing the game.
 922 | 
 923 | #### bot.tablist
 924 | 
 925 | bot's tablist object has two keys, `header` and `footer`.
 926 | 
 927 | ```js
 928 | {
 929 |   header: { toString: Function }, // ChatMessage object.
 930 |   footer: { toString: Function } // ChatMessage object.
 931 | }
 932 | ```
 933 | 
 934 | #### bot.isRaining
 935 | 
 936 | #### bot.rainState
 937 | 
 938 | A number indicating the current rain level. When it isn't raining, this
 939 | will be equal to 0. When it starts to rain, this value will increase
 940 | gradually up to 1. When it stops raining, this value gradually decreases back to 0.
 941 | 
 942 | Each time `bot.rainState` is changed, the "weatherUpdate" event is emitted.
 943 | 
 944 | #### bot.thunderState
 945 | 
 946 | A number indicating the current thunder level. When there isn't a thunderstorm, this
 947 | will be equal to 0. When a thunderstorm starts, this value will increase
 948 | gradually up to 1. When the thunderstorm stops, this value gradually decreases back to 0.
 949 | 
 950 | Each time `bot.thunderState` is changed, the "weatherUpdate" event is emitted.
 951 | 
 952 | This is the same as `bot.rainState`, but for thunderstorms.
 953 | For thunderstorms, both `bot.rainState` and `bot.thunderState` will change.
 954 | 
 955 | #### bot.chatPatterns
 956 | 
 957 | This is an array of pattern objects, of the following format:
 958 | { /regex/, "chattype", "description")
 959 |  * /regex/ - a regular expression pattern, that should have at least two capture groups
 960 |  * 'chattype' - the type of chat the pattern matches, ex "chat" or "whisper", but can be anything.
 961 |  * 'description' - description of what the pattern is for, optional.
 962 | 
 963 | #### bot.settings.chat
 964 | 
 965 | Choices:
 966 | 
 967 |  * `enabled` (default)
 968 |  * `commandsOnly`
 969 |  * `disabled`
 970 | 
 971 | #### bot.settings.colorsEnabled
 972 | 
 973 | Default true, whether or not you receive color codes in chats from the server.
 974 | 
 975 | #### bot.settings.viewDistance
 976 | 
 977 | Can be a string listed below or a positive number.
 978 | Choices:
 979 |  * `far` (default)
 980 |  * `normal`
 981 |  * `short`
 982 |  * `tiny`
 983 | 
 984 | #### bot.settings.difficulty
 985 | 
 986 | Same as from server.properties.
 987 | 
 988 | #### bot.settings.skinParts
 989 | 
 990 | These boolean Settings control if extra Skin Details on the own players' skin should be visible
 991 | 
 992 | ##### bot.settings.skinParts.showCape - boolean
 993 | 
 994 | If you have a cape you can turn it off by setting this to false.
 995 | 
 996 | ##### bot.settings.skinParts.showJacket - boolean
 997 | 
 998 | ##### bot.settings.skinParts.showLeftSleeve - boolean
 999 | 
1000 | ##### bot.settings.skinParts.showRightSleeve - boolean
1001 | 
1002 | ##### bot.settings.skinParts.showLeftPants - boolean
1003 | 
1004 | ##### bot.settings.skinParts.showRightPants - boolean
1005 | 
1006 | ##### bot.settings.skinParts.showHat - boolean
1007 | 
1008 | #### bot.settings.enableTextFiltering - boolean
1009 | Unused, defaults to false in Notchian (Vanilla) client.
1010 | #### bot.settings.enableServerListing - boolean
1011 | This setting is sent to the server to determine whether the player should show up in server listings
1012 | #### bot.experience.level
1013 | 
1014 | #### bot.experience.points
1015 | 
1016 | Total experience points.
1017 | 
1018 | #### bot.experience.progress
1019 | 
1020 | Between 0 and 1 - amount to get to the next level.
1021 | 
1022 | #### bot.health
1023 | 
1024 | Number in the range [0, 20] representing the number of half-hearts.
1025 | 
1026 | #### bot.food
1027 | 
1028 | Number in the range [0, 20] representing the number of half-turkey-legs.
1029 | 
1030 | #### bot.foodSaturation
1031 | 
1032 | Food saturation acts as a food "overcharge". Food values will not decrease
1033 | while the saturation is over zero. Players logging in automatically get a
1034 | saturation of 5.0. Eating food increases the saturation as well as the food bar.
1035 | 
1036 | #### bot.oxygenLevel
1037 | 
1038 | Number in the range [0, 20] representing the number of water-icons known as oxygen level.
1039 | 
1040 | #### bot.physics
1041 | 
1042 | Edit these numbers to tweak gravity, jump speed, terminal velocity, etc.
1043 | Do this at your own risk.
1044 | 
1045 | #### bot.fireworkRocketDuration
1046 | 
1047 | How many physics ticks worth of firework rocket boost are left.
1048 | 
1049 | #### bot.simpleClick.leftMouse (slot)
1050 | 
1051 | abstraction over `bot.clickWindow(slot, 0, 0)`
1052 | 
1053 | #### bot.simpleClick.rightMouse (slot)
1054 | 
1055 | abstraction over `bot.clickWindow(slot, 1, 0)`
1056 | 
1057 | #### bot.time.doDaylightCycle
1058 | 
1059 | Whether or not the gamerule doDaylightCycle is true or false.
1060 | 
1061 | #### bot.time.bigTime
1062 | 
1063 | The total number of ticks since day 0.
1064 | 
1065 | This value is of type BigInt and is accurate even at very large values. (more than 2^51 - 1 ticks)
1066 | 
1067 | #### bot.time.time
1068 | 
1069 | The total numbers of ticks since day 0.
1070 | 
1071 | Because the Number limit of Javascript is at 2^51 - 1 bot.time.time becomes inaccurate higher than this limit and the use of bot.time.bigTime is recommended.
1072 | Realistically though you'll probably never need to use bot.time.bigTime as it will only reach 2^51 - 1 ticks naturally after ~14280821 real years.
1073 | 
1074 | #### bot.time.timeOfDay
1075 | 
1076 | Time of the day, in ticks.
1077 | 
1078 | Time is based on ticks, where 20 ticks happen every second. There are 24000
1079 | ticks in a day, making Minecraft days exactly 20 minutes long.
1080 | 
1081 | The time of day is based on the timestamp modulo 24000. 0 is sunrise, 6000
1082 | is noon, 12000 is sunset, and 18000 is midnight.
1083 | 
1084 | #### bot.time.day
1085 | 
1086 | Day of the world.
1087 | 
1088 | #### bot.time.isDay
1089 | 
1090 | Whether it is day or not.
1091 | 
1092 | Based on whether the current time of day is between 13000 and 23000 ticks.
1093 | 
1094 | #### bot.time.moonPhase
1095 | 
1096 | Phase of the moon.
1097 | 
1098 | 0-7 where 0 is full moon.
1099 | 
1100 | #### bot.time.bigAge
1101 | 
1102 | Age of the world, in ticks.
1103 | 
1104 | This value is of type BigInt and is accurate even at very large values. (more than 2^51 - 1 ticks)
1105 | 
1106 | #### bot.time.age
1107 | 
1108 | Age of the world, in ticks.
1109 | 
1110 | Because the Number limit of Javascript is at 2^51 - 1 bot.time.age becomes inaccurate higher than this limit and the use of bot.time.bigAge is recommended.
1111 | Realistically though you'll probably never need to use bot.time.bigAge as it will only reach 2^51 - 1 ticks naturally after ~14280821 real years.
1112 | 
1113 | #### bot.quickBarSlot
1114 | 
1115 | Which quick bar slot is selected (0 - 8).
1116 | 
1117 | #### bot.inventory
1118 | 
1119 | A [`Window`](https://github.com/PrismarineJS/prismarine-windows#windowswindow-base-class) instance representing your inventory.
1120 | 
1121 | #### bot.targetDigBlock
1122 | 
1123 | The `block` that you are currently digging, or `null`.
1124 | 
1125 | #### bot.isSleeping
1126 | 
1127 | Boolean, whether or not you are in bed.
1128 | 
1129 | #### bot.scoreboards
1130 | 
1131 | All scoreboards known to the bot in an object scoreboard name -> scoreboard.
1132 | 
1133 | #### bot.scoreboard
1134 | 
1135 | All scoreboards known to the bot in an object scoreboard displaySlot -> scoreboard.
1136 | 
1137 |  * `belowName` - scoreboard placed in belowName
1138 |  * `sidebar` - scoreboard placed in sidebar
1139 |  * `list` - scoreboard placed in list
1140 |  * `0-18` - slots defined in [protocol](https://wiki.vg/Protocol#Display_Scoreboard)
1141 | 
1142 | #### bot.teams
1143 | 
1144 | All teams known to the bot
1145 | 
1146 | #### bot.teamMap
1147 | 
1148 | Mapping of member to team. Uses usernames for players and UUIDs for entities.
1149 | 
1150 | #### bot.controlState
1151 | 
1152 | An object whose keys are the main control states: ['forward', 'back', 'left', 'right', 'jump', 'sprint', 'sneak'].
1153 | 
1154 | Setting values for this object internally calls [bot.setControlState](#botsetcontrolstatecontrol-state).
1155 | 
1156 | ### Events
1157 | 
1158 | #### "chat" (username, message, translate, jsonMsg, matches)
1159 | 
1160 | Only emitted when a player chats publicly.
1161 | 
1162 |  * `username` - who said the message (compare with `bot.username` to ignore your own chat)
1163 |  * `message` - stripped of all color and control characters
1164 |  * `translate` - chat message type. Null for most bukkit chat messages
1165 |  * `jsonMsg` - unmodified JSON message from the server
1166 |  * `matches` - array of returned matches from regular expressions. May be null
1167 | 
1168 | #### "whisper" (username, message, translate, jsonMsg, matches)
1169 | 
1170 | Only emitted when a player chats to you privately.
1171 | 
1172 |  * `username` - who said the message
1173 |  * `message` - stripped of all color and control characters
1174 |  * `translate` - chat message type. Null for most bukkit chat messages
1175 |  * `jsonMsg` - unmodified JSON message from the server
1176 |  * `matches` - array of returned matches from regular expressions. May be null
1177 | 
1178 | #### "actionBar" (jsonMsg, verified)
1179 | 
1180 | Emitted for every server message which appears on the Action Bar.
1181 | 
1182 |  * `jsonMsg` - unmodified JSON message from the server
1183 |  * `verified` -> null if non signed, true if signed and correct, false if signed and incorrect
1184 | 
1185 | #### "message" (jsonMsg, position, sender, verified)
1186 | 
1187 | Emitted for every server message, including chats.
1188 | 
1189 |  * `jsonMsg` - [ChatMessage](https://github.com/PrismarineJS/prismarine-chat) object containing the formatted chat message. Might additionally have the following properties:
1190 |    * unsigned - Unsigned ChatMessage object. Only present in 1.19.2+, and only when the server allows insecure chat and the server modified the chat message without the user's signature
1191 | 
1192 |  * `position` - (>= 1.8.1): position of Chat message can be
1193 |    * chat
1194 |    * system
1195 |    * game_info
1196 | 
1197 |  * `sender` - UUID of sender if known (1.16+), else null
1198 | 
1199 |  * `verified` -> null if non signed, true if signed and correct, false if signed and incorrect
1200 | 
1201 | #### "messagestr" (message, messagePosition, jsonMsg, sender, verified)
1202 | 
1203 | Alias for the "message" event but it calls .toString() on the prismarine-message object to get a string for the message before emitting.
1204 | 
1205 |  * `sender` - UUID of sender if known (1.16+), else null
1206 | 
1207 |  * `verified` -> null if non signed, true if signed and correct, false if signed and incorrect
1208 | 
1209 | #### "inject_allowed"
1210 | Fires when the index file has been loaded, you can load mcData and plugins here but it's better to wait for "spawn" event.
1211 | 
1212 | #### "login"
1213 | 
1214 | Fires after you successfully login to the server.
1215 | You probably want to wait for the `spawn` event
1216 | before doing anything though.
1217 | 
1218 | #### "spawn"
1219 | 
1220 | Emitted once after you log in and spawn for the first time
1221 | and then emitted when you respawn after death.
1222 | 
1223 | This is usually the event that you want to listen to
1224 | before doing anything on the server.
1225 | 
1226 | #### "respawn"
1227 | 
1228 | Emitted when you change dimensions and just before you spawn.
1229 | Usually you want to ignore this event and wait until the "spawn"
1230 | event instead.
1231 | 
1232 | #### "game"
1233 | 
1234 | Emitted when the server changes any of the game properties.
1235 | 
1236 | #### "resourcePack" (url, hash)
1237 | 
1238 | Emitted when the server sends a resource pack.
1239 | 
1240 | #### "title" (title, type)
1241 | 
1242 | Emitted when the server sends a title
1243 | 
1244 |  * `title` - title's text
1245 |  * `type` - title's type "subtitle" or "title"
1246 | 
1247 | #### "rain"
1248 | 
1249 | Emitted when it starts or stops raining. If you join a
1250 | server where it is already raining, this event will fire.
1251 | 
1252 | #### "weatherUpdate"
1253 | 
1254 | Emitted when either `bot.thunderState` or `bot.rainState` changes.
1255 | If you join a server where it is already raining, this event will fire.
1256 | 
1257 | #### "time"
1258 | 
1259 | Emitted when the server sends a time update. See `bot.time`.
1260 | 
1261 | #### "kicked" (reason, loggedIn)
1262 | 
1263 | Emitted when the bot is kicked from the server. `reason`
1264 | is a chat message explaining why you were kicked. `loggedIn`
1265 | is `true` if the client was kicked after successfully logging in,
1266 | or `false` if the kick occurred in the login phase.
1267 | 
1268 | #### "end" (reason)
1269 | 
1270 | Emitted when you are no longer connected to the server.
1271 | `reason` is a string explaining why the client was disconnected. (defaults to 'socketClosed')
1272 | 
1273 | #### "error" (err)
1274 | 
1275 | Emitted when an error occurs.
1276 | 
1277 | #### "spawnReset"
1278 | 
1279 | Fires when you cannot spawn in your bed and your spawn point gets reset.
1280 | 
1281 | #### "death"
1282 | 
1283 | Fires when you die.
1284 | 
1285 | #### "health"
1286 | 
1287 | Fires when your hp or food change.
1288 | 
1289 | #### "breath"
1290 | 
1291 | Fires when your oxygen level change.
1292 | 
1293 | #### "entityAttributes" (entity)
1294 | 
1295 | Fires when an attribute of an entity changes.
1296 | 
1297 | #### "entitySwingArm" (entity)
1298 | #### "entityHurt" (entity)
1299 | #### "entityDead" (entity)
1300 | #### "entityTaming" (entity)
1301 | #### "entityTamed" (entity)
1302 | #### "entityShakingOffWater" (entity)
1303 | #### "entityEatingGrass" (entity)
1304 | #### "entityHandSwap" (entity)
1305 | #### "entityWake" (entity)
1306 | #### "entityEat" (entity)
1307 | #### "entityCriticalEffect" (entity)
1308 | #### "entityMagicCriticalEffect" (entity)
1309 | #### "entityCrouch" (entity)
1310 | #### "entityUncrouch" (entity)
1311 | #### "entityEquip" (entity)
1312 | #### "entitySleep" (entity)
1313 | #### "entitySpawn" (entity)
1314 | #### "entityElytraFlew" (entity)
1315 | 
1316 | An entity started elytra flying.
1317 | 
1318 | #### "itemDrop" (entity)
1319 | #### "playerCollect" (collector, collected)
1320 | 
1321 | An entity picked up an item.
1322 | 
1323 |  * `collector` - entity that picked up the item.
1324 |  * `collected` - the entity that was the item on the ground.
1325 | 
1326 | #### "entityGone" (entity)
1327 | #### "entityMoved" (entity)
1328 | #### "entityDetach" (entity, vehicle)
1329 | #### "entityAttach" (entity, vehicle)
1330 | 
1331 | An entity is attached to a vehicle, such as a mine cart
1332 | or boat.
1333 | 
1334 |  * `entity` - the entity hitching a ride
1335 |  * `vehicle` - the entity that is the vehicle
1336 | 
1337 | #### "entityUpdate" (entity)
1338 | #### "entityEffect" (entity, effect)
1339 | #### "entityEffectEnd" (entity, effect)
1340 | #### "playerJoined" (player)
1341 | #### "playerUpdated" (player)
1342 | #### "playerLeft" (player)
1343 | 
1344 | #### "blockUpdate" (oldBlock, newBlock)
1345 | 
1346 | (It is better to use this event from bot.world instead of bot directly) Fires when a block updates. Both `oldBlock` and `newBlock` provided for
1347 | comparison.
1348 | 
1349 | Note that `oldBlock` may be `null`.
1350 | 
1351 | #### "blockUpdate:(x, y, z)" (oldBlock, newBlock)
1352 | 
1353 | (It is better to use this event from bot.world instead of bot directly) Fires for a specific point. Both `oldBlock` and `newBlock` provided for
1354 | comparison.
1355 | 
1356 | Note that `oldBlock` may be `null`.
1357 | 
1358 | #### "blockPlaced" (oldBlock, newBlock)
1359 | 
1360 | Fires when bot places block. Both `oldBlock` and `newBlock` provided for
1361 | comparison.
1362 | 
1363 | Note that `oldBlock` may be `null`.
1364 | 
1365 | #### "chunkColumnLoad" (point)
1366 | #### "chunkColumnUnload" (point)
1367 | 
1368 | Fires when a chunk has updated. `point` is the coordinates to the corner
1369 | of the chunk with the smallest x, y, and z values.
1370 | 
1371 | #### "soundEffectHeard" (soundName, position, volume, pitch)
1372 | 
1373 | Fires when the client hears a named sound effect.
1374 | 
1375 |  * `soundName`: name of the sound effect
1376 |  * `position`: a Vec3 instance where the sound originates
1377 |  * `volume`: floating point volume, 1.0 is 100%
1378 |  * `pitch`: integer pitch, 63 is 100%
1379 | 
1380 | #### "hardcodedSoundEffectHeard" (soundId, soundCategory, position, volume, pitch)
1381 | 
1382 |   Fires when the client hears a hardcoded sound effect.
1383 | 
1384 |    * `soundId`: id of the sound effect
1385 |    * `soundCategory`: category of the sound effect
1386 |    * `position`: a Vec3 instance where the sound originates
1387 |    * `volume`: floating point volume, 1.0 is 100%
1388 |    * `pitch`: integer pitch, 63 is 100%
1389 | 
1390 | #### "noteHeard" (block, instrument, pitch)
1391 | 
1392 | Fires when a note block goes off somewhere.
1393 | 
1394 |  * `block`: a Block instance, the block that emitted the noise
1395 |  * `instrument`:
1396 |    - `id`: integer id
1397 |    - `name`: one of [`harp`, `doubleBass`, `snareDrum`, `sticks`, `bassDrum`].
1398 |  * `pitch`: The pitch of the note (between 0-24 inclusive where 0 is the
1399 |    lowest and 24 is the highest). More information about how the pitch values
1400 |    correspond to notes in real life are available on the
1401 |    [official Minecraft wiki](http://minecraft.wiki/w/Note_Block).
1402 | 
1403 | #### "pistonMove" (block, isPulling, direction)
1404 | 
1405 | #### "chestLidMove" (block, isOpen, block2)
1406 | * `block`: a Block instance, the block whose lid opened. The right block if it's a double chest
1407 | * `isOpen`: number of players that have the chest open. 0 if it's closed
1408 | * `block2`: a Block instance, the other half of the block whose lid opened. null if it's not a double chest
1409 | 
1410 | #### "blockBreakProgressObserved" (block, destroyStage, entity)
1411 | 
1412 | Fires when the client observes a block in the process of being broken.
1413 | 
1414 |  * `block`: a Block instance, the block being broken
1415 |  * `destroyStage`: integer corresponding to the destroy progress (0-9)
1416 |  * `entity`: the entity which is breaking the block.
1417 | 
1418 | #### "blockBreakProgressEnd" (block, entity)
1419 | 
1420 | Fires when the client observes a block stops being broken.
1421 | This occurs whether the process was completed or aborted.
1422 | 
1423 |  * `block`: a Block instance, the block no longer being broken
1424 |  * `entity`: the entity which has stopped breaking the block
1425 | 
1426 | #### "diggingCompleted" (block)
1427 | 
1428 |  * `block` - the block that no longer exists
1429 | 
1430 | #### "diggingAborted" (block)
1431 | 
1432 |  * `block` - the block that still exists
1433 | 
1434 | #### "usedFirework" (fireworkEntityId)
1435 | 
1436 | Fires when the bot uses a firework while elytra flying.
1437 | 
1438 |  * `fireworkEntityId` - the entity id of the firework.
1439 | 
1440 | #### "move"
1441 | 
1442 | Fires when the bot moves. If you want the current position, use
1443 | `bot.entity.position` and for normal moves if you want the previous position, use
1444 | `bot.entity.position.minus(bot.entity.velocity)`.
1445 | 
1446 | #### "forcedMove"
1447 | 
1448 | Fires when the bot is force moved by the server (teleport, spawning, ...). If you want the current position, use
1449 | `bot.entity.position`.
1450 | 
1451 | #### "mount"
1452 | 
1453 | Fires when you mount an entity such as a minecart. To get access
1454 | to the entity, use `bot.vehicle`.
1455 | 
1456 | To mount an entity, use `mount`.
1457 | 
1458 | #### "dismount" (vehicle)
1459 | 
1460 | Fires when you dismount from an entity.
1461 | 
1462 | #### "windowOpen" (window)
1463 | 
1464 | Fires when you begin using a workbench, chest, brewing stand, etc.
1465 | 
1466 | #### "windowClose" (window)
1467 | 
1468 | Fires when you may no longer work with a workbench, chest, etc.
1469 | 
1470 | #### "sleep"
1471 | 
1472 | Fires when you sleep.
1473 | 
1474 | #### "wake"
1475 | 
1476 | Fires when you wake up.
1477 | 
1478 | #### "experience"
1479 | 
1480 | Fires when `bot.experience.*` has updated.
1481 | 
1482 | #### "scoreboardCreated" (scoreboard)
1483 | 
1484 | Fires when a scoreboard is added.
1485 | 
1486 | #### "scoreboardDeleted" (scoreboard)
1487 | 
1488 | Fires when a scoreboard is deleted.
1489 | 
1490 | #### "scoreboardTitleChanged" (scoreboard)
1491 | 
1492 | Fires when a scoreboard's title is updated.
1493 | 
1494 | #### "scoreUpdated" (scoreboard, item)
1495 | 
1496 | Fires when the score of a item in a scoreboard is updated.
1497 | 
1498 | #### "scoreRemoved" (scoreboard, item)
1499 | 
1500 | Fires when the score of a item in a scoreboard is removed.
1501 | 
1502 | #### "scoreboardPosition" (position, scoreboard)
1503 | 
1504 | Fires when the position of a scoreboard is updated.
1505 | 
1506 | #### "teamCreated" (team)
1507 | 
1508 | Fires when a team is added.
1509 | 
1510 | #### "teamRemoved" (team)
1511 | 
1512 | Fires when a team is removed.
1513 | 
1514 | #### "teamUpdated" (team)
1515 | 
1516 | Fires when a team is updated.
1517 | 
1518 | #### "teamMemberAdded" (team)
1519 | 
1520 | Fires when a team member or multiple members are added to a team.
1521 | 
1522 | #### "teamMemberRemoved" (team)
1523 | 
1524 | Fires when a team member or multiple members are removed from a team.
1525 | 
1526 | #### "bossBarCreated" (bossBar)
1527 | 
1528 | Fires when new boss bar is created.
1529 | 
1530 | #### "bossBarDeleted" (bossBar)
1531 | 
1532 | Fires when new boss bar is deleted.
1533 | 
1534 | #### "bossBarUpdated" (bossBar)
1535 | 
1536 | Fires when new boss bar is updated.
1537 | 
1538 | #### "heldItemChanged" (heldItem)
1539 | 
1540 | Fires when the held item is changed.
1541 | 
1542 | #### "physicsTick" ()
1543 | 
1544 | Fires every tick if bot.physicsEnabled is set to true.
1545 | 
1546 | #### "chat:name" (matches)
1547 | 
1548 | Fires when the all of a chat pattern's regexs have matches
1549 | 
1550 | #### "particle"
1551 | 
1552 | Fires when a particle is created
1553 | 
1554 | ### Functions
1555 | 
1556 | #### bot.blockAt(point, extraInfos=true)
1557 | 
1558 | Returns the block at `point` or `null` if that point is not loaded. If `extraInfos` set to true, also returns information about signs, paintings and block entities (slower).
1559 | See `Block`.
1560 | 
1561 | #### bot.waitForChunksToLoad()
1562 | 
1563 | This function returns a `Promise`, with `void` as its argument when many chunks have loaded.
1564 | 
1565 | #### bot.blockInSight(maxSteps, vectorLength)
1566 | 
1567 | Deprecated, use `blockAtCursor` instead.
1568 | 
1569 | Returns the block at which bot is looking at or `null`
1570 |  * `maxSteps` - Number of steps to raytrace, defaults to 256.
1571 |  * `vectorLength` - Length of raytracing vector, defaults to `5/16`.
1572 | 
1573 | #### bot.blockAtCursor(maxDistance=256)
1574 | 
1575 | Returns the block at which bot is looking at or `null`
1576 |  * `maxDistance` - The maximum distance the block can be from the eye, defaults to 256.
1577 | 
1578 | #### bot.entityAtCursor(maxDistance=3.5)
1579 | 
1580 | Returns the entity at which bot is looking at or `null`
1581 |  * `maxDistance` - The maximum distance the entity can be from the eye, defaults to 3.5.
1582 | 
1583 | #### bot.blockAtEntityCursor(entity=bot.entity, maxDistance=256)
1584 | 
1585 | Returns the block at which specific entity is looking at or `null`
1586 |  * `entity` - Entity data as `Object`
1587 |  * `maxDistance` - The maximum distance the block can be from the eye, defaults to 256.
1588 | 
1589 | #### bot.canSeeBlock(block)
1590 | 
1591 | Returns true or false depending on whether the bot can see the specified `block`.
1592 | 
1593 | #### bot.findBlocks(options)
1594 | 
1595 | Finds the closest blocks from the given point.
1596 |  * `options` - Options for the search:
1597 |    - `point` - The start position of the search (center). Default is the bot position.
1598 |    - `matching` - A function that returns true if the given block is a match. Also supports this value being a block id or array of block ids.
1599 |    - `useExtraInfo` - To preserve backward compatibility can result in two behavior depending on the type
1600 |       - **boolean** - Provide your `matching` function more data - noticeably slower approach
1601 |       - **function** - Creates two stage matching, if block passes `matching` function it is passed further to `useExtraInfo` with additional info
1602 |    - `maxDistance` - The furthest distance for the search, defaults to 16.
1603 |    - `count` - Number of blocks to find before returning the search. Default to 1. Can return less if not enough blocks are found exploring the whole area.
1604 | 
1605 | Returns an array (possibly empty) with the found block coordinates (not the blocks). The array is sorted (closest first)
1606 | 
1607 | #### bot.findBlock(options)
1608 | 
1609 | Alias for `bot.blockAt(bot.findBlocks(options)[0])`. Return a single block or `null`.
1610 | 
1611 | #### bot.canDigBlock(block)
1612 | 
1613 | Returns whether `block` is diggable and within range.
1614 | 
1615 | #### bot.recipesFor(itemType, metadata, minResultCount, craftingTable)
1616 | 
1617 | Returns a list of `Recipe` instances that you could use to craft `itemType`
1618 | with `metadata`.
1619 | 
1620 |  * `itemType` - numerical item id of the thing you want to craft
1621 |  * `metadata` - the numerical metadata value of the item you want to craft
1622 |    `null` matches any metadata.
1623 |  * `minResultCount` - based on your current inventory, any recipe from the
1624 |    returned list will be able to produce this many items. `null` is an
1625 |    alias for `1`.
1626 |  * `craftingTable` - a `Block` instance. If `null`, only recipes that can
1627 |    be performed in your inventory window will be included in the list.
1628 | 
1629 | #### bot.recipesAll(itemType, metadata, craftingTable)
1630 | 
1631 | The same as bot.recipesFor except that it does not check whether the bot has enough materials for the recipe.
1632 | 
1633 | #### bot.nearestEntity(match = (entity) => { return true })
1634 | 
1635 | Return the nearest entity to the bot, matching the function (default to all entities). Return null if no entity is found.
1636 | 
1637 | Example:
1638 | ```js
1639 | const cow = bot.nearestEntity(entity => entity.name.toLowerCase() === 'cow') // we use .toLowercase() because in 1.8 cow was capitalized, for newer versions that can be omitted
1640 | ```
1641 | 
1642 | ### Methods
1643 | 
1644 | #### bot.end(reason)
1645 | 
1646 | End the connection with the server.
1647 | * `reason` - Optional string that states the reason of the end.
1648 | 
1649 | #### bot.quit(reason)
1650 | 
1651 | Gracefully disconnect from the server with the given reason (defaults to 'disconnect.quitting').
1652 | 
1653 | #### bot.tabComplete(str, [assumeCommand], [sendBlockInSight], [timeout])
1654 | 
1655 | This function returns a `Promise`, with `matches` as its argument upon completion.
1656 | 
1657 | Requests chat completion from the server.
1658 |  * `str` - String to complete.
1659 |  * `assumeCommand` - Field sent to server, defaults to false.
1660 |  * `sendBlockInSight` - Field sent to server, defaults to true. Set this option to false if you want more performance.
1661 |  * `timeout` - Timeout in milliseconds, after which the function will return an empty array, defaults to 5000.
1662 | 
1663 | #### bot.chat(message)
1664 | 
1665 | Sends a publicly broadcast chat message. Breaks up big messages into multiple chat messages as necessary.
1666 | 
1667 | #### bot.whisper(username, message)
1668 | 
1669 | Shortcut for "/tell <username>". All split messages will be whispered to username.
1670 | 
1671 | #### bot.chatAddPattern(pattern, chatType, description)
1672 | 
1673 | Deprecated, use `addChatPattern` instead.
1674 | 
1675 | Adds a regex pattern to the bot's chat matching. Useful for bukkit servers where the chat format changes a lot.
1676 |  * `pattern` - regular expression to match chat
1677 |  * `chatType` - the event the bot emits when the pattern matches. Eg: "chat" or "whisper"
1678 |  * 'description ' - Optional, describes what the pattern is for
1679 | 
1680 | #### bot.addChatPattern(name, pattern, chatPatternOptions)
1681 | 
1682 | ** this is an alias of `bot.addChatPatternSet(name, [pattern], chatPatternOptions)`
1683 | 
1684 | make an event that is called every time the pattern is matched to a message,
1685 | the event will be called `"chat:name"`, with name being the name passed
1686 | * `name` - the name used to listen for the event
1687 | * `pattern` - regular expression to match to messages received
1688 | * `chatPatternOptions` - object
1689 |   * `repeat` - defaults to true, whether to listen for this event after the first match
1690 |   * `parse` - instead of returning the actual message that was matched, return the capture groups from the regex
1691 |   * `deprecated` - (**unstable**) used by bot.chatAddPattern to keep compatibility, likely to be removed
1692 | 
1693 | returns a number which can be used with bot.removeChatPattern() to only delete this pattern
1694 | 
1695 | - :eyes: cf. [examples/chat_parsing](https://github.com/PrismarineJS/mineflayer/blob/master/examples/chat_parsing.js#L17-L36)
1696 | 
1697 | #### bot.addChatPatternSet(name, patterns, chatPatternOptions)
1698 | 
1699 | make an event that is called every time all patterns have been matched to messages,
1700 | the event will be called `"chat:name"`, with name being the name passed
1701 | * `name` - the name used to listen for the event
1702 | * `patterns` - array of regular expression to match to messages received
1703 | * `chatPatternOptions` - object
1704 |   * `repeat` - defaults to true, whether to listen for this event after the first match
1705 |   * `parse` - instead of returning the actual message that was matched, return the capture groups from the regex
1706 | 
1707 | returns a number which can be used with bot.removeChatPattern() to only delete this patternset
1708 | 
1709 | - :eyes: cf. [examples/chat_parsing](https://github.com/PrismarineJS/mineflayer/blob/master/examples/chat_parsing.js#L17-L36)
1710 | 
1711 | #### bot.removeChatPattern(name)
1712 | 
1713 | removes a chat pattern(s)
1714 | * `name` : string or number
1715 | 
1716 | if name is a string, all patterns that have that name will be removed
1717 | else if name is a number, only that exact pattern will be removed
1718 | 
1719 | #### bot.awaitMessage(...args)
1720 | 
1721 | promise that is resolved when one of the messages passed as an arg is resolved
1722 | 
1723 | Example:
1724 | 
1725 | ```js
1726 | async function wait () {
1727 |   await bot.awaitMessage('<flatbot> hello world') // resolves on "hello world" in chat by flatbot
1728 |   await bot.awaitMessage(['<flatbot> hello', '<flatbot> world']) // resolves on "hello" or "world" in chat by flatbot
1729 |   await bot.awaitMessage(['<flatbot> hello', '<flatbot> world'], ['<flatbot> im', '<flatbot> batman']) // resolves on "hello" or "world" or "im" or "batman" in chat by flatbot
1730 |   await bot.awaitMessage('<flatbot> hello', '<flatbot> world') // resolves on "hello" or "world" in chat by flatbot
1731 |   await bot.awaitMessage(/<flatbot> (.+)/) // resolves on first message matching the regex
1732 | }
1733 | ```
1734 | 
1735 | #### bot.setSettings(options)
1736 | 
1737 | See the `bot.settings` property.
1738 | 
1739 | #### bot.loadPlugin(plugin)
1740 | 
1741 | Injects a Plugin. Does nothing if the plugin is already loaded.
1742 | 
1743 |  * `plugin` - function
1744 | 
1745 | ```js
1746 | function somePlugin (bot, options) {
1747 |   function someFunction () {
1748 |     bot.chat('Yay!')
1749 |   }
1750 | 
1751 |   bot.myPlugin = {} // Good practice to namespace plugin API
1752 |   bot.myPlugin.someFunction = someFunction
1753 | }
1754 | 
1755 | const bot = mineflayer.createBot({})
1756 | bot.loadPlugin(somePlugin)
1757 | bot.once('login', function () {
1758 |   bot.myPlugin.someFunction() // Yay!
1759 | })
1760 | ```
1761 | 
1762 | #### bot.loadPlugins(plugins)
1763 | 
1764 | Injects plugins see `bot.loadPlugin`.
1765 |  * `plugins` - array of functions
1766 | 
1767 | #### bot.hasPlugin(plugin)
1768 | 
1769 | Checks if the given plugin is loaded (or scheduled to be loaded) on this bot.
1770 | 
1771 | #### bot.sleep(bedBlock)
1772 | 
1773 | This function returns a `Promise`, with `void` as its argument upon completion.
1774 | 
1775 | Sleep in a bed. `bedBlock` should be a `Block` instance which is a bed.
1776 | 
1777 | #### bot.isABed(bedBlock)
1778 | 
1779 | Return true if `bedBlock` is a bed
1780 | 
1781 | #### bot.wake()
1782 | 
1783 | This function returns a `Promise`, with `void` as its argument upon completion.
1784 | 
1785 | Get out of bed.
1786 | 
1787 | #### bot.setControlState(control, state)
1788 | 
1789 | This is the main method controlling the bot movements. It works similarly to pressing keys in minecraft.
1790 | For example forward with state true will make the bot move forward. Forward with state false will make the bot stop moving forward.
1791 | You may use bot.lookAt in conjunction with this to control movement. The jumper.js example shows how to use this.
1792 | 
1793 |  * `control` - one of ['forward', 'back', 'left', 'right', 'jump', 'sprint', 'sneak']
1794 |  * `state` - `true` or `false`
1795 | 
1796 | #### bot.getControlState(control)
1797 | 
1798 | Returns true if a control state is toggled.
1799 | 
1800 | * `control` - one of ['forward', 'back', 'left', 'right', 'jump', 'sprint', 'sneak']
1801 | 
1802 | #### bot.clearControlStates()
1803 | 
1804 | Sets all controls to off.
1805 | 
1806 | #### bot.getExplosionDamages(entity, position, radius, [rawDamages])
1807 | 
1808 | Returns how much damage will be done to the entity in a radius around the position of the explosion.
1809 | It will return `null` if the entity has no armor and rawDamages is not set to true, since the function can't calculate the damage with armor if there is no armor.
1810 | 
1811 | * `entity` - Entity instance
1812 | * `position` - [Vec3](https://github.com/andrewrk/node-vec3) instance
1813 | * `radius` - the explosion radius as a number
1814 | * `rawDamages` - optional, if true it ignores armor in the calculation
1815 | 
1816 | #### bot.lookAt(point, [force])
1817 | 
1818 | This function returns a `Promise`, with `void` as its argument when you are looking at `point`.
1819 | 
1820 |  * `point` [Vec3](https://github.com/andrewrk/node-vec3) instance - tilts your head so that it is directly facing this point.
1821 |  * `force` - See `force` in `bot.look`
1822 | 
1823 | #### bot.look(yaw, pitch, [force])
1824 | 
1825 | This function returns a `Promise`, with `void` as its argument called when you are looking at `yaw` and `pitch`.
1826 | 
1827 | Set the direction your head is facing.
1828 | 
1829 |  * `yaw` - The number of radians to rotate around the vertical axis, starting
1830 |    from due east. Counter clockwise.
1831 |  * `pitch` - Number of radians to point up or down. 0 means straight forward.
1832 |    pi / 2 means straight up. -pi / 2 means straight down.
1833 |  * `force` - If present and true, skips the smooth server-side transition.
1834 |    Specify this to true if you need the server to know exactly where you
1835 |    are looking, such as for dropping items or shooting arrows. This is not
1836 |    needed for client-side calculation such as walking direction.
1837 | 
1838 | #### bot.updateSign(block, text, back = false)
1839 | 
1840 | Changes the text on the sign. On Minecraft 1.20 and newer, a truthy `back` will try setting the text on the back of a sign (only visible if not attached to a wall).
1841 | 
1842 | #### bot.equip(item, destination)
1843 | 
1844 | This function returns a `Promise`, with `void` as its argument when you have successfully equipped the item or when you learn that you have failed to equip the item.
1845 | 
1846 | Equips an item from your inventory. If the argument `item` is of Instance `Item` equip will equip this specific item from its window slot. If the argument `item` is of type `number` equip will equip the first item found with that id searched by rising slot id (Hotbar is searched last. Armor, crafting, crafting result and off-hand slots are excluded).
1847 | 
1848 |  * `item` - `Item` instance or `number` for item id. See `window.items()`.
1849 |  * `destination`
1850 |    - `"hand"` - `null` aliases to this
1851 |    - `"head"`
1852 |    - `"torso"`
1853 |    - `"legs"`
1854 |    - `"feet"`
1855 |    - `"off-hand"` - when available
1856 | 
1857 | #### bot.unequip(destination)
1858 | 
1859 | This function returns a `Promise`, with `void` as its argument upon completion.
1860 | 
1861 | Remove an article of equipment.
1862 | 
1863 | #### bot.tossStack(item)
1864 | 
1865 | This function returns a `Promise`, with `void` as its argument when tossing is done.
1866 | 
1867 |  * `item` - the stack of items you wish to toss
1868 |    truthy, you were not able to complete the toss.
1869 | 
1870 | #### bot.toss(itemType, metadata, count)
1871 | 
1872 | This function returns a `Promise`, with `void` as its argument once tossing is complete.
1873 | 
1874 |  * `itemType` - numerical id of the item you wish to toss
1875 |  * `metadata` - metadata of the item you wish to toss. Use `null`
1876 |    to match any metadata
1877 |  * `count` - how many you want to toss. `null` is an alias for `1`.
1878 | 
1879 | #### bot.elytraFly()
1880 | 
1881 | This function returns a `Promise`, with `void` as its argument once activating
1882 | elytra flight is complete. It will throw an Error if it fails.
1883 | 
1884 | #### bot.dig(block, [forceLook = true], [digFace])
1885 | 
1886 | This function returns a `Promise`, with `void` as its argument when the block is broken or you are interrupted.
1887 | 
1888 | Begin digging into `block` with the currently equipped item.
1889 | See also "diggingCompleted" and "diggingAborted" events.
1890 | 
1891 | Note that once you begin digging into a block, you may not
1892 | dig any other blocks until the block has been broken, or you call
1893 | `bot.stopDigging()`.
1894 | 
1895 |  * `block` - the block to start digging into
1896 |  * `forceLook` - (optional) if true, look at the block and start mining instantly. If false, the bot will slowly turn to the block to mine. Additionally, this can be assigned to 'ignore' to prevent the bot from moving its head at all. Also, this can be assigned to 'raycast' to raycast from the bots head to place where the bot is looking.
1897 |  * `digFace` - (optional) Default is 'auto' looks at the center of the block and mines the top face. Can also be a vec3 vector
1898 |  of the face the bot should be looking at when digging the block. For example: ```vec3(0, 1, 0)``` when mining the top. Can also be 'raycast' raycast checks if there is a face visible by the bot and mines that face. Useful for servers with anti cheat.
1899 | 
1900 | If you call bot.dig twice before the first dig is finished, you will get a fatal 'diggingAborted' error.
1901 | 
1902 | #### bot.stopDigging()
1903 | 
1904 | #### bot.digTime(block)
1905 | 
1906 | Tells you how long it will take to dig the block, in milliseconds.
1907 | 
1908 | #### bot.acceptResourcePack()
1909 | 
1910 | Accepts resource pack.
1911 | 
1912 | #### bot.denyResourcePack()
1913 | 
1914 | Denies resource pack.
1915 | 
1916 | #### bot.placeBlock(referenceBlock, faceVector)
1917 | 
1918 | This function returns a `Promise`, with `void` as its argument when the server confirms that the block has indeed been placed.
1919 | 
1920 |  * `referenceBlock` - the block you want to place a new block next to
1921 |  * `faceVector` - one of the six cardinal directions, such as `new Vec3(0, 1, 0)` for the top face,
1922 |    indicating which face of the `referenceBlock` to place the block against.
1923 | 
1924 | The new block will be placed at `referenceBlock.position.plus(faceVector)`.
1925 | 
1926 | #### bot.placeEntity(referenceBlock, faceVector)
1927 | 
1928 | This function returns a `Promise`, with `Entity` as its argument upon completion.
1929 | 
1930 |  * `referenceBlock` - the block you want to place the entity next to
1931 |  * `faceVector` - one of the six cardinal directions, such as `new Vec3(0, 1, 0)` for the top face,
1932 |    indicating which face of the `referenceBlock` to place the block against.
1933 | 
1934 | The new block will be placed at `referenceBlock.position.plus(faceVector)`.
1935 | 
1936 | #### bot.activateBlock(block, direction?: Vec3, cursorPos?: Vec3)
1937 | 
1938 | This function returns a `Promise`, with `void` as its argument upon completion.
1939 | 
1940 | Punch a note block, open a door, etc.
1941 | 
1942 |  * `block` - the block to activate
1943 |  * `direction` Optional defaults to `new Vec3(0, 1, 0)` (up). A vector off the direction the container block should be interacted with. Does nothing when a container entity is targeted.
1944 |  * `cursorPos` Optional defaults to `new Vec3(0.5, 0.5, 0.5)` (block center). The curos position when opening the block instance. This is send with the activate block packet. Does nothing when a container entity is targeted.
1945 | 
1946 | #### bot.activateEntity(entity)
1947 | 
1948 | This function returns a `Promise`, with `void` as its argument upon completion.
1949 | 
1950 | Activate an entity, useful for villager for example.
1951 | 
1952 |  * `entity` - the entity to activate
1953 | 
1954 | #### bot.activateEntityAt(entity, position)
1955 | 
1956 | This function returns a `Promise`, with `void` as its argument upon completion.
1957 | 
1958 | Activate an entity at the given position, useful for armor stands.
1959 | 
1960 |  * `entity` - the entity to activate
1961 |  * `position` - the world position to click at
1962 | 
1963 | #### bot.consume()
1964 | 
1965 | This function returns a `Promise`, with `void` as its argument when consume ends.
1966 | 
1967 | Eat / drink currently held item
1968 | 
1969 | 
1970 | #### bot.fish()
1971 | 
1972 | This function returns a `Promise`, with `void` as its argument when fishing ends.
1973 | 
1974 | Use fishing rod
1975 | 
1976 | 
1977 | #### bot.activateItem(offHand=false)
1978 | 
1979 | Activates the currently held item. This is how you eat, shoot bows, throw an
1980 | egg, activate firework rockets, etc.
1981 | 
1982 | Optional parameter is `false` for main hand and `true` for off hand.
1983 | 
1984 | #### bot.deactivateItem()
1985 | 
1986 | Deactivates the currently held item. This is how you release an arrow, stop eating, etc.
1987 | 
1988 | #### bot.useOn(targetEntity)
1989 | 
1990 | Use the currently held item on an `Entity` instance. This is how you apply a saddle and
1991 | use shears.
1992 | 
1993 | #### bot.attack(entity, swing = true)
1994 | 
1995 | Attack a player or a mob.
1996 | 
1997 |  * `entity` is a type of entity. To get a specific entity use [bot.nearestEntity()](#botnearestentitymatch--entity---return-true-) or [bot.entities](#botentities).
1998 |  * `swing` Default to `true`. If false the bot does not swing its arm when attacking.
1999 | 
2000 | #### bot.swingArm([hand], showHand)
2001 | 
2002 | Play an arm swing animation.
2003 | 
2004 |  * `hand` can take `left` or `right` which is the arm that is animated. Default: `right`
2005 |  * `showHand` is a boolean whether to add the hand to the packet, Default: `true`
2006 | 
2007 | #### bot.mount(entity)
2008 | 
2009 | Mount a vehicle. To get back out, use `bot.dismount`.
2010 | 
2011 | #### bot.dismount()
2012 | 
2013 | Dismounts from the vehicle you are in.
2014 | 
2015 | #### bot.moveVehicle(left,forward)
2016 | 
2017 | Moves the vehicle :
2018 | 
2019 |  * left can take -1 or 1 : -1 means right, 1 means left
2020 |  * forward can take -1 or 1 : -1 means backward, 1 means forward
2021 | 
2022 | All the direction are relative to where the bot is looking at
2023 | 
2024 | #### bot.setQuickBarSlot(slot)
2025 | 
2026 |  * `slot` - 0-8 the quick bar slot to select.
2027 | 
2028 | #### bot.craft(recipe, count, craftingTable)
2029 | 
2030 | This function returns a `Promise`, with `void` as its argument when the crafting is complete and your inventory is updated.
2031 | 
2032 |  * `recipe` - A `Recipe` instance. See `bot.recipesFor`.
2033 |  * `count` - How many times you wish to perform the operation.
2034 |    If you want to craft planks into `8` sticks, you would set
2035 |    `count` to `2`. `null` is an alias for `1`.
2036 |  * `craftingTable` - A `Block` instance, the crafting table you wish to
2037 |    use. If the recipe does not require a crafting table, you may use
2038 |    `null` for this argument.
2039 | 
2040 | #### bot.writeBook(slot, pages)
2041 | 
2042 | This function returns a `Promise`, with `void` as its argument when the writing was successfully or an error occurred.
2043 | 
2044 |  * `slot` is in inventory window coordinates (where 36 is the first quickbar slot, etc.).
2045 |  * `pages` is an array of strings represents the pages.
2046 | 
2047 | #### bot.openContainer(containerBlock or containerEntity, direction?, cursorPos?)
2048 | Opens a block container or entity.
2049 | 
2050 |  * `containerBlock` or `containerEntity` The block instance to open or the entity to open.
2051 |  * `direction` Optional defaults to `new Vec3(0, 1, 0)` (up). A vector off the direction the container block should be interacted with. Does nothing when a container entity is targeted.
2052 |  * `cursorPos` Optional defaults to `new Vec3(0.5, 0.5, 0.5)` (block center). The curos position when opening the block instance. This is send with the activate block packet. Does nothing when a container entity is targeted.
2053 | 
2054 | Returns a promise on a `Container` instance which represents the container you are opening.
2055 | 
2056 | #### bot.openChest(chestBlock or minecartchestEntity, direction?, cursorPos?)
2057 | 
2058 | Deprecated. Same as `openContainer`
2059 | 
2060 | #### bot.openFurnace(furnaceBlock)
2061 | 
2062 | Returns a promise on a `Furnace` instance which represents the furnace you are opening.
2063 | 
2064 | #### bot.openDispenser(dispenserBlock)
2065 | 
2066 | Deprecated. Same as `openContainer`
2067 | 
2068 | #### bot.openEnchantmentTable(enchantmentTableBlock)
2069 | 
2070 | Returns a promise on an `EnchantmentTable` instance which represents the enchantment table
2071 | you are opening.
2072 | 
2073 | #### bot.openAnvil(anvilBlock)
2074 | 
2075 | Returns a promise on an `anvil` instance which represents the anvil you are opening.
2076 | 
2077 | #### bot.openVillager(villagerEntity)
2078 | 
2079 | Returns a promise on a `Villager` instance which represents the trading window you are opening.
2080 | You can listen to the `ready` event on this `Villager` to know when it's ready
2081 | 
2082 | #### bot.trade(villagerInstance, tradeIndex, [times])
2083 | 
2084 | This function returns a `Promise`, with `void` as its argument upon completion.
2085 | 
2086 | Uses the open `villagerInstance` to trade.
2087 | 
2088 | #### bot.setCommandBlock(pos, command, [options])
2089 | 
2090 | Set a command block's properties at `pos`.
2091 | Example `options` argument:
2092 | ```js
2093 | {
2094 |   mode: 2,
2095 |   trackOutput: true,
2096 |   conditional: false,
2097 |   alwaysActive: true
2098 | }
2099 | ```
2100 | options.mode can have 3 values: 0 (SEQUENCE), 1 (AUTO), 2 (REDSTONE)
2101 | All options attributes are false by default, except mode which is 2 (as to replicate the default command block in Minecraft).
2102 | 
2103 | #### bot.supportFeature(name)
2104 | 
2105 | This can be used to check is a specific feature is available in the current Minecraft version. This is usually only required for handling version-specific functionality.
2106 | 
2107 | The list of available features can be found inside the [./lib/features.json](https://github.com/PrismarineJS/mineflayer/blob/master/lib/features.json) file.
2108 | 
2109 | #### bot.waitForTicks(ticks)
2110 | 
2111 | This is a promise-based function that waits for a given number of in-game ticks to pass before continuing. This is useful for quick timers that need to function with specific timing, regardless of the given physics tick speed of the bot. This is similar to the standard Javascript setTimeout function, but runs on the physics timer of the bot specifically.
2112 | 
2113 | #### bot.respawn()
2114 | 
2115 | When `respawn` option is disabled, you can call this method manually to respawn.
2116 | 
2117 | ### Lower level inventory methods
2118 | 
2119 | These are lower level methods for the inventory, they can be useful sometimes but prefer the inventory methods presented above if you can.
2120 | 
2121 | #### bot.clickWindow(slot, mouseButton, mode)
2122 | 
2123 | This function returns a `Promise`, with `void` as its argument upon completion.
2124 | 
2125 | The only valid mode option at the moment is 0. Shift clicking or mouse dragging is not implemented.
2126 | 
2127 | Click on the current window. See details at https://wiki.vg/Protocol#Click_Container
2128 | 
2129 | Prefer using bot.simpleClick.*
2130 | 
2131 | #### bot.putSelectedItemRange(start, end, window, slot)
2132 | 
2133 | This function returns a `Promise`, with `void` as its argument upon completion.
2134 | 
2135 | Put the item at `slot` in the specified range.
2136 | 
2137 | #### bot.putAway(slot)
2138 | 
2139 | This function returns a `Promise`, with `void` as its argument upon completion.
2140 | 
2141 | Put the item at `slot` in the inventory.
2142 | 
2143 | #### bot.closeWindow(window)
2144 | 
2145 | Close the `window`.
2146 | 
2147 | #### bot.transfer(options)
2148 | 
2149 | This function returns a `Promise`, with `void` as its argument upon completion.
2150 | 
2151 | Transfer some kind of item from one range to an other. `options` is an object containing :
2152 | 
2153 |  * `window` : Optional. the window where the item will be moved
2154 |  * `itemType` : the type of the moved items
2155 |  * `metadata` : Optional. the metadata of the moved items
2156 |  * `sourceStart` and `sourceEnd` : the source range. `sourceEnd` is optional and will default to `sourceStart` + 1
2157 |  * `destStart` and `destEnd` : the dest Range. `destEnd` is optional and will default to `destStart` + 1
2158 |  * `count` : the amount of items to transfer. Default: `1`
2159 |  * `nbt` : nbt data of the item to transfer. Default: `nullish` (ignores nbt)
2160 | 
2161 | #### bot.openBlock(block, direction?: Vec3, cursorPos?: Vec3)
2162 | 
2163 | Open a block, for example a chest, returns a promise on the opening `Window`.
2164 | 
2165 |  * `block` is the block the bot will open.
2166 |  * `direction` Optional defaults to `new Vec3(0, 1, 0)` (up). A vector off the direction the container block should be interacted with. Does nothing when a container entity is targeted.
2167 |  * `cursorPos` Optional defaults to `new Vec3(0.5, 0.5, 0.5)` (block center). The curos position when opening the block instance. This is send with the activate block packet. Does nothing when a container entity is targeted.
2168 | 
2169 | #### bot.openEntity(entity)
2170 | 
2171 | Open an entity with an inventory, for example a villager, returns a promise on the opening `Window`.
2172 | 
2173 |  * `entity` is the entity the bot will open
2174 | 
2175 | #### bot.moveSlotItem(sourceSlot, destSlot)
2176 | 
2177 | This function returns a `Promise`, with `void` as its argument upon completion.
2178 | 
2179 | Move an item from `sourceSlot` to `destSlot` in the current window.
2180 | 
2181 | #### bot.updateHeldItem()
2182 | 
2183 | Update `bot.heldItem`.
2184 | 
2185 | #### bot.getEquipmentDestSlot(destination)
2186 | 
2187 | Gets the inventory equipment slot id for the given equipment destination name.
2188 | 
2189 | Available destinations are:
2190 | * head
2191 | * torso
2192 | * legs
2193 | * feet
2194 | * hand
2195 | * off-hand
2196 | 
2197 | ### bot.creative
2198 | 
2199 | This collection of apis is useful in creative mode.
2200 | Detecting and changing gamemodes is not implemented here,
2201 | but it is assumed and often required that the bot be in creative mode for these features to work.
2202 | 
2203 | #### bot.creative.setInventorySlot(slot, item)
2204 | 
2205 | This function returns a `Promise`, with `void` as its argument when gets fired when the server sets the slot.
2206 | 
2207 | Gives the bot the specified item in the specified inventory slot.
2208 | 
2209 |  * `slot` is in inventory window coordinates (where 36 is the first quickbar slot, etc.).
2210 |  * `item` is a [prismarine-item](https://github.com/PrismarineJS/prismarine-item) instance specified with arbitrary metadata, nbtdata, etc.
2211 |     If `item` is `null`, the item at the specified slot is deleted.
2212 | 
2213 | If this method changes anything, you can be notified via `bot.inventory.on("updateSlot")`.
2214 | 
2215 | #### bot.creative.clearSlot(slot)
2216 | 
2217 | This function returns a `Promise`, with `void` as its argument when gets fired when the server clears the slot.
2218 | 
2219 | Makes the sets the item in the slot given to null.
2220 | 
2221 |  * `slot` is in inventory window coordinates (where 36 is the first quickbar slot, etc.).
2222 | 
2223 | #### bot.creative.clearInventory()
2224 | 
2225 | This function returns a `Promise`, with `void` as its argument when gets fired when the server clears the slot.
2226 | 
2227 | #### bot.creative.flyTo(destination)
2228 | 
2229 | This function returns a `Promise`, with `void` as its argument when the bot arrives at the destination.
2230 | 
2231 | Calls `startFlying()` and moves at a constant speed through 3d space in a straight line to the destination.
2232 | `destination` is a `Vec3`, and often the `x` and `z` coordinates will end with `.5`.
2233 | This operation will not work if there is an obstacle in the way,
2234 | so it is advised to fly very short distances at a time.
2235 | 
2236 | This method does not attempt any path finding.
2237 | It is expected that a path finding implementation will use this method to move < 2 blocks at a time.
2238 | 
2239 | To resume normal physics, call `stopFlying()`.
2240 | 
2241 | #### bot.creative.startFlying()
2242 | 
2243 | Sets `bot.physics.gravity` to `0`.
2244 | To resume normal physics, call `stopFlying()`.
2245 | 
2246 | This method is useful if you want to hover while digging the ground below you.
2247 | It is not necessary to call this function before calling `flyTo()`.
2248 | 
2249 | Note that while flying, `bot.entity.velocity` will not be accurate.
2250 | 
2251 | #### bot.creative.stopFlying()
2252 | 
2253 | Restores `bot.physics.gravity` to its original value.
2254 | 


--------------------------------------------------------------------------------
/docs/br/CONTRIBUTING_BR.md:
--------------------------------------------------------------------------------
 1 | # Contribuir
 2 | 
 3 | O Mineflayer foi originalmente criado principalmente por [andrewrk](http://github.com/andrewrk), mas tem sido muito aprimorado e corrigido por muitos [contribuidores](https://github.com/andrewrk/mineflayer/graphs/contributors). Portanto, é importante saber a melhor maneira de contribuir para o Mineflayer.
 4 | 
 5 | ## Organização de Problemas
 6 | 
 7 | Temos 3 etiquetas para 3 fases de organização de problemas:
 8 | 
 9 | * Estágio 1: (Fase 1) criado por alguém novo no projeto, não sabemos se merece uma implementação / solução
10 | * Estágio 2: (Fase 2) ideia promissora, mas é necessário pensar mais sobre o assunto antes de implementá-lo
11 | * Estágio 3: (Fase 3) a ideia é muito precisa, só precisa ser programada
12 | 
13 | Links como https://github.com/PrismarineJS/mineflayer/issues?q=is%3Aopen+is%3Aissue+-label%3AStage1 podem ser usados como filtro para a fase 1 se você estiver procurando coisas prontas para serem contribuídas.
14 | 
15 | ## Criando Testes
16 | O Mineflayer possui dois tipos de testes:
17 | 
18 |  * [Testes internos](test/internalTest.js): testes feitos com um servidor simples criado com o node-minecraft-protocol
19 |  * [Testes externos](test/externalTests/): testes feitos com um servidor Vanilla
20 |  
21 | O objetivo desses testes é determinar automaticamente o que funciona e o que não funciona no Mineflayer, tornando mais fácil a correção de problemas.
22 | 
23 | ### Criando um Teste Externo
24 | 
25 | Para criar um teste externo, basta criar um arquivo em [test/externalTests](test/externalTests).
26 | 
27 | Um exemplo: [test/externalTests/digAndBuild.js](https://github.com/PrismarineJS/mineflayer/blob/master/test/externalTests/digAndBuild.js)
28 | 
29 | Esse arquivo deve exportar uma função que retorna uma função ou um array de funções que recebem o objeto bot e um callback como parâmetros, e deve conter verificações para determinar se a função testada falhou.
30 | 
31 | ## Criando um Plugin de Terceiros
32 | O Mineflayer suporta plugins; qualquer pessoa pode criar um plugin que adiciona uma API de nível mais alto acima do Mineflayer.
33 | 
34 | Vários plugins de terceiros foram [criados](https://github.com/andrewrk/mineflayer#third-party-plugins).
35 | 
36 | Para criar um novo plugin, você deve:
37 | 
38 | 1. Criar um novo repositório.
39 | 2. No seu arquivo index.js, exportar uma função para inicializar o plugin com o argumento Mineflayer ([exemplo](https://github.com/andrewrk/mineflayer-navigate/blob/e24cb6a868ce64ae43bea2d035832c15ed01d301/index.js#L18)).
40 | 3. Essa função deve retornar uma função para introduzir o plugin com o objeto bot ([exemplo](https://github.com/andrewrk/mineflayer-navigate/blob/e24cb6a868ce64ae43bea2d035832c15ed01d301/index.js#L23)).
41 | 4. A partir dessa função, você pode adicionar mais funcionalidades ao bot ([exemplo](https://github.com/andrewrk/mineflayer-navigate/blob/e24cb6a868ce64ae43bea2d035832c15ed01d301/index.js#L32)).
42 | 
43 | Como o objeto Mineflayer é passado como argumento, esse plugin de terceiros não deve depender do Mineflayer (não deve haver referência ao Mineflayer no package.json).
44 | 
45 | Veja um [exemplo completo](https://github.com/andrewrk/mineflayer-navigate/tree/e24cb6a868ce64ae43bea2d035832c15ed01d301) aqui.
46 | 
47 | ## Relatando Bugs
48 | O Mineflayer funciona bem na maioria das situações, mas às vezes ainda pode ter bugs.
49 | 
50 | Ao encontrar um bug, é melhor relatar o erro fornecendo as seguintes informações:
51 | 
52 | * O que você está tentando fazer (o objetivo em inglês).
53 | * O que você tentou (o código).
54 | * O que aconteceu.
55 | * O que você esperava que acontecesse.
56 | 
57 | ## Código do Mineflayer
58 | Aqui estão algumas coisas a se considerar ao criar uma solicitação de pull (pull request) ou fazer um commit:
59 | 
60 | ### Tratamento de Erros
61 | Na maioria dos casos, o Mineflayer não deve quebrar ou travar o bot. Mesmo se algo der errado, o bot pode seguir uma rota alternativa para alcançar o objetivo.
62 | 
63 | Isso significa que não devemos usar `throw new Error("erro")`, mas sim passar o erro junto com o callback.
64 | 
65 | Por exemplo:
66 | 
67 | ```js
68 | function myfunction (param1, callback) {
69 |   let toDo = 1
70 |   toDo = 2
71 |   if (toDo === 2) { // everything worked (todo está funcionado)
72 |     callback()
73 |   } else {
74 |     callback(new Error('something failed')) // (algo falhou)
75 |   }
76 | }
77 | ```
78 | 
79 | Veja outro exemplo no [código do Mineflayer](https://github.com/andrewrk/mineflayer/blob/a8736c4ea473cf1a609c5a29046c0cdad006d429/lib/plugins/bed.js#L10).
80 | 
81 | ### Atualizando a Documentação
82 | A tabela de conteúdo no arquivo docs/api.md é gerada com o Doctoc. Após atualizar o arquivo, você deve executar doctoc docs/api.md para atualizar a tabela de conteúdo.
83 | 
84 | Esta documentação não é oficialmente mantida; para ver as informações mais recentes, consulte a documentação original: [unstable_api](../CONTRIBUTING.md).


--------------------------------------------------------------------------------
/docs/br/FAQ_BR.md:
--------------------------------------------------------------------------------
  1 | ## Perguntas Frequentes
  2 | 
  3 | Este documento de perguntas frequentes tem o objetivo de ajudar as pessoas com informações básicas.
  4 | 
  5 | ## Como ocultar erros?
  6 | 
  7 | Para ocultar erros, você pode adicionar a opção `hideErrors: true` nas configurações ao criar o bot. Também é possível usar os seguintes eventos:
  8 | 
  9 | ```js
 10 | client.on('error', () => {})
 11 | client.on('end', () => {})
 12 | ```
 13 | 
 14 | ## Meu evento de chat não está sendo emitido em um servidor personalizado. Como posso resolver isso?
 15 | 
 16 | Alguns servidores Spigot, em particular certos plugins, utilizam formatos personalizados de chat. Nesse caso, é necessário analisar esses formatos com expressões regulares personalizadas. Recomenda-se ler e modificar o arquivo [chat_parsing.js](https://github.com/PrismarineJS/mineflayer/blob/master/examples/chat_parsing.js) para que funcione com o plugin de chat específico do seu servidor. Você também pode consultar http://prismarinejs.github.io/mineflayer/#/tutorial?id=custom-chat para obter mais informações.
 17 | 
 18 | ## Como posso coletar informações de um plugin de chat personalizado?
 19 | 
 20 | A maioria dos servidores de Minecraft possui plugins que enviam mensagens ao chat quando ocorrem eventos. Se a informação enviada for simples, você pode utilizar a solução mencionada anteriormente. No entanto, se as mensagens contêm muita informação em um único bloco de texto, outra opção é utilizar o evento `"messagestr"`, que permite analisar as mensagens de forma mais fácil.
 21 | 
 22 | **Exemplo:**
 23 | 
 24 | Suponha que a mensagem seja semelhante a esta:
 25 | 
 26 | ```
 27 | (!) U9G ganhou o /jackpot e recebeu
 28 | $26,418,402,450! Eles compraram 2,350,000 (76.32%) bilhetes
 29 | de um total de 3,079,185 bilhetes vendidos!
 30 | ```
 31 | 
 32 | ```js
 33 | const regex = {
 34 |   first: /\(!\) (.+) ganhou o \/jackpot e recebeu +/,
 35 |   second: /\$(.+)! Eles compraram (.+) \((.+)%\) bilhetes do total de /,
 36 |   third: /(.+) bilhetes vendidos!/
 37 | }
 38 | 
 39 | let jackpot = {}
 40 | bot.on('messagestr', msg => {
 41 |   if (regex.first.test(msg)) {
 42 |     const username = msg.match(regex.first)[1]
 43 |     jackpot.username = username
 44 |   } else if (regex.second.test(msg)) {
 45 |     const [, moneyWon, boughtTickets, winPercent] = msg.match(regex.second)
 46 |     jackpot.moneyWon = parseInt(moneyWon.replace(/,/g, ''))
 47 |     jackpot.boughtTickets = parseInt(boughtTickets.replace(/,/g, ''))
 48 |     jackpot.winPercent = parseFloat(winPercent)
 49 |   } else if (regex.third.test(msg)) {
 50 |     const totalTickets = msg.match(regex.third)[1]
 51 |     jackpot.totalTickets = parseInt(totalTickets.replace(/,/g, ''))
 52 |     onDone(jackpot)
 53 |     jackpot = {}
 54 |   }
 55 | })
 56 | ```
 57 | 
 58 | ## Como posso enviar um comando?
 59 | 
 60 | Usando `bot.chat()`.
 61 | 
 62 | **Exmemplo:**
 63 | ```js
 64 | bot.chat('/give @p diamond')
 65 | ```
 66 | 
 67 | ### É possível criar vários bots e controlá-los separadamente?
 68 | 
 69 | Você pode criar bots diferentes com a função `createBot` e executar ações diferentes para cada um deles. Dê uma olhada no arquivo `multiple.js` para mais informações.
 70 | 
 71 | ### Como faço para o bot largar todo o seu inventário?
 72 | 
 73 | Você pode usar a função `bot.inventory.items()` para obter uma matriz dos itens no inventário do bot. Você pode criar uma função recursiva para largar cada item usando `bot.toss()`. Veja um exemplo [aqui](https://gist.github.com/dada513/3d88f772be4224b40f9e5d1787bd63e9).
 74 | 
 75 | ### Como vejo os pacotes que foram enviados/recebidos?
 76 | 
 77 | Você pode ativar o modo de depuração. Para obter mais informações, consulte [este link](https://github.com/PrismarineJS/mineflayer/blob/master/docs/br/README_BR.md#depuraci%C3%B3n).
 78 | 
 79 | ### Quero evitar desconexões devido a lag no servidor, como posso fazer isso?
 80 | 
 81 | Uma maneira de evitar desconexões devido à latência no servidor é aumentar o valor na opção `checkTimeoutInterval` (por exemplo, `300*1000`, que representa 5 minutos, em vez do valor padrão, que é 30 segundos). Se mesmo assim você continuar sendo desconectado do servidor, você pode se reconectar automaticamente usando este exemplo [aqui](https://github.com/PrismarineJS/mineflayer/blob/master/examples/reconnector.js).
 82 | 
 83 | ### Como posso obter a descrição/texto de um item?
 84 | 
 85 | Você pode usar a propriedade `item.nbt`. É recomendável utilizar a biblioteca `prismarine-nbt`. O método `nbt.simplify()` pode ser útil para simplificar a obtenção da descrição de um item.
 86 | 
 87 | **Exemplo:**
 88 | ```js
 89 | function getLore (item) {
 90 |   let message = ''
 91 |   if (item.nbt == null) return message
 92 | 
 93 |   const nbt = require('prismarine-nbt')
 94 |   const ChatMessage = require('prismarine-chat')(bot.version)
 95 | 
 96 |   const data = nbt.simplify(item.nbt)
 97 |   const display = data.display
 98 |   if (display == null) return message
 99 | 
100 |   const lore = display.Lore
101 |   if (lore == null) return message
102 |   for (const line of lore) {
103 |     message += new ChatMessage(line).toString()
104 |     message += '\n'
105 |   }
106 | 
107 |   return message
108 | }
109 | ```
110 | 
111 | ### Como posso enviar uma mensagem do console para o servidor?
112 | 
113 | Você pode usar uma biblioteca como `repl` para ler o que você escreve no console e usar `bot.chat()` para enviá-lo para o servidor. Você pode encontrar um exemplo [aqui](https://github.com/PrismarineJS/mineflayer/blob/master/examples/repl.js).
114 | 
115 | ### Ao criar um plugin, como posso especificar outro plugin como dependência?
116 | 
117 | Na função `inject()` do seu plugin, você pode executar a função `bot.loadPlugin()` para carregar esse plugin. Se o plugin já estiver carregado anteriormente, nada acontecerá.
118 | 
119 | Nota: a ordem em que os plugins são carregados é dinâmica; você nunca deve chamar outro plugin em sua função `inject()`.
120 | 
121 | ### Como posso usar um proxy SOCKS5?
122 | 
123 | Nas opções de `mineflayer.createBot(opções)`, remova o seu `host` das opções e coloque as informações necessárias nas variáveis `PROXY_IP`, `PROXY_PORT`, `PROXY_USERNAME`, `PROXY_PASSWORD`, `MC_SERVER_IP` e `MC_SERVER_PORT`. Em seguida, adicione o seguinte ao seu objeto de opções:
124 | 
125 | ```js
126 | connect: (client) => {
127 |   socks.createConnection({
128 |     proxy: {
129 |       host: PROXY_IP,
130 |       port: PROXY_PORT,
131 |       type: 5,
132 |       userId: PROXY_USERNAME,
133 |       password: PROXY_PASSWORD
134 |     },
135 |     command: 'connect',
136 |     destination: {
137 |       host: MC_SERVER_IP,
138 |       port: MC_SERVER_PORT
139 |     }
140 |   }, (err, info) => {
141 |     if (err) {
142 |       console.log(err)
143 |       return
144 |     }
145 |     client.setSocket(info.socket)
146 |     client.emit('connect')
147 |   })
148 | }
149 | ```
150 | 
151 | # Erros Comuns
152 | 
153 | ### `UnhandledPromiseRejectionWarning: Error: Failed to read asymmetric key`
154 | 
155 | Isso ocorre quando você fornece uma versão incorreta ao mineflayer, ou o mineflayer detecta a versão errada.
156 | 
157 | ### `TypeError: Cannot read property '?' of undefined`
158 | 
159 | Você pode estar tentando acessar uma propriedade do bot que ainda não existe; tente acessar a propriedade após o evento `spawn`.
160 | 
161 | ### `SyntaxError: Unexpected token '?'`
162 | 
163 | Atualize a versão do seu Node.js.
164 | 
165 | ### O bot não consegue quebrar/colocar blocos ou abrir baús
166 | 
167 | Verifique se a proteção do spawn não está impedindo o bot de realizar a ação.
168 | 
169 | Esta documentação não é oficial. Para as informações mais atualizadas, consulte a documentação original: [FAQ](../FAQ.md).


--------------------------------------------------------------------------------
/docs/br/README_BR.md:
--------------------------------------------------------------------------------
  1 | # Mineflayer
  2 | 
  3 | [![NPM version](https://badge.fury.io/js/mineflayer.svg)](http://badge.fury.io/js/mineflayer)
  4 | [![Build Status](https://github.com/PrismarineJS/mineflayer/workflows/CI/badge.svg)](https://github.com/PrismarineJS/mineflayer/actions?query=workflow%3A%22CI%22)
  5 | [![Discord](https://img.shields.io/badge/chat-on%20discord-brightgreen.svg)](https://discord.gg/GsEFRM8)
  6 | [![Gitter](https://img.shields.io/badge/chat-on%20gitter-brightgreen.svg)](https://gitter.im/PrismarineJS/general)
  7 | [![Irc](https://img.shields.io/badge/chat-on%20irc-brightgreen.svg)](https://irc.gitter.im/)
  8 | 
  9 | [![Try it on gitpod](https://img.shields.io/badge/try-on%20gitpod-brightgreen.svg)](https://gitpod.io/#https://github.com/PrismarineJS/mineflayer)
 10 | 
 11 | | <sub>EN</sub> [English](../README.md) | <sub>RU</sub> [русский](../ru/README_RU.md) | <sub>ES</sub> [Español](../es/README_ES.md) | <sub>FR</sub> [Français](../fr/README_FR.md) | <sub>TR</sub> [Türkçe](../tr/README_TR.md) | <sub>ZH</sub> [中文](../zh/README_ZH_CN.md) | <sub>BR</sub> [Português](../br/README_BR.md) |
 12 | |-------------------------|----------------------------|----------------------------|----------------------------|----------------------------|-----------------|-----------------|
 13 | 
 14 | Crie bots para o Minecraft com uma API JavaScript poderosa, estável e de alto nível.
 15 | 
 16 | Primeira vez usando o Node.js? Você pode querer começar com o tutorial [tutorial](../tutorial.md)
 17 | 
 18 | ## Recursos
 19 | 
 20 |  * Suporta Minecraft 1.8, 1.9, 1.10, 1.11, 1.12, 1.13, 1.14, 1.15, 1.16, 1.17, 1.18, 1.19 e 1.20.
 21 |  * Conhecimento e rastreamento de entidades.
 22 |  * Conhecimento de blocos. Você pode consultar o mundo ao seu redor em milissegundos para encontrar qualquer bloco.
 23 |  * Física e movimento - lida com todas as caixas delimitadoras.
 24 |  * Ataque a entidades e uso de veículos.
 25 |  * Gerenciamento de inventário.
 26 |  * Criação, baús, dispensadores, mesas de encantamento.
 27 |  * Escavação e construção.
 28 |  * Diversas funcionalidades, como saber sua saúde e se está chovendo.
 29 |  * Ativação de blocos e uso de itens.
 30 |  * Chat.
 31 | 
 32 | ### Planos para o Futuro
 33 | - Dê uma olhada em nossos [projetos atuais](https://github.com/PrismarineJS/mineflayer/wiki/Big-Prismarine-projects)
 34 | 
 35 | ## Instalação
 36 | - Primeiro, instale o Node.js >= 18 a partir do [nodejs.org](https://nodejs.org/)
 37 | 
 38 | `npm install mineflayer`
 39 | 
 40 | ## Documentação
 41 | 
 42 | | Link | Descrição |
 43 | |---|---|
 44 | | [tutorial](../tutorial.md) | Comece com o Node.js e o Mineflayer |
 45 | | [FAQ_BR.md](FAQ_BR.md) | Alguma dúvida? Confira isso |
 46 | | [api_br.md](api_br.md) [unstable_api_br.md](unstable_api_br.md) | Toda a documentação da API |
 47 | | [history.md](../history.md) | Histórico de mudanças do Mineflayer |
 48 | | [examples/](https://github.com/PrismarineJS/mineflayer/tree/master/examples) | Todos os exemplos do Mineflayer |
 49 | 
 50 | ## Contribuições
 51 | 
 52 | Por favor, leia [CONTRIBUTING_BR.md](CONTRIBUTING_BR.md) e [prismarine-contribute](https://github.com/PrismarineJS/prismarine-contribute)
 53 | 
 54 | ## Uso
 55 | 
 56 | **Vídeos**
 57 | 
 58 | Você pode encontrar um tutorial que explica o processo de começar um bot [aqui](https://www.youtube.com/watch?v=ltWosy4Z0Kw) (em inglês).
 59 | 
 60 | Se você quiser aprender mais, pode verificar [aqui,](https://www.youtube.com/playlist?list=PLh_alXmxHmzGy3FKbo95AkPp5D8849PEV) os códigos usados nos vídeos [aqui](https://github.com/TheDudeFromCI/Mineflayer-Youtube-Tutorials)
 61 | 
 62 | [<img src="https://img.youtube.com/vi/ltWosy4Z0Kw/0.jpg" alt="tutorial 1" width="200">](https://www.youtube.com/watch?v=ltWosy4Z0Kw)
 63 | [<img src="https://img.youtube.com/vi/UWGSf08wQSc/0.jpg" alt="tutorial 2" width="200">](https://www.youtube.com/watch?v=UWGSf08wQSc)
 64 | [<img src="https://img.youtube.com/vi/ssWE0kXDGJE/0.jpg" alt="tutorial 3" width="200">](https://www.youtube.com/watch?v=ssWE0kXDGJE)
 65 | [<img src="https://img.youtube.com/vi/walbRk20KYU/0.jpg" alt="tutorial 4" width="200">](https://www.youtube.com/watch?v=walbRk20KYU)
 66 | 
 67 | **Começando**
 68 | 
 69 | Se não for especificada uma versão, a versão do servidor será detectada automaticamente. Se nenhuma forma de autenticação for especificada, o login da Mojang será usado automaticamente.
 70 | 
 71 | ### Exemplo: echo
 72 | ```js
 73 | const mineflayer = require('mineflayer')
 74 | 
 75 | const bot = mineflayer.createBot({
 76 |   host: 'localhost', // IP do servidor de Minecraft
 77 |   username: 'email@example.com', // Nome de usuário da conta, e-mail se for premium
 78 |   password: '12345678' // Senha para servidores premium
 79 |   // port: 25565, // Altere apenas se for um servidor que não usa a porta padrão (25565)
 80 |   // version: false, // Altere apenas se for necessário uma versão específica
 81 |   // auth: 'mojang', // Altere apenas se você tiver uma conta Microsoft (nesse caso, seria auth: 'microsoft')
 82 | })
 83 | 
 84 | bot.on('chat', (username, message) => {
 85 |   if (username === bot.username) return
 86 |   bot.chat(message)
 87 | })
 88 | 
 89 | // Imprimir erros e o motivo do kick se você for expulso:
 90 | bot.on('kicked', (reason, loggedIn) => console.log(reason, loggedIn))
 91 | bot.on('error', err => console.log(err))
 92 | ```
 93 | 
 94 | ### Veja o que o seu bot faz
 95 | 
 96 | Graças ao projeto [prismarine-viewer](https://github.com/PrismarineJS/prismarine-viewer), você pode visualizar em uma guia do seu navegador o que o seu bot está fazendo.
 97 | 
 98 | Tudo o que você precisa fazer é executar `npm install prismarine-viewer` e adicionar o seguinte ao seu bot:
 99 | 
100 | ```js
101 | const { mineflayer: mineflayerViewer } = require('prismarine-viewer')
102 | bot.once('spawn', () => {
103 |   mineflayerViewer(bot, { port: 3007, firstPerson: true }) // a porta é onde o plug-in será hospedado no navegador, e firstPerson é para escolher se você deseja a visualização em primeira pessoa ou não
104 | })
105 | ```
106 | 
107 | E você poderá ver uma representação *ao vivo* como esta:
108 | 
109 | [<img src="https://prismarinejs.github.io/prismarine-viewer/test_1.16.1.png" alt="viewer" width="500">](https://prismarinejs.github.io/prismarine-viewer/)
110 | 
111 | #### Exemplos Ruins
112 | 
113 | | Exemplo | Descrição |
114 | |---|---|
115 | | [viewer](https://github.com/PrismarineJS/mineflayer/tree/master/examples/viewer) | Visualize o que seu bot vê no jogo |
116 | | [pathfinder](https://github.com/Karang/mineflayer-pathfinder/blob/master/examples/test.js) | Faça seu bot se locomover automaticamente para qualquer localização |
117 | | [chest](https://github.com/PrismarineJS/mineflayer/blob/master/examples/chest.js) | Aprenda a usar baús, fornos, dispensadores e mesas de encantamento |
118 | | [digger](https://github.com/PrismarineJS/mineflayer/blob/master/examples/digger.js) | Aprenda como criar um bot que pode quebrar blocos |
119 | | [discord](https://github.com/PrismarineJS/mineflayer/blob/master/examples/discord.js) | Conecte um bot Discord com um bot Mineflayer |
120 | | [jumper](https://github.com/PrismarineJS/mineflayer/blob/master/examples/jumper.js) | Aprenda a se mover, pular, usar veículos e atacar entidades próximas |
121 | | [ansi](https://github.com/PrismarineJS/mineflayer/blob/master/examples/ansi.js) | Exibe todas as mensagens do chat no console com suas cores correspondentes |
122 | | [guard](https://github.com/PrismarineJS/mineflayer/blob/master/examples/guard.js) | Crie um bot que defenda uma área predefinida de mobs |
123 | | [multiple-from-file](https://github.com/PrismarineJS/mineflayer/blob/master/examples/multiple_from_file.js) | Use um arquivo de texto com contas para criar bots |
124 | 
125 | Mais exemplos na pasta de [exemplos](https://github.com/PrismarineJS/mineflayer/tree/master/examples)
126 | 
127 | ### Módulos
128 | 
129 | A maioria do desenvolvimento está ocorrendo em pequenos módulos npm que são usados pelo Mineflayer.
130 | 
131 | #### O Caminho do Node™
132 | 
133 | > "Quando os aplicativos são bem feitos, eles são apenas o resíduo realmente específico da aplicação que não pode ser tão facilmente abstraído. Todos os componentes legais e reutilizáveis sublimam no GitHub e no npm, onde todos podem colaborar para avançar a comunidade." — substack de ["como eu escrevo módulos"](https://gist.github.com/substack/5075355)
134 | 
135 | #### Módulos
136 | Estes são os principais módulos que compõem o Mineflayer:
137 | 
138 | | Módulo | Descrição |
139 | |---|---|
140 | | [minecraft-protocol](https://github.com/PrismarineJS/node-minecraft-protocol) | Analisa e cria pacotes do Minecraft, autenticação e criptografia.
141 | | [minecraft-data](https://github.com/PrismarineJS/minecraft-data) | Módulo independente de linguagem que fornece dados do Minecraft para clientes, servidores e bibliotecas.
142 | | [prismarine-physics](https://github.com/PrismarineJS/prismarine-physics) | Motor de física para entidades do Minecraft
143 | | [prismarine-chunk](https://github.com/PrismarineJS/prismarine-chunk) | Representa um pedaço do Minecraft
144 | | [node-vec3](https://github.com/PrismarineJS/node-vec3) | Usa vetores 3D com testes sólidos
145 | | [prismarine-block](https://github.com/PrismarineJS/prismarine-block) | Representa um bloco e suas informações associadas no Minecraft
146 | | [prismarine-chat](https://github.com/PrismarineJS/prismarine-chat) | Analisador de mensagens de chat do Minecraft (retirado do Mineflayer)
147 | | [node-yggdrasil](https://github.com/PrismarineJS/node-yggdrasil) | Biblioteca Node.js para interagir com o sistema de autenticação da Mojang conhecido como Yggdrasil.
148 | | [prismarine-world](https://github.com/PrismarineJS/prismarine-world) | Implementação principal dos mundos do Minecraft para o Prismarine
149 | | [prismarine-windows](https://github.com/PrismarineJS/prismarine-windows) | Representa as interfaces do Minecraft
150 | | [prismarine-item](https://github.com/PrismarineJS/prismarine-item) | Representa um item e suas informações associadas no Minecraft
151 | | [prismarine-nbt](https://github.com/PrismarineJS/prismarine-nbt) | Analisador de NBT para node-minecraft-protocol
152 | | [prismarine-recipe](https://github.com/PrismarineJS/prismarine-recipe) | Representa receitas de crafting do Minecraft
153 | | [prismarine-biome](https://github.com/PrismarineJS/prismarine-biome) | Representa um bioma e suas informações associadas no Minecraft
154 | | [prismarine-entity](https://github.com/PrismarineJS/prismarine-entity) | Representa uma entidade e suas informações associadas no Minecraft
155 | 
156 | ### Depuração
157 | 
158 | Você pode habilitar a depuração do protocolo usando a variável de ambiente `DEBUG`:
159 | 
160 | ```bash
161 | DEBUG="minecraft-protocol" node [...]
162 | ```
163 | 
164 | No Windows:
165 | ```
166 | set DEBUG=minecraft-protocol
167 | node seu_arquivo.js
168 | ```
169 | 
170 | ## Plugins de Terceiros
171 | 
172 | Mineflayer tem a capacidade de instalar plugins; qualquer pessoa pode criar um plugin que adiciona uma API de alto nível ao Mineflayer.
173 | 
174 | Os mais atualizados e úteis são:
175 | 
176 | * [pathfinder](https://github.com/Karang/mineflayer-pathfinder) - algoritmo de busca A* avançado com muitos recursos configuráveis
177 | * [prismarine-viewer](https://github.com/PrismarineJS/prismarine-viewer) - visualizador de chunks na web
178 | * [web-inventory](https://github.com/ImHarvol/mineflayer-web-inventory) - visualizador de inventário na web
179 | * [statemachine](https://github.com/TheDudeFromCI/mineflayer-statemachine) - API para comportamentos mais complexos
180 | * [Armor Manager](https://github.com/G07cha/MineflayerArmorManager) - gerenciamento automático de armaduras
181 | * [Collect Block](https://github.com/TheDudeFromCI/mineflayer-collectblock) - API rápida e simples para coletar blocos.
182 | * [Dashboard](https://github.com/wvffle/mineflayer-dashboard) - Painel de controle para um bot do Mineflayer
183 | * [PVP](https://github.com/TheDudeFromCI/mineflayer-pvp) - API simples para PVP e PVE.
184 | * [auto-eat](https://github.com/LINKdiscordd/mineflayer-auto-eat) - Plugin para comer automaticamente.
185 | * [Tool](https://github.com/TheDudeFromCI/mineflayer-tool) - Plugin com uma API de alto nível para selecionar automaticamente a melhor arma/ferramenta.
186 | * [Hawkeye](https://github.com/sefirosweb/minecraftHawkEye) - Plugin para mirar automaticamente com arcos.
187 | 
188 | Mas também dê uma olhada em:
189 | 
190 | * [radar](https://github.com/andrewrk/mineflayer-radar/) - interface de radar na web usando canvas e socket.io [Demo no Youtube](https://www.youtube.com/watch?v=FjDmAfcVulQ)
191 | * [blockfinder](https://github.com/Darthfett/mineflayer-blockFinder) - encontra blocos no mundo tridimensional
192 | * [scaffold](https://github.com/andrewrk/mineflayer-scaffold) - ir para um destino específico mesmo que seja necessário construir ou quebrar blocos para alcançá-lo [Demo no Youtube](http://youtu.be/jkg6psMUSE0)
193 | * [auto-auth](https://github.com/G07cha/MineflayerAutoAuth) - autenticação automática por chat
194 | * [Bloodhound](https://github.com/Nixes/mineflayer-bloodhound) - determina quem e/ou o que é responsável por causar dano a outra entidade
195 | * [tps](https://github.com/SiebeDW/mineflayer-tps) - obter o tps atual (tps processado)
196 | * [panorama](https://github.com/IceTank/mineflayer-panorama) - tirar imagens panorâmicas do seu mundo
197 | 
198 | ## Projetos que Usam o Mineflayer
199 | 
200 | * [rom1504/rbot](https://github.com/rom1504/rbot)
201 |    - [YouTube - construindo uma escada espiral](https://www.youtube.com/watch?v=UM1ZV5200S0)
202 |    - [YouTube - replicando uma estrutura](https://www.youtube.com/watch?v=0cQxg9uDnzA)
203 | * [Darthfett/Helperbot](https://github.com/Darthfett/Helperbot)
204 | * [vogonistic/voxel](https://github.com/vogonistic/mineflayer-voxel) - visualiza o que o bot está fazendo usando voxel.js
205 | * [JonnyD/Skynet](https://github.com/JonnyD/Skynet) - registra a atividade de um jogador em uma API online
206 | * [MinecraftChat](https://github.com/rom1504/MinecraftChat) (última versão de código aberto, criada por AlexKvazos) - Interface de chat na web para o Minecraft <https://minecraftchat.net/>
207 | * [Cheese Bot](https://github.com/Minecheesecraft/Cheese-Bot) - bot com uma interface limpa. Feito com Node-Webkit. http://bot.ezcha.net/
208 | * [Chaoscraft](https://github.com/schematical/chaoscraft) - bot de Minecraft que usa algoritmos genéticos, veja [seus vídeos no YouTube](https://www.youtube.com/playlist?list=PLLkpLgU9B5xJ7Qy4kOyBJl5J6zsDIMceH)
209 | * [hexatester/minetelegram](https://github.com/hexatester/minetelegram) - ponte para o Telegram, feita com Mineflayer e Telegraf.
210 | * [e centenas mais](https://github.com/PrismarineJS/mineflayer/network/dependents) - todos os projetos que usam o Mineflayer e foram detectados pelo GitHub.
211 | 
212 | ## Testes
213 | 
214 | ### Executar Todos os Testes
215 | 
216 | Basta executar:
217 | 
218 | ```bash
219 | npm test
220 | ```
221 | 
222 | ### Executar Testes para uma Versão Específica do Minecraft
223 | 
224 | Execute
225 | 
226 | ```bash
227 | npm test -- -g <versão>
228 | ```
229 | 
230 | onde `<versão>` é uma versão do Minecraft, como `1.12`, `1.15.2`...
231 | 
232 | ### Executar um Teste Específico
233 | 
234 | Execute
235 | ```bash
236 | npm test -- -g <nome_do_teste>
237 | ```
238 | 
239 | onde `<nome_do_teste>` é o nome do teste que você deseja executar, como `bed`, `useChests`, `rayTrace`...
240 | 
241 | ## Licença
242 | 
243 | [MIT](../../LICENSE)
244 | 
245 | Esta documentação não é oficialmente mantida. Para ver as últimas atualizações, consulte a documentação original: [unstable_api](../README.md)
246 | 


--------------------------------------------------------------------------------
/docs/br/api_br.md:
--------------------------------------------------------------------------------
   1 | <!-- START doctoc generated TOC please keep comment here to allow auto update -->
   2 | <!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
   3 | **Tabela de conteúdos** *gerada com [DocToc](https://github.com/thlorenz/doctoc)*
   4 | 
   5 | - [API](#api)
   6 |   - [Enums](#enums)
   7 |     - [minecraft-data](#minecraft-data)
   8 |     - [mcdata.blocks](#mcdatablocks)
   9 |     - [mcdata.items](#mcdataitems)
  10 |     - [mcdata.materials](#mcdatamaterials)
  11 |     - [mcdata.recipes](#mcdatarecipes)
  12 |     - [mcdata.instruments](#mcdatainstruments)
  13 |     - [mcdata.biomes](#mcdatabiomes)
  14 |     - [mcdata.entities](#mcdataentities)
  15 |   - [Clases](#clases)
  16 |     - [vec3](#vec3)
  17 |     - [mineflayer.Location](#mineflayerlocation)
  18 |     - [Entity](#entity)
  19 |     - [Block](#block)
  20 |     - [Biome](#biome)
  21 |     - [Item](#item)
  22 |     - [windows.Window (base class)](#windowswindow-base-class)
  23 |       - [window.deposit(itemType, metadata, count, [callback])](#windowdeposititemtype-metadata-count-callback)
  24 |       - [window.withdraw(itemType, metadata, count, [callback])](#windowwithdrawitemtype-metadata-count-callback)
  25 |       - [window.close()](#windowclose)
  26 |     - [Recipe](#recipe)
  27 |     - [mineflayer.Container](#mineflayercontainer)
  28 |     - [mineflayer.Furnace](#mineflayerfurnace)
  29 |       - [furnace "update"](#furnace-update)
  30 |       - [furnace.takeInput([callback])](#furnacetakeinputcallback)
  31 |       - [furnace.takeFuel([callback])](#furnacetakefuelcallback)
  32 |       - [furnace.takeOutput([callback])](#furnacetakeoutputcallback)
  33 |       - [furnace.putInput(itemType, metadata, count, [cb])](#furnaceputinputitemtype-metadata-count-cb)
  34 |       - [furnace.putFuel(itemType, metadata, count, [cb])](#furnaceputfuelitemtype-metadata-count-cb)
  35 |       - [furnace.inputItem()](#furnaceinputitem)
  36 |       - [furnace.fuelItem()](#furnacefuelitem)
  37 |       - [furnace.outputItem()](#furnaceoutputitem)
  38 |       - [furnace.fuel](#furnacefuel)
  39 |       - [furnace.progress](#furnaceprogress)
  40 |     - [mineflayer.EnchantmentTable](#mineflayerenchantmenttable)
  41 |       - [enchantmentTable "ready"](#enchantmenttable-ready)
  42 |       - [enchantmentTable.targetItem()](#enchantmenttabletargetitem)
  43 |       - [enchantmentTable.xpseed](#enchantmenttablexpseed)
  44 |       - [enchantmentTable.enchantments](#enchantmenttableenchantments)
  45 |       - [enchantmentTable.enchant(choice, [callback])](#enchantmenttableenchantchoice-callback)
  46 |       - [enchantmentTable.takeTargetItem([callback])](#enchantmenttabletaketargetitemcallback)
  47 |       - [enchantmentTable.putTargetItem(item, [callback])](#enchantmenttableputtargetitemitem-callback)
  48 |       - [enchantmentTable.putLapis(item, [callback])](#enchantmenttableputlapisitem-callback)
  49 |     - [mineflayer.anvil](#mineflayeranvil)
  50 |       - [anvil.combine(itemOne, itemTwo[, name, callback])](#anvilcombineitemone-itemtwo-name-callback)
  51 |       - [anvil.combine(item[, name, callback])](#anvilcombineitem-name-callback)
  52 |       - [villager "ready"](#villager-ready)
  53 |       - [villager.trades](#villagertrades)
  54 |       - [villager.trade(tradeIndex, [times], [cb])](#villagertradetradeindex-times-cb)
  55 |     - [mineflayer.ScoreBoard](#mineflayerscoreboard)
  56 |       - [ScoreBoard.name](#scoreboardname)
  57 |       - [ScoreBoard.title](#scoreboardtitle)
  58 |       - [ScoreBoard.itemsMap](#scoreboarditemsmap)
  59 |       - [ScoreBoard.items](#scoreboarditems)
  60 |     - [mineflayer.BossBar](#mineflayerbossbar)
  61 |       - [BossBar.title](#bossbartitle)
  62 |       - [BossBar.health](#bossbarhealth)
  63 |       - [BossBar.dividers](#bossbardividers)
  64 |       - [BossBar.entityUUID](#bossbarentityuuid)
  65 |       - [BossBar.shouldDarkenSky](#bossbarshoulddarkensky)
  66 |       - [BossBar.isDragonBar](#bossbarisdragonbar)
  67 |       - [BossBar.createFog](#bossbarcreatefog)
  68 |       - [BossBar.color](#bossbarcolor)
  69 |   - [Bot](#bot)
  70 |     - [mineflayer.createBot(options)](#mineflayercreatebotoptions)
  71 |     - [Properties](#properties)
  72 |       - [bot.world](#botworld)
  73 |         - [world "blockUpdate" (oldBlock, newBlock)](#world-blockupdate-oldblock-newblock)
  74 |         - [world "blockUpdate:(x, y, z)" (oldBlock, newBlock)](#world-blockupdatex-y-z-oldblock-newblock)
  75 |       - [bot.entity](#botentity)
  76 |       - [bot.entities](#botentities)
  77 |       - [bot.username](#botusername)
  78 |       - [bot.spawnPoint](#botspawnpoint)
  79 |       - [bot.heldItem](#bothelditem)
  80 |       - [bot.game.levelType](#botgameleveltype)
  81 |       - [bot.game.dimension](#botgamedimension)
  82 |       - [bot.game.difficulty](#botgamedifficulty)
  83 |       - [bot.game.gameMode](#botgamegamemode)
  84 |       - [bot.game.hardcore](#botgamehardcore)
  85 |       - [bot.game.maxPlayers](#botgamemaxplayers)
  86 |       - [bot.game.serverBrand](#botgameserverbrand)
  87 |     - [bot.physicsEnabled](#botphysicsenabled)
  88 |     - [bot.player](#botplayer)
  89 |       - [bot.players](#botplayers)
  90 |       - [bot.isRaining](#botisraining)
  91 |       - [bot.rainState](#botrainstate)
  92 |       - [bot.thunderState](#botthunderstate)
  93 |       - [bot.chatPatterns](#botchatpatterns)
  94 |       - [bot.settings.chat](#botsettingschat)
  95 |       - [bot.settings.colorsEnabled](#botsettingscolorsenabled)
  96 |       - [bot.settings.viewDistance](#botsettingsviewdistance)
  97 |       - [bot.settings.difficulty](#botsettingsdifficulty)
  98 |       - [bot.settings.skinParts](#botsettingsskinparts)
  99 |         - [bot.settings.skinParts.showCape](#botsettingsskinpartsshowcape)
 100 |         - [bot.settings.skinParts.showJacket](#botsettingsskinpartsshowjacket)
 101 |         - [bot.settings.skinParts.showLeftSleeve](#botsettingsskinpartsshowleftsleeve)
 102 |         - [bot.settings.skinParts.showRightSleeve](#botsettingsskinpartsshowrightsleeve)
 103 |         - [bot.settings.skinParts.showLeftPants](#botsettingsskinpartsshowleftpants)
 104 |         - [bot.settings.skinParts.showRightPants](#botsettingsskinpartsshowrightpants)
 105 |         - [bot.settings.skinParts.showHat](#botsettingsskinpartsshowhat)
 106 |       - [bot.experience.level](#botexperiencelevel)
 107 |       - [bot.experience.points](#botexperiencepoints)
 108 |       - [bot.experience.progress](#botexperienceprogress)
 109 |       - [bot.health](#bothealth)
 110 |       - [bot.food](#botfood)
 111 |       - [bot.foodSaturation](#botfoodsaturation)
 112 |       - [bot.oxygenLevel](#botoxygenlevel)
 113 |       - [bot.physics](#botphysics)
 114 |       - [bot.simpleClick.leftMouse (slot)](#botsimpleclickleftmouse-slot)
 115 |       - [bot.simpleClick.rightMouse (slot)](#botsimpleclickrightmouse-slot)
 116 |       - [bot.time.doDaylightCycle](#bottimedodaylightcycle)
 117 |       - [bot.time.bigTime](#bottimebigtime)
 118 |       - [bot.time.time](#bottimetime)
 119 |       - [bot.time.timeOfDay](#bottimetimeofday)
 120 |       - [bot.time.day](#bottimeday)
 121 |       - [bot.time.isDay](#bottimeisday)
 122 |       - [bot.time.moonPhase](#bottimemoonphase)
 123 |       - [bot.time.bigAge](#bottimebigage)
 124 |       - [bot.time.age](#bottimeage)
 125 |       - [bot.quickBarSlot](#botquickbarslot)
 126 |       - [bot.inventory](#botinventory)
 127 |       - [bot.targetDigBlock](#bottargetdigblock)
 128 |       - [bot.isSleeping](#botissleeping)
 129 |       - [bot.scoreboards](#botscoreboards)
 130 |       - [bot.scoreboard](#botscoreboard)
 131 |       - [bot.controlState](#botcontrolstate)
 132 |     - [Events](#events)
 133 |       - ["chat" (username, message, translate, jsonMsg, matches)](#chat-username-message-translate-jsonmsg-matches)
 134 |       - ["whisper" (username, message, translate, jsonMsg, matches)](#whisper-username-message-translate-jsonmsg-matches)
 135 |       - ["actionBar" (jsonMsg)](#actionbar-jsonmsg)
 136 |       - ["message" (jsonMsg, position)](#message-jsonmsg-position)
 137 |       - ["messagestr" (message, messagePosition, jsonMsg)](#messagestr-message-messageposition-jsonmsg)
 138 |       - ["inject_allowed"](#inject_allowed)
 139 |       - ["login"](#login)
 140 |       - ["spawn"](#spawn)
 141 |       - ["respawn"](#respawn)
 142 |       - ["game"](#game)
 143 |       - ["resourcePack" (url, hash)](#resourcepack-url-hash)
 144 |       - ["title" (title, type)](#title-title-type)
 145 |       - ["rain"](#rain)
 146 |       - ["weatherUpdate"](#weatherupdate)
 147 |       - ["time"](#time)
 148 |       - ["kicked" (reason, loggedIn)](#kicked-reason-loggedin)
 149 |       - ["end"](#end)
 150 |       - ["error" (err)](#error-err)
 151 |       - ["spawnReset"](#spawnreset)
 152 |       - ["death"](#death)
 153 |       - ["health"](#health)
 154 |       - ["breath"](#breath)
 155 |       - ["entitySwingArm" (entity)](#entityswingarm-entity)
 156 |       - ["entityHurt" (entity)](#entityhurt-entity)
 157 |       - ["entityDead" (entity)](#entitydead-entity)
 158 |       - ["entityTaming" (entity)](#entitytaming-entity)
 159 |       - ["entityTamed" (entity)](#entitytamed-entity)
 160 |       - ["entityShakingOffWater" (entity)](#entityshakingoffwater-entity)
 161 |       - ["entityEatingGrass" (entity)](#entityeatinggrass-entity)
 162 |       - ["entityWake" (entity)](#entitywake-entity)
 163 |       - ["entityEat" (entity)](#entityeat-entity)
 164 |       - ["entityCriticalEffect" (entity)](#entitycriticaleffect-entity)
 165 |       - ["entityMagicCriticalEffect" (entity)](#entitymagiccriticaleffect-entity)
 166 |       - ["entityCrouch" (entity)](#entitycrouch-entity)
 167 |       - ["entityUncrouch" (entity)](#entityuncrouch-entity)
 168 |       - ["entityEquip" (entity)](#entityequip-entity)
 169 |       - ["entitySleep" (entity)](#entitysleep-entity)
 170 |       - ["entitySpawn" (entity)](#entityspawn-entity)
 171 |       - ["itemDrop" (entity)](#itemdrop-entity)
 172 |       - ["playerCollect" (collector, collected)](#playercollect-collector-collected)
 173 |       - ["entityGone" (entity)](#entitygone-entity)
 174 |       - ["entityMoved" (entity)](#entitymoved-entity)
 175 |       - ["entityDetach" (entity, vehicle)](#entitydetach-entity-vehicle)
 176 |       - ["entityAttach" (entity, vehicle)](#entityattach-entity-vehicle)
 177 |       - ["entityUpdate" (entity)](#entityupdate-entity)
 178 |       - ["entityEffect" (entity, effect)](#entityeffect-entity-effect)
 179 |       - ["entityEffectEnd" (entity, effect)](#entityeffectend-entity-effect)
 180 |       - ["playerJoined" (player)](#playerjoined-player)
 181 |       - ["playerUpdated" (player)](#playerupdated-player)
 182 |       - ["playerLeft" (player)](#playerleft-player)
 183 |       - ["blockUpdate" (oldBlock, newBlock)](#blockupdate-oldblock-newblock)
 184 |       - ["blockUpdate:(x, y, z)" (oldBlock, newBlock)](#blockupdatex-y-z-oldblock-newblock)
 185 |       - ["blockPlaced" (oldBlock, newBlock)](#blockplaced-oldblock-newblock)
 186 |       - ["chunkColumnLoad" (point)](#chunkcolumnload-point)
 187 |       - ["chunkColumnUnload" (point)](#chunkcolumnunload-point)
 188 |       - ["soundEffectHeard" (soundName, position, volume, pitch)](#soundeffectheard-soundname-position-volume-pitch)
 189 |       - ["hardcodedSoundEffectHeard" (soundId, soundCategory, position, volume, pitch)](#hardcodedsoundeffectheard-soundid-soundcategory-position-volume-pitch)
 190 |       - ["noteHeard" (block, instrument, pitch)](#noteheard-block-instrument-pitch)
 191 |       - ["pistonMove" (block, isPulling, direction)](#pistonmove-block-ispulling-direction)
 192 |       - ["chestLidMove" (block, isOpen, block2)](#chestlidmove-block-isopen-block2)
 193 |       - ["blockBreakProgressObserved" (block, destroyStage)](#blockbreakprogressobserved-block-destroystage)
 194 |       - ["blockBreakProgressEnd" (block)](#blockbreakprogressend-block)
 195 |       - ["diggingCompleted" (block)](#diggingcompleted-block)
 196 |       - ["diggingAborted" (block)](#diggingaborted-block)
 197 |       - ["move"](#move)
 198 |       - ["forcedMove"](#forcedmove)
 199 |       - ["mount"](#mount)
 200 |       - ["dismount" (vehicle)](#dismount-vehicle)
 201 |       - ["windowOpen" (window)](#windowopen-window)
 202 |       - ["windowClose" (window)](#windowclose-window)
 203 |       - ["sleep"](#sleep)
 204 |       - ["wake"](#wake)
 205 |       - ["experience"](#experience)
 206 |       - ["scoreboardCreated" (scoreboard)](#scoreboardcreated-scoreboard)
 207 |       - ["scoreboardDeleted" (scoreboard)](#scoreboarddeleted-scoreboard)
 208 |       - ["scoreboardTitleChanged" (scoreboard)](#scoreboardtitlechanged-scoreboard)
 209 |       - ["scoreUpdated" (scoreboard, item)](#scoreupdated-scoreboard-item)
 210 |       - ["scoreRemoved" (scoreboard, item)](#scoreremoved-scoreboard-item)
 211 |       - ["scoreboardPosition" (position, scoreboard)](#scoreboardposition-position-scoreboard)
 212 |       - ["bossBarCreated" (bossBar)](#bossbarcreated-bossbar)
 213 |       - ["bossBarDeleted" (bossBar)](#bossbardeleted-bossbar)
 214 |       - ["bossBarUpdated" (bossBar)](#bossbarupdated-bossbar)
 215 |       - ["heldItemChanged" (heldItem)](#helditemchanged-helditem)
 216 |       - ["physicsTick" ()](#physicstick-)
 217 |       - ["chat:name" (matches)](#chatname-matches)
 218 |     - [Functions](#functions)
 219 |       - [bot.blockAt(point, extraInfos=true)](#botblockatpoint-extrainfostrue)
 220 |       - [bot.waitForChunksToLoad(cb)](#botwaitforchunkstoloadcb)
 221 |       - [bot.blockInSight(maxSteps, vectorLength)](#botblockinsightmaxsteps-vectorlength)
 222 |       - [bot.blockAtCursor(maxDistance=256)](#botblockatcursormaxdistance256)
 223 |       - [bot.canSeeBlock(block)](#botcanseeblockblock)
 224 |       - [bot.findBlocks(options)](#botfindblocksoptions)
 225 |       - [bot.findBlock(options)](#botfindblockoptions)
 226 |       - [bot.canDigBlock(block)](#botcandigblockblock)
 227 |       - [bot.recipesFor(itemType, metadata, minResultCount, craftingTable)](#botrecipesforitemtype-metadata-minresultcount-craftingtable)
 228 |       - [bot.recipesAll(itemType, metadata, craftingTable)](#botrecipesallitemtype-metadata-craftingtable)
 229 |       - [bot.nearestEntity(match = (entity) => { return true })](#botnearestentitymatch--entity---return-true-)
 230 |     - [Methods](#methods)
 231 |       - [bot.end()](#botend)
 232 |       - [bot.quit(reason)](#botquitreason)
 233 |       - [bot.tabComplete(str, cb, [assumeCommand], [sendBlockInSight])](#bottabcompletestr-cb-assumecommand-sendblockinsight)
 234 |       - [bot.chat(message)](#botchatmessage)
 235 |       - [bot.whisper(username, message)](#botwhisperusername-message)
 236 |       - [bot.chatAddPattern(pattern, chatType, description)](#botchataddpatternpattern-chattype-description)
 237 |       - [bot.addChatPattern(name, pattern, chatPatternOptions)](#botaddchatpatternname-pattern-chatpatternoptions)
 238 |       - [bot.addChatPatternSet(name, patterns, chatPatternOptions)](#botaddchatpatternsetname-patterns-chatpatternoptions)
 239 |       - [bot.removeChatPattern(name)](#botremovechatpatternname)
 240 |       - [bot.awaitMessage(...args)](#botawaitmessageargs)
 241 |       - [bot.setSettings(options)](#botsetsettingsoptions)
 242 |       - [bot.loadPlugin(plugin)](#botloadpluginplugin)
 243 |       - [bot.loadPlugins(plugins)](#botloadpluginsplugins)
 244 |       - [bot.hasPlugin(plugin)](#bothaspluginplugin)
 245 |       - [bot.sleep(bedBlock, [cb])](#botsleepbedblock-cb)
 246 |       - [bot.isABed(bedBlock)](#botisabedbedblock)
 247 |       - [bot.wake([cb])](#botwakecb)
 248 |       - [bot.setControlState(control, state)](#botsetcontrolstatecontrol-state)
 249 |       - [bot.getControlState(control)](#botgetcontrolstatecontrol)
 250 |       - [bot.clearControlStates()](#botclearcontrolstates)
 251 |       - [bot.lookAt(point, [force], [callback])](#botlookatpoint-force-callback)
 252 |       - [bot.look(yaw, pitch, [force], [callback])](#botlookyaw-pitch-force-callback)
 253 |       - [bot.updateSign(block, text)](#botupdatesignblock-text)
 254 |       - [bot.equip(item, destination, [callback])](#botequipitem-destination-callback)
 255 |       - [bot.unequip(destination, [callback])](#botunequipdestination-callback)
 256 |       - [bot.tossStack(item, [callback])](#bottossstackitem-callback)
 257 |       - [bot.toss(itemType, metadata, count, [callback])](#bottossitemtype-metadata-count-callback)
 258 |       - [bot.dig(block, [forceLook = true], [digFace], [callback])](#botdigblock-forcelook--true-digface-callback)
 259 |       - [bot.stopDigging()](#botstopdigging)
 260 |       - [bot.digTime(block)](#botdigtimeblock)
 261 |       - [bot.acceptResourcePack()](#botacceptresourcepack)
 262 |       - [bot.denyResourcePack()](#botdenyresourcepack)
 263 |       - [bot.placeBlock(referenceBlock, faceVector, cb)](#botplaceblockreferenceblock-facevector-cb)
 264 |       - [bot.placeEntity(referenceBlock, faceVector)](#botplaceentityreferenceblock-facevector)
 265 |       - [bot.activateBlock(block, [callback])](#botactivateblockblock-callback)
 266 |       - [bot.activateEntity(entity, [callback])](#botactivateentityentity-callback)
 267 |       - [bot.activateEntityAt(entity, position, [callback])](#botactivateentityatentity-position-callback)
 268 |       - [bot.consume(callback)](#botconsumecallback)
 269 |       - [bot.fish(callback)](#botfishcallback)
 270 |       - [bot.activateItem(offHand=false)](#botactivateitemoffhandfalse)
 271 |       - [bot.deactivateItem()](#botdeactivateitem)
 272 |       - [bot.useOn(targetEntity)](#botuseontargetentity)
 273 |       - [bot.attack(entity)](#botattackentity)
 274 |       - [bot.swingArm([hand], showHand)](#botswingarmhand-showhand)
 275 |       - [bot.mount(entity)](#botmountentity)
 276 |       - [bot.dismount()](#botdismount)
 277 |       - [bot.moveVehicle(left,forward)](#botmovevehicleleftforward)
 278 |       - [bot.setQuickBarSlot(slot)](#botsetquickbarslotslot)
 279 |       - [bot.craft(recipe, count, craftingTable, [callback])](#botcraftrecipe-count-craftingtable-callback)
 280 |       - [bot.writeBook(slot, pages, [callback])](#botwritebookslot-pages-callback)
 281 |       - [bot.openContainer(containerBlock or containerEntity)](#botopencontainercontainerblock-or-containerentity)
 282 |       - [bot.openChest(chestBlock or minecartchestEntity)](#botopenchestchestblock-or-minecartchestentity)
 283 |       - [bot.openFurnace(furnaceBlock)](#botopenfurnacefurnaceblock)
 284 |       - [bot.openDispenser(dispenserBlock)](#botopendispenserdispenserblock)
 285 |       - [bot.openEnchantmentTable(enchantmentTableBlock)](#botopenenchantmenttableenchantmenttableblock)
 286 |       - [bot.openAnvil(anvilBlock)](#botopenanvilanvilblock)
 287 |       - [bot.openVillager(villagerEntity)](#botopenvillagervillagerentity)
 288 |       - [bot.trade(villagerInstance, tradeIndex, [times], [cb])](#bottradevillagerinstance-tradeindex-times-cb)
 289 |       - [bot.setCommandBlock(pos, command, [options])](#botsetcommandblockpos-command-options)
 290 |       - [bot.supportFeature(name)](#botsupportfeaturename)
 291 |       - [bot.waitForTicks(ticks)](#botwaitforticksticks)
 292 |     - [Lower level inventory methods](#lower-level-inventory-methods)
 293 |       - [bot.clickWindow(slot, mouseButton, mode, cb)](#botclickwindowslot-mousebutton-mode-cb)
 294 |       - [bot.putSelectedItemRange(start, end, window, slot)](#botputselecteditemrangestart-end-window-slot)
 295 |       - [bot.putAway(slot)](#botputawayslot)
 296 |       - [bot.closeWindow(window)](#botclosewindowwindow)
 297 |       - [bot.transfer(options, cb)](#bottransferoptions-cb)
 298 |       - [bot.openBlock(block)](#botopenblockblock)
 299 |       - [bot.openEntity(entity)](#botopenentityentity)
 300 |       - [bot.moveSlotItem(sourceSlot, destSlot, cb)](#botmoveslotitemsourceslot-destslot-cb)
 301 |       - [bot.updateHeldItem()](#botupdatehelditem)
 302 |       - [bot.getEquipmentDestSlot(destination)](#botgetequipmentdestslotdestination)
 303 |     - [bot.creative](#botcreative)
 304 |       - [bot.creative.setInventorySlot(slot, item, [callback])](#botcreativesetinventoryslotslot-item-callback)
 305 |       - [bot.creative.flyTo(destination, [cb])](#botcreativeflytodestination-cb)
 306 |       - [bot.creative.startFlying()](#botcreativestartflying)
 307 |       - [bot.creative.stopFlying()](#botcreativestopflying)
 308 | 
 309 | <!-- END doctoc generated TOC please keep comment here to allow auto update -->
 310 | 
 311 | # API
 312 | 
 313 | ## Enums
 314 | 
 315 | Esses enums estão armazenados em um projeto independente da linguagem [minecraft-data](https://github.com/PrismarineJS/minecraft-data) e acessados pelo [node-minecraft-data](https://github.com/PrismarineJS/node-minecraft-data).
 316 | 
 317 | ### minecraft-data
 318 | Os dados estão disponíveis no módulo [node-minecraft-data](https://github.com/PrismarineJS/node-minecraft-data)
 319 | 
 320 | `require('minecraft-data')(bot.version)` te dá acesso a eles.
 321 | 
 322 | ### mcdata.blocks
 323 | Blocos ordenados por ID.
 324 | 
 325 | ### mcdata.items
 326 | Itens ordenados por ID.
 327 | 
 328 | ### mcdata.materials
 329 | A chave é o material. O valor é um objeto com a chave sendo o ID da ferramenta e o valor é o multiplicador de eficiência.
 330 | 
 331 | ### mcdata.recipes
 332 | Receitas ordenadas por ID.
 333 | 
 334 | ### mcdata.instruments
 335 | Ferramentas ordenadas por ID.
 336 | 
 337 | ### mcdata.biomes
 338 | Biomas ordenados por ID.
 339 | 
 340 | ### mcdata.entities
 341 | Entidades ordenadas por ID.
 342 | 
 343 | ## Clases
 344 | 
 345 | ### vec3
 346 | 
 347 | Veja [andrewrk/node-vec3](https://github.com/andrewrk/node-vec3)
 348 | 
 349 | Todos os pontos no mineflayer são instâncias dessa classe.
 350 | 
 351 | - x - sul
 352 | - y - para cima
 353 | - z - oeste
 354 | 
 355 | Funções e métodos que requerem um ponto aceitam instâncias `Vec3`, uma matriz com 3 valores e um objeto com as propriedades `x`, `y` e `z`.
 356 | 
 357 | ### mineflayer.Location
 358 | 
 359 | ### Entity
 360 | 
 361 | Entidades representam jogadores, mobs e objetos. Elas são emitidas em muitos eventos, mas você pode acessar sua própria entidade com `bot.entity`.
 362 | Veja [prismarine-entity](https://github.com/PrismarineJS/prismarine-entity)
 363 | 
 364 | ### Block
 365 | 
 366 | Veja [prismarine-block](https://github.com/PrismarineJS/prismarine-block)
 367 | 
 368 | Além disso, `block.blockEntity` é um campo adicional com os dados da entidade do bloco em formato de `Object`.
 369 | ```js
 370 | // sign.blockEntity
 371 | {
 372 |   x: -53,
 373 |   y: 88,
 374 |   z: 66,
 375 |   id: 'minecraft:sign', // 'Sign' in 1.10
 376 |   Text1: { toString: Function }, // ChatMessage object
 377 |   Text2: { toString: Function }, // ChatMessage object
 378 |   Text3: { toString: Function }, // ChatMessage object
 379 |   Text4: { toString: Function } // ChatMessage object
 380 | }
 381 | ```
 382 | 
 383 | ### Biome
 384 | 
 385 | Veja [prismarine-biome](https://github.com/PrismarineJS/prismarine-biome)
 386 | 
 387 | ### Item
 388 | 
 389 | Veja [prismarine-item](https://github.com/PrismarineJS/prismarine-item)
 390 | 
 391 | ### windows.Window (base class)
 392 | 
 393 | Veja [prismarine-windows](https://github.com/PrismarineJS/prismarine-windows)
 394 | 
 395 | #### window.deposit(itemType, metadata, count, [callback])
 396 | 
 397 | Esta função também retorna uma `Promise`, com `void` como argumento ao ser concluída.
 398 | 
 399 | - `itemType` - ID numérico do item.
 400 | - `metadata` - valor numérico. `null` significa que qualquer valor coincide.
 401 | - `count` - quantos itens devem ser depositados. `null` é um alias para 1.
 402 | - `callback(err)` - (opcional) - executado ao ser concluída.
 403 | 
 404 | #### window.withdraw(itemType, metadata, count, [callback])
 405 | 
 406 | Esta função também retorna uma `Promise`, com `void` como argumento ao ser concluída.
 407 | 
 408 |  * `itemType` - ID numérico do item
 409 |  * `metadata` - valor numérico. `null` significa que qualquer valor é correspondente.
 410 |  * `count` - quantos itens devem ser retirados. `null` é um alias para 1.
 411 |  * `callback(err)` - (opcional) - executado ao finalizar
 412 | 
 413 | #### window.close()
 414 | 
 415 | Fecha a interface/janela.
 416 | 
 417 | ### Recipe
 418 | 
 419 | Veja [prismarine-recipe](https://github.com/PrismarineJS/prismarine-recipe).
 420 | 
 421 | ### mineflayer.Container
 422 | 
 423 | Estende windows.Window para baús, dispensadores, etc...
 424 | Veja `bot.openContainer(blocoDoBaú ou entidadeDeCarrinhoDeMinério)`.
 425 | 
 426 | ### mineflayer.Furnace
 427 | 
 428 | Estende windows.Window para fornalhas, fundidores, etc...
 429 | Veja `bot.openFurnace(blocoDaFornalha)`.
 430 | 
 431 | #### Furnace "update"
 432 | 
 433 | É emitido quando `fornalha.combustível` e/ou `fornalha.progresso` são atualizados.
 434 | 
 435 | #### furnace.takeInput([callback])
 436 | 
 437 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
 438 | 
 439 |  * `callback(err, item)`
 440 | 
 441 | #### furnace.takeFuel([callback])
 442 | 
 443 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
 444 | 
 445 |  * `callback(err, item)`
 446 | 
 447 | #### furnace.takeOutput([callback])
 448 | 
 449 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
 450 | 
 451 |  * `callback(err, item)`
 452 | 
 453 | #### furnace.putInput(itemType, metadata, count, [cb])
 454 | 
 455 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
 456 | 
 457 | #### furnace.putFuel(itemType, metadata, count, [cb])
 458 | 
 459 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
 460 | 
 461 | #### furnace.inputItem()
 462 | 
 463 | Retorna uma instância `Item` que é o item de entrada.
 464 | 
 465 | #### furnace.fuelItem()
 466 | 
 467 | Retorna uma instância `Item` que é o combustível.
 468 | 
 469 | #### furnace.outputItem()
 470 | 
 471 | Retorna uma instância `Item` que é o item de saída.
 472 | 
 473 | #### furnace.fuel
 474 | 
 475 | Quanto combustível resta, variando de 0 a 1.
 476 | 
 477 | #### furnace.progress
 478 | 
 479 | Quanto o item está avançado no processo, variando de 0 a 1.
 480 | 
 481 | ### mineflayer.EnchantmentTable
 482 | 
 483 | Estende windows.Window para mesas de encantamento.
 484 | Veja `bot.openEnchantmentTable(blocoDaMesaDeEncantamento)`.
 485 | 
 486 | #### enchantmentTable "ready"
 487 | 
 488 | É emitido quando `mesaDeEncantamento.encantamentos` está completo e você pode escolher um encantamento executando `mesaDeEncantamento.encantar(escolha)`.
 489 | 
 490 | #### enchantmentTable.targetItem()
 491 | 
 492 | Retorna os itens de entrada e saída.
 493 | 
 494 | #### enchantmentTable.xpseed
 495 | 
 496 | A semente de XP de 16 bits enviada pelo servidor.
 497 | 
 498 | #### enchantmentTable.enchantments
 499 | 
 500 | Array de comprimento 3 com três encantamentos que você pode escolher.
 501 | `level` pode ser -1 se o servidor ainda não enviou os dados.
 502 | 
 503 | Parece com:
 504 | 
 505 | ```js
 506 | [
 507 |   {
 508 |     level: 3
 509 |   },
 510 |   {
 511 |     level: 4
 512 |   },
 513 |   {
 514 |     level: 9
 515 |   }
 516 | ]
 517 | ```
 518 | 
 519 | #### enchantmentTable.enchant(choice, [callback])
 520 | 
 521 | Esta função também retorna uma `Promise`, com o `item` como argumento quando concluída.
 522 | 
 523 | * `escolha` - [0-2], o índice do encantamento que você deseja escolher.
 524 | * `callback(err, item)` - (opcional) executado ao finalizar.
 525 | 
 526 | #### enchantmentTable.takeTargetItem([callback])
 527 | 
 528 | Esta função também retorna uma `Promise`, com o `item` como argumento quando concluída.
 529 | 
 530 | * `callback(err, item)`
 531 | 
 532 | #### enchantmentTable.putTargetItem(item, [callback])
 533 | 
 534 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
 535 | 
 536 | * `callback(err)`
 537 | 
 538 | #### enchantmentTable.putLapis(item, [callback])
 539 | 
 540 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
 541 | 
 542 | * `callback(err)`
 543 | 
 544 | ### mineflayer.anvil
 545 | 
 546 | Estende a janela de janelas para bigornas.
 547 | Veja `bot.openAnvil(anvilBlock)`.
 548 | 
 549 | #### anvil.combine(itemUm, itemDois[, nome, callback])
 550 | 
 551 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
 552 | 
 553 | * `callback(err)` - para usar o retorno de chamada, o nome deve estar vazio ('').
 554 | 
 555 | #### anvil.combine(item[, nome, callback])
 556 | 
 557 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
 558 | 
 559 | * `callback(err)`
 560 | 
 561 | #### villager "ready"
 562 | 
 563 | É emitido quando `vilarejo.trocas` foram carregadas.
 564 | 
 565 | #### villager.trades
 566 | 
 567 | Array de negociações
 568 | 
 569 | Semelhante a:
 570 | 
 571 | ```js
 572 | [
 573 |   {
 574 |     firstInput: Item,
 575 |     output: Item,
 576 |     hasSecondItem: false,
 577 |     secondaryInput: null,
 578 |     disabled: false,
 579 |     tooluses: 0,
 580 |     maxTradeuses: 7
 581 |   },
 582 |   {
 583 |     firstInput: Item,
 584 |     output: Item,
 585 |     hasSecondItem: false,
 586 |     secondaryInput: null,
 587 |     disabled: false,
 588 |     tooluses: 0,
 589 |     maxTradeuses: 7
 590 |   },
 591 |   {
 592 |     firstInput: Item,
 593 |     output: Item,
 594 |     hasSecondItem: true,
 595 |     secondaryInput: Item,
 596 |     disabled: false,
 597 |     tooluses: 0,
 598 |     maxTradeuses: 7
 599 |   }
 600 | ]
 601 | ```
 602 | 
 603 | #### villager.trade(tradeIndex, [times], [cb])
 604 | É o mesmo que [bot.trade(villagerInstance, tradeIndex, [times], [cb])](#bottradevillagerinstance-tradeindex-times-cb)
 605 | 
 606 | ### mineflayer.ScoreBoard
 607 | 
 608 | #### ScoreBoard.name
 609 | 
 610 | Nome do placar.
 611 | 
 612 | #### ScoreBoard.title
 613 | 
 614 | O título do placar (nem sempre é o mesmo que o nome).
 615 | 
 616 | #### ScoreBoard.itemsMap
 617 | 
 618 | Um objeto com todos os itens do placar nele.
 619 | ```js
 620 | {
 621 |   wvffle: { name: 'wvffle', value: 3 },
 622 |   dzikoysk: { name: 'dzikoysk', value: 6 }
 623 | }
 624 | ```
 625 | 
 626 | #### ScoreBoard.items
 627 | 
 628 | Uma matriz com todos os itens no placar.
 629 | ```js
 630 | [
 631 |   { name: 'dzikoysk', value: 6 },
 632 |   { name: 'wvffle', value: 3 }
 633 | ]
 634 | ```
 635 | 
 636 | ### mineflayer.BossBar
 637 | 
 638 | #### BossBar.title
 639 | 
 640 | Título da barra de vida do chefe, instância de ChatMessage
 641 | 
 642 | #### BossBar.health
 643 | 
 644 | Porcentagem da vida do chefe, de `0` a `1`
 645 | 
 646 | #### BossBar.dividers
 647 | 
 648 | Número de divisores na barra, pode ser `0`, `6`, `10`, `12` ou `20`
 649 | 
 650 | #### BossBar.entityUUID
 651 | 
 652 | UUID da entidade do chefe
 653 | 
 654 | #### BossBar.shouldDarkenSky
 655 | 
 656 | Determina se o céu deve escurecer ou não
 657 | 
 658 | #### BossBar.isDragonBar
 659 | 
 660 | Determina se a barra é a barra de vida do dragão
 661 | 
 662 | #### BossBar.createFog
 663 | 
 664 | Determina se a barra cria neblina ou não
 665 | 
 666 | #### BossBar.color
 667 | 
 668 | Determina el color de la barra entre `pink`, `blue`, `red`, `green`, `yellow`, `purple` y `white` (`rosa`, `azul`, `rojo`, `verde`, `amarillo`, `morado` y `blanco`)
 669 | 
 670 | ## Bot
 671 | 
 672 | ### mineflayer.createBot(options)
 673 | 
 674 | Crie e retorne uma instância da classe Bot.
 675 | 
 676 | `options` é um objeto que contém propriedades opcionais:
 677 |  * username : (usuário) o valor padrão é 'Player'
 678 |  * port : (porta) o valor padrão é 25565
 679 |  * password : (senha) pode ser omitida (se os tokens também forem omitidos, tentará conectar no modo offline)
 680 |  * host : (ip) o valor padrão é localhost
 681 |  * version : se omitido, tentará determinar automaticamente a versão. Por exemplo: "1.12.2"
 682 |  * auth : (autenticação) o valor padrão é 'mojang', também pode ser 'microsoft'
 683 |  * clientToken : gerado se uma senha for fornecida
 684 |  * accessToken : gerado se uma senha for fornecida
 685 |  * logErrors : o valor padrão é true, retém erros e os imprime
 686 |  * hideErrors : o valor padrão é true, para ocultar erros (mesmo se logErrors for true)
 687 |  * keepAlive : envia pacotes keepAlive: o valor padrão é true
 688 |  * checkTimeoutInterval : o valor padrão é `30*1000` (30s), verifica se o pacote keepAlive foi recebido neste período, desconecta o bot se não for recebido.
 689 |  * loadInternalPlugins : o valor padrão é true
 690 |  * storageBuilder : uma função opcional, que recebe a versão e o nome do mundo (worldName) como argumentos e retorna uma instância de algo com a mesma API que prismarine-provider-anvil. Será usado para salvar o mundo.
 691 |  * client : uma instância de node-minecraft-protocol, se não for especificado, o mineflayer criará seu próprio cliente. Isso é útil para usar o mineflayer por meio de um proxy de vários clientes ou para um cliente vanilla e um cliente mineflayer.
 692 |  * plugins : objeto: o valor padrão é {}
 693 |    - pluginName : false : não carrega o plugin interno com esse nome, por exemplo, `pluginName`
 694 |    - pluginName : true : carrega o plugin interno com esse nome, por exemplo, `pluginName`, mesmo se loadInternalPlugins estiver definido como false
 695 |    - pluginName : função para introduzir : carrega um plugin de terceiros (externo), anulando o plugin interno com o mesmo nome, por exemplo, `pluginName`
 696 |  * physicsEnabled : o valor padrão é true, se o bot deve ser afetado pela física, pode ser modificado através de bot.physicsEnabled
 697 |  * [chat](#bot.settings.chat)
 698 |  * [colorsEnabled](#bot.settings.colorsEnabled)
 699 |  * [viewDistance](#bot.settings.viewDistance)
 700 |  * [difficulty](#bot.settings.difficulty)
 701 |  * [skinParts](#bot.settings.skinParts)
 702 |  * chatLengthLimit : o valor máximo de caracteres que podem ser enviados com uma única mensagem. Se não for especificado, será 100 em versões anteriores à 1.11 e 256 na 1.11 e posteriores.
 703 | 
 704 | ### Properties
 705 | 
 706 | #### bot.world
 707 | 
 708 | Uma representação sincronizada do mundo. Confira a documentação em http://github.com/PrismarineJS/prismarine-world
 709 | 
 710 | #### world "blockUpdate" (oldBlock, newBlock)
 711 | 
 712 | É emitido quando um bloco é atualizado. Retorna o bloco antigo `oldBlock` e o novo bloco `newBlock`.
 713 | 
 714 | Observação: `oldBlock` pode ser `null`.
 715 | 
 716 | #### world "blockUpdate:(x, y, z)" (oldBlock, newBlock)
 717 | 
 718 | É emitido quando um bloco em uma coordenada é atualizado. Retorna o bloco antigo `oldBlock` e o novo bloco `newBlock`.
 719 | 
 720 | Observação: `oldBlock` pode ser `null`.
 721 | 
 722 | 
 723 | #### bot.entity
 724 | 
 725 | Sua própria entidade. Consulte `Entity`.
 726 | 
 727 | #### bot.entities
 728 | 
 729 | Todas as entidades próximas. Este objeto é um mapa de entityId (id da entidade) para entity (entidade).
 730 | 
 731 | #### bot.username
 732 | 
 733 | Use isso para descobrir seu próprio nome.
 734 | 
 735 | #### bot.spawnPoint
 736 | 
 737 | Coordenadas do ponto de spawn, para onde todas as bússolas apontam.
 738 | 
 739 | #### bot.heldItem
 740 | 
 741 | O item na mão do bot, apresentado como uma instância [prismarine-item](https://github.com/PrismarineJS/prismarine-item) especificado com seus metadados, dados NBT, etc.
 742 | 
 743 | #### bot.game.levelType
 744 | 
 745 | Tipo do nível do jogo.
 746 | 
 747 | #### bot.game.dimension
 748 | 
 749 | Tipo da dimensão.
 750 | 
 751 | #### bot.game.difficulty
 752 | 
 753 | Tipo de dificuldade do jogo.
 754 | 
 755 | #### bot.game.gameMode
 756 | 
 757 | Modo de jogo do bot.
 758 | 
 759 | #### bot.game.hardcore
 760 | 
 761 | Se o jogo está no modo hardcore ou não.
 762 | 
 763 | #### bot.game.maxPlayers
 764 | 
 765 | O número máximo de jogadores no jogo.
 766 | 
 767 | #### bot.game.serverBrand
 768 | 
 769 | A marca do servidor.
 770 | 
 771 | #### bot.physicsEnabled
 772 | 
 773 | Se a física deve ser habilitada, o valor padrão é true.
 774 | 
 775 | #### bot.player
 776 | 
 777 | Objeto do jogador do bot
 778 | ```js
 779 | {
 780 |   username: 'player',
 781 |   displayName: { toString: Function }, // Objeto ChatMessage.
 782 |   gamemode: 0,
 783 |   ping: 28,
 784 |   entity: entity // nulo se você estiver muito longe (fora da zona renderizada)
 785 | }
 786 | ```
 787 | 
 788 | #### bot.players
 789 | 
 790 | Mapa dos nomes dos jogadores no jogo.
 791 | 
 792 | #### bot.isRaining
 793 | 
 794 | Determina se está chovendo.
 795 | 
 796 | #### bot.rainState
 797 | 
 798 | Um número indicando o nível de chuva atual. Se não estiver chovendo, este valor será 0. Quando começa a chover, o valor aumenta gradualmente para 1. E quando para de chover, diminui gradualmente para 0.
 799 | 
 800 | Cada vez que `bot.rainState` muda, o evento "weatherUpdate" é emitido.
 801 | 
 802 | #### bot.thunderState
 803 | 
 804 | Um número indicando o nível de tempestade de raios atual. Se não houver tempestade, este valor será 0. Quando começa uma tempestade, o valor aumenta gradualmente para 1. E quando a tempestade para, diminui gradualmente para 0.
 805 | 
 806 | Cada vez que `bot.thunderState` muda, o evento "weatherUpdate" é emitido.
 807 | 
 808 | Isso é semelhante ao `bot.rainState`, mas para tempestades de raios. Para tempestades de raios, `bot.rainState` e `bot.thunderState` mudarão.
 809 | 
 810 | #### bot.chatPatterns
 811 | 
 812 | Isso é uma matriz de objetos de padrões, no seguinte formato:
 813 | { /regex/, "chattype", "descrição")
 814 |  * /regex/ - um padrão regex, deve ter pelo menos dois grupos de captura.
 815 |  * 'chattype' - o tipo de chat que deve corresponder, pode ser "chat" (conversa) ou "whisper" (sussurro), ou qualquer outro.
 816 |  * 'descrição' - descrição do padrão, opcional.
 817 | 
 818 | #### bot.settings.chat
 819 | 
 820 | Opções:
 821 | 
 822 |  * `enabled` (ativado) (padrão)
 823 |  * `commandsOnly` (apenasComandos)
 824 |  * `disabled` (desativado)
 825 | 
 826 | #### bot.settings.colorsEnabled
 827 | 
 828 | Seu valor padrão é verdadeiro, se deve receber códigos de cor do servidor.
 829 | 
 830 | #### bot.settings.viewDistance
 831 | 
 832 | Opções:
 833 |  * `far` (distante) (padrão)
 834 |  * `normal`
 835 |  * `short` (curto)
 836 |  * `tiny` (minúsculo)
 837 | 
 838 | #### bot.settings.difficulty
 839 | 
 840 | O mesmo que em server.properties.
 841 | 
 842 | #### bot.settings.skinParts
 843 | 
 844 | Esses booleanos controlam se as partes externas da skin do jogador devem ser visíveis.
 845 | 
 846 | ##### bot.settings.skinParts.showCape
 847 | 
 848 | Se você tem uma capa, pode desativá-la alterando isso para falso.
 849 | 
 850 | ##### bot.settings.skinParts.showJacket
 851 | 
 852 | Se a parte externa do peito deve ser mostrada.
 853 | 
 854 | ##### bot.settings.skinParts.showLeftSleeve
 855 | 
 856 | Se a parte externa do braço esquerdo deve ser mostrada.
 857 | 
 858 | ##### bot.settings.skinParts.showRightSleeve
 859 | 
 860 | Se a parte externa do braço direito deve ser mostrada.
 861 | 
 862 | ##### bot.settings.skinParts.showLeftPants
 863 | 
 864 | Se a parte externa da perna esquerda deve ser mostrada.
 865 | 
 866 | ##### bot.settings.skinParts.showRightPants
 867 | 
 868 | Se a parte externa da perna direita deve ser mostrada.
 869 | 
 870 | ##### bot.settings.skinParts.showHat
 871 | 
 872 | Se a parte externa da cabeça deve ser mostrada.
 873 | 
 874 | #### bot.experience.level
 875 | 
 876 | O nível de experiência do bot.
 877 | 
 878 | #### bot.experience.points
 879 | 
 880 | Total de pontos de experiência do bot.
 881 | 
 882 | #### bot.experience.progress
 883 | 
 884 | Entre 0 e 1 - a quantidade que falta para atingir o próximo nível.
 885 | 
 886 | #### bot.health
 887 | 
 888 | Números entre 0 e 20 representando o número de metades de coração.
 889 | 
 890 | #### bot.food
 891 | 
 892 | Números de 0 a 20 representando o número de metades de coxas de frango.
 893 | 
 894 | #### bot.foodSaturation
 895 | 
 896 | A saturação atua como um "suprimento" de comida. Se a saturação for maior que 0, o nível de comida não diminuirá. Os jogadores que entram no jogo têm automaticamente uma saturação de 5,0. Comer aumenta a saturação e o nível de comida.
 897 | 
 898 | #### bot.oxygenLevel
 899 | 
 900 | Número de 0 a 20 representando o número de metades de bolhas do nível de oxigênio.
 901 | 
 902 | #### bot.physics
 903 | 
 904 | Modifique esses números para alterar a gravidade, velocidade de salto, velocidade terminal, etc. Faça isso por sua própria conta e risco.
 905 | 
 906 | #### bot.simpleClick.leftMouse (slot)
 907 | 
 908 | Abstração de `bot.clickWindow(slot, 0, 0)`
 909 | 
 910 | #### bot.simpleClick.rightMouse (slot)
 911 | 
 912 | Abstração de `bot.clickWindow(slot, 1, 0)`
 913 | 
 914 | #### bot.time.doDaylightCycle
 915 | 
 916 | Se o gamerule doDaylightCycle está ativado ou desativado.
 917 | 
 918 | #### bot.time.bigTime
 919 | 
 920 | O número total de ticks desde o dia 0.
 921 | 
 922 | Este valor é do tipo BigInt e é muito preciso, mesmo com valores muito grandes (mais de 2^51 - 1 ticks).
 923 | 
 924 | #### bot.time.time
 925 | 
 926 | O número total de ticks desde o dia 0.
 927 | 
 928 | Como o limite de números em JavaScript é 2^51 - 1, bot.time.time é menos preciso em valores mais altos que esse limite. Portanto, é recomendado o uso de bot.time.bigTime. Sendo realista, provavelmente você nunca terá que usar bot.time.bigTime, já que ele naturalmente alcançará 2^51 - 1 ticks após cerca de 14.280.821 anos reais.
 929 | 
 930 | #### bot.time.timeOfDay
 931 | 
 932 | Hora do dia, em ticks.
 933 | 
 934 | A hora é baseada em ticks, onde 20 ticks ocorrem a cada segundo. Há 24.000 ticks em um dia, o que torna os dias em Minecraft exatamente 20 minutos. A hora do dia é baseada no módulo 24.000 do timestamp. 0 é o amanhecer, 6.000 é o meio-dia, 12.000 é o anoitecer e 18.000 é a meia-noite.
 935 | 
 936 | #### bot.time.day
 937 | 
 938 | Dia do mundo.
 939 | 
 940 | #### bot.time.isDay
 941 | 
 942 | Se é dia ou não.
 943 | 
 944 | Baseado no horário atual estar entre 13.000 e 23.000 ticks.
 945 | 
 946 | #### bot.time.moonPhase
 947 | 
 948 | Fase da lua.
 949 | 
 950 | De 0 a 7, onde 0 é lua cheia.
 951 | 
 952 | #### bot.time.bigAge
 953 | 
 954 | Idade do mundo, em ticks.
 955 | 
 956 | Este valor é do tipo BigInt e é preciso mesmo em valores muito altos (mais de 2^51 - 1 ticks).
 957 | 
 958 | #### bot.time.age
 959 | 
 960 | Idade do mundo, em ticks.
 961 | 
 962 | Como o limite de números em JavaScript é 2^51 - 1, bot.time.age é menos preciso em valores mais altos que esse limite. Portanto, é recomendado o uso de bot.time.bigAge. Sendo realista, provavelmente você nunca terá que usar bot.time.bigAge, já que ele naturalmente alcançará 2^51 - 1 ticks após cerca de 14.280.821 anos reais.
 963 | 
 964 | #### bot.quickBarSlot
 965 | 
 966 | Qual slot está selecionado na barra de acesso rápido (0 - 8).
 967 | 
 968 | #### bot.inventory
 969 | 
 970 | Uma instância de janela (interface) representando seu inventário.
 971 | 
 972 | #### bot.targetDigBlock
 973 | 
 974 | O bloco que você está quebrando no momento, ou `null`.
 975 | 
 976 | #### bot.isSleeping
 977 | 
 978 | Booleano representando se você está dormindo ou não.
 979 | 
 980 | #### bot.scoreboards
 981 | 
 982 | Todos os placares que o bot conhece em um objeto com o formato nome do placar -> placar.
 983 | 
 984 | #### bot.scoreboard
 985 | 
 986 | Todos os placares que o bot conhece em um objeto com o formato exibição de placar -> placar.
 987 | - `belowName` - placar exibido abaixo do nome
 988 | - `sidebar` - placar exibido na barra lateral
 989 | - `list` - placar exibido na lista
 990 | - `0-18` - entradas definidas no protocolo
 991 | 
 992 | #### bot.controlState
 993 | 
 994 | Um objeto que contém os estados de controle principais: ['frente', 'trás', 'esquerda', 'direita', 'pular', 'correr', 'agachar'].
 995 | 
 996 | Esses valores podem ser usados em bot.setControlState.
 997 | 
 998 | ### Events
 999 | 
1000 | #### "chat" (username, message, translate, jsonMsg, matches)
1001 | 
1002 | Somente é emitido quando um jogador conversa publicamente.
1003 | - `username` - o jogador que enviou a mensagem (compare com `bot.username` para ignorar suas próprias mensagens).
1004 | - `message` - mensagem sem códigos de cores.
1005 | - `translate` - tipo de mensagem no chat. Nulo para a maioria das mensagens do Bukkit.
1006 | - `jsonMsg` - mensagem JSON não modificada do servidor.
1007 | - `matches` - matriz de correspondências retornadas pelas expressões regulares. Pode ser nulo.
1008 | 
1009 | #### "whisper" (username, message, translate, jsonMsg, matches)
1010 | 
1011 | Somente é emitido quando um jogador conversa com você em particular (sussurro).
1012 | - `username` - o jogador que enviou a mensagem.
1013 | - `message` - mensagem sem códigos de cores.
1014 | - `translate` - tipo de mensagem no chat. Nulo para a maioria das mensagens do Bukkit.
1015 | - `jsonMsg` - mensagem JSON não modificada do servidor.
1016 | - `matches` - matriz de correspondências retornadas pelas expressões regulares. Pode ser nulo.
1017 | 
1018 | #### "actionBar" (jsonMsg)
1019 | 
1020 | Este evento é emitido para cada mensagem do servidor que aparece na barra de ação.
1021 | 
1022 |  * `jsonMsg` - mensagem JSON não modificada do servidor
1023 | 
1024 | #### "message" (jsonMsg, position)
1025 | 
1026 | Este evento é emitido para cada mensagem do servidor, incluindo chats.
1027 | 
1028 |  * `jsonMsg` - mensagem JSON não modificada do servidor
1029 | 
1030 |  * `position` - (>= 1.8.1): a posição da mensagem de chat pode ser
1031 |    * chat
1032 |    * sistema
1033 |    * informações_do_jogo
1034 | 
1035 | #### "messagestr" (message, messagePosition, jsonMsg)
1036 | 
1037 | Similar a "message", mas converte a mensagem JSON em uma string antes de ser emitida.
1038 | 
1039 | #### "inject_allowed"
1040 | 
1041 | Este evento é emitido quando o arquivo index é carregado. Você pode carregar mcData ou os plugins aqui, mas é melhor esperar pelo evento "spawn".
1042 | 
1043 | #### "login"
1044 | 
1045 | É emitido após se registrar no servidor. No entanto, provavelmente você desejará aguardar o evento "spawn" antes de fazer qualquer coisa.
1046 | 
1047 | #### "spawn"
1048 | 
1049 | É emitido quando você se registra e aparece no mundo ou quando ressurge após a morte. Normalmente, este é o evento que você deseja receber antes de fazer qualquer coisa no servidor.
1050 | 
1051 | #### "respawn"
1052 | 
1053 | É emitido ao mudar de dimensões ou imediatamente antes de aparecer. Normalmente, você vai querer ignorar esse evento e esperar até que o evento "spawn" seja emitido.
1054 | 
1055 | #### "game"
1056 | 
1057 | É emitido quando o servidor altera algumas de suas propriedades.
1058 | 
1059 | #### "resourcePack" (url, hash)
1060 | 
1061 | É emitido quando o servidor envia um pacote de recursos.
1062 | 
1063 | #### "title" (title, type)
1064 | 
1065 | É emitido quando o servidor exibe um título.
1066 | 
1067 |  * `title` - texto do título
1068 |  * `type` - tipo do título "subtitle" ou "title"
1069 | 
1070 | #### "rain"
1071 | 
1072 | É emitido quando começa a chover ou quando para de chover. Se estiver chovendo quando você entrar no servidor, este evento será emitido.
1073 | 
1074 | #### "weatherUpdate"
1075 | 
1076 | É emitido quando o estado de chuva (`bot.thunderState` ou `bot.rainState`) muda. Se estiver chovendo quando você entrar no servidor, este evento será emitido.
1077 | 
1078 | #### "time"
1079 | 
1080 | É emitido quando o servidor altera ou atualiza a hora. Veja `bot.time`.
1081 | 
1082 | #### "kicked" (reason, loggedIn)
1083 | 
1084 | É emitido quando o bot é expulso do servidor. `motivo` é uma mensagem de chat com o motivo da expulsão. `loggedIn` será `true` se o cliente já estava conectado quando foi expulso e `false` se o cliente foi expulso durante o processo de registro.
1085 | 
1086 | #### "end"
1087 | 
1088 | É emitido quando você não está mais conectado ao servidor.
1089 | 
1090 | #### "error" (err)
1091 | 
1092 | É emitido quando ocorre um erro.
1093 | 
1094 | #### "spawnReset"
1095 | 
1096 | É emitido quando você não pode mais ressurgir em sua cama e seu ponto de ressurgimento é redefinido.
1097 | 
1098 | #### "death"
1099 | 
1100 | É emitido ao morrer.
1101 | 
1102 | #### "health"
1103 | 
1104 | É emitido quando sua vida ou nível de comida mudam.
1105 | 
1106 | #### "breath"
1107 | 
1108 | É emitido quando seu nível de oxigênio muda.
1109 | 
1110 | #### "entitySwingArm" (entity)
1111 | 
1112 | É emitido quando uma entidade move o braço.
1113 | 
1114 | #### "entityHurt" (entity)
1115 | 
1116 | É emitido quando uma entidade se machuca.
1117 | 
1118 | #### "entityDead" (entity)
1119 | 
1120 | É emitido quando uma entidade morre.
1121 | 
1122 | #### "entityTaming" (entity)
1123 | 
1124 | É emitido quando uma entidade está sendo domesticada.
1125 | 
1126 | #### "entityTamed" (entity)
1127 | 
1128 | É emitido quando uma entidade é domesticada.
1129 | 
1130 | #### "entityShakingOffWater" (entity)
1131 | 
1132 | É emitido quando uma entidade se sacode para se secar (por exemplo, lobos).
1133 | 
1134 | #### "entityEatingGrass" (entity)
1135 | 
1136 | É emitido quando uma entidade come grama.
1137 | 
1138 | #### "entityWake" (entity)
1139 | 
1140 | É emitido quando uma entidade acorda.
1141 | 
1142 | #### "entityEat" (entity)
1143 | 
1144 | É emitido quando uma entidade come.
1145 | 
1146 | #### "entityCriticalEffect" (entity)
1147 | 
1148 | É emitido quando uma entidade recebe um ataque crítico.
1149 | 
1150 | #### "entityMagicCriticalEffect" (entity)
1151 | 
1152 | É emitido quando uma entidade recebe um ataque crítico com poções.
1153 | 
1154 | #### "entityCrouch" (entity)
1155 | 
1156 | É emitido quando uma entidade se agacha.
1157 | 
1158 | #### "entityUncrouch" (entity)
1159 | 
1160 | É emitido quando uma entidade para de se agachar.
1161 | 
1162 | #### "entityEquip" (entity)
1163 | 
1164 | É emitido quando uma entidade equipa algo.
1165 | 
1166 | #### "entitySleep" (entity)
1167 | 
1168 | É emitido quando uma entidade dorme.
1169 | 
1170 | #### "entitySpawn" (entity)
1171 | 
1172 | É emitido quando uma entidade aparece.
1173 | 
1174 | #### "itemDrop" (entity)
1175 | 
1176 | É emitido quando uma entidade solta itens (os itens também são entidades).
1177 | 
1178 | #### "playerCollect" (collector, collected)
1179 | 
1180 | É emitido quando uma entidade coleta um item.
1181 | 
1182 |  * `coletor` - a entidade que coletou o item.
1183 |  * `coletado` - a entidade que foi coletada (o item).
1184 | 
1185 | #### "entityGone" (entity)
1186 | 
1187 | É emitido quando uma entidade desaparece (morre, despawna).
1188 | 
1189 | #### "entityMoved" (entity)
1190 | 
1191 | É emitido quando uma entidade se move.
1192 | 
1193 | #### "entityDetach" (entity, vehicle)
1194 | 
1195 | É emitido quando uma entidade sai de um veículo.
1196 | 
1197 | #### "entityAttach" (entity, vehicle)
1198 | 
1199 | É emitido quando uma entidade entra em um veículo.
1200 | 
1201 |  * `entidade` - a entidade que entrou
1202 |  * `veículo` - a entidade do veículo (carrinho, cavalo)
1203 | 
1204 | #### "entityUpdate" (entity)
1205 | 
1206 | É emitido quando uma entidade atualiza uma de suas propriedades.
1207 | 
1208 | #### "entityEffect" (entity, effect)
1209 | 
1210 | É emitido quando uma entidade recebe um efeito.
1211 | 
1212 | #### "entityEffectEnd" (entity, effect)
1213 | 
1214 | É emitido quando um efeito em uma entidade termina.
1215 | 
1216 | #### "playerJoined" (player)
1217 | 
1218 | É emitido quando um jogador entra no servidor.
1219 | 
1220 | #### "playerUpdated" (player)
1221 | 
1222 | É emitido quando um jogador atualiza uma de suas propriedades.
1223 | 
1224 | #### "playerLeft" (player)
1225 | 
1226 | É emitido quando um jogador se desconecta do servidor.
1227 | 
1228 | #### "blockUpdate" (oldBlock, newBlock)
1229 | 
1230 | (É melhor usar este evento a partir de bot.world em vez de bot diretamente) É emitido quando um bloco é atualizado. Retorna `blocoAntigo` e `blocoNovo`.
1231 | 
1232 | Observação: `blocoAntigo` pode ser `null`.
1233 | 
1234 | #### "blockUpdate:(x, y, z)" (oldBlock, newBlock)
1235 | 
1236 | (É melhor usar este evento a partir de bot.world em vez de bot diretamente) É emitido quando um bloco em uma coordenada específica é atualizado. Retorna `blocoAntigo` e `blocoNovo`.
1237 | 
1238 | Observação: `blocoAntigo` pode ser `null`.
1239 | 
1240 | #### "blockPlaced" (oldBlock, newBlock)
1241 | 
1242 | É emitido quando o bot coloca um bloco. Retorna `blocoAntigo` e `blocoNovo`.
1243 | 
1244 | Observação: `blocoAntigo` pode ser `null`.
1245 | 
1246 | #### "chunkColumnLoad" (point)
1247 | 
1248 | É emitido quando um chunk é carregado.
1249 | 
1250 | #### "chunkColumnUnload" (point)
1251 | 
1252 | É emitido quando um chunk é descarregado. `ponto` é a coordenada do canto do chunk com os valores x, y e z mais baixos.
1253 | 
1254 | #### "soundEffectHeard" (soundName, position, volume, pitch)
1255 | 
1256 | Isso ocorre quando o cliente ouve um efeito sonoro com um nome específico.
1257 | 
1258 |  * `nomeSom`: nome do efeito sonoro
1259 |  * `posição`: uma instância Vec3 indicando o ponto de onde o som originou
1260 |  * `volume`: volume em ponto flutuante, 1.0 é 100%
1261 |  * `altura`: pitch em números inteiros, 63 é 100%
1262 | 
1263 | #### "hardcodedSoundEffectHeard" (soundId, soundCategory, position, volume, pitch)
1264 | 
1265 | Isso ocorre quando o cliente ouve um efeito sonoro codificado.
1266 | 
1267 |    * `idSom`: ID do efeito sonoro
1268 |    * `categoriaSom`: categoria do efeito sonoro
1269 |    * `posição`: uma instância Vec3 indicando o ponto de onde o som originou
1270 |    * `volume`: volume em ponto flutuante, 1.0 é 100%
1271 |    * `altura`: pitch em números inteiros, 63 é 100%
1272 | 
1273 | #### "noteHeard" (block, instrument, pitch)
1274 | 
1275 | Isso ocorre quando um bloco de notas é disparado em algum lugar.
1276 | 
1277 |  * `bloco`: uma instância de Bloco, o bloco que emitiu o som
1278 |  * `instrumento`:
1279 |    - `id`: identificação numérica
1280 |    - `nome`: um dos seguintes [`harpa`, `contrabaixo`, `caixa de bateria`, `baquetas`, `bateria grave`]
1281 |  * `tom`: O tom da nota (entre 0 e 24, inclusivos, onde 0 é o mais baixo e 24 é o mais alto). Você pode ler mais (sobre como os valores de tom correspondem às notas na vida real) aqui: [Página oficial da Minecraft Wiki](http://minecraft.wiki/w/Note_Block).
1282 | 
1283 | #### "pistonMove" (block, isPulling, direction)
1284 | 
1285 | Isso ocorre quando um pistão se move.
1286 | 
1287 | #### "chestLidMove" (block, isOpen, block2)
1288 | 
1289 | Isso ocorre quando a tampa de um baú se move.
1290 | 
1291 | * `bloco`: uma instância de Bloco, o bloco da tampa que se moveu. O bloco à direita se for um baú duplo.
1292 | * `estáAberto`: número de jogadores que têm o baú aberto.
1293 | * `bloco2`: uma instância de Bloco, a outra metade do bloco onde a tampa se moveu. Nulo se não for um baú duplo.
1294 | 
1295 | #### "blockBreakProgressObserved" (block, destroyStage)
1296 | 
1297 | Isso ocorre quando o cliente observa um bloco enquanto ele está sendo quebrado.
1298 | 
1299 |  * `bloco`: uma instância de Bloco, o que está sendo quebrado.
1300 |  * `estágioDestruicao`: número inteiro correspondente ao progresso (0-9).
1301 | 
1302 | #### "blockBreakProgressEnd" (block)
1303 | 
1304 | Isso ocorre quando o cliente observa um bloco que termina de ser quebrado.
1305 | Isso ocorre quando o processo foi concluído ou cancelado.
1306 | 
1307 |  * `bloco`: uma instância de Bloco, o bloco que não está mais sendo quebrado.
1308 | 
1309 | #### "diggingCompleted" (block)
1310 | 
1311 | Isso ocorre quando a quebra de um bloco foi concluída.
1312 |  * `bloco` - o bloco que já não existe.
1313 | 
1314 | #### "diggingAborted" (block)
1315 | 
1316 | Isso ocorre quando o processo de quebra de um bloco foi abortado.
1317 |  * `bloco` - o bloco que ainda existe.
1318 | 
1319 | #### "move"
1320 | 
1321 | Se emite cuando o bot se move. Se deseja a posição atual, você pode usar `bot.entity.position` e se quiser descobrir a posição anterior, use `bot.entity.positon.minus(bot.entity.velocity)`.
1322 | 
1323 | #### "forcedMove"
1324 | 
1325 | Se emite quando o bot é movido forçadamente pelo servidor (teletransporte, spawn, ...). Se deseja a posição atual, use `bot.entity.position`.
1326 | 
1327 | #### "mount"
1328 | 
1329 | Se emite quando o bot sobe em uma entidade, como um minecart. Para acessar a entidade, use `bot.vehicle`.
1330 | 
1331 | Para subir em uma entidade, use `mount`.
1332 | 
1333 | #### "dismount" (vehicle)
1334 | 
1335 | Se emite quando você desce de uma entidade.
1336 | 
1337 | #### "windowOpen" (window)
1338 | 
1339 | Se emite quando você começa a usar uma mesa de criação, baú, mesa de poções, etc.
1340 | 
1341 | #### "windowClose" (window)
1342 | 
1343 | Se emite quando você não está mais usando uma mesa de criação, baú, etc.
1344 | 
1345 | #### "sleep"
1346 | 
1347 | Se emite quando você dorme.
1348 | 
1349 | #### "wake"
1350 | 
1351 | Se emite quando você acorda.
1352 | 
1353 | #### "experience"
1354 | 
1355 | Se emite quando `bot.experience.*` muda.
1356 | 
1357 | #### "scoreboardCreated" (scoreboard)
1358 | 
1359 | Se emite quando um placar é criado.
1360 | 
1361 | #### "scoreboardDeleted" (scoreboard)
1362 | 
1363 | Se emite quando um placar é excluído.
1364 | 
1365 | #### "scoreboardTitleChanged" (scoreboard)
1366 | 
1367 | Se emite quando o título de um placar é atualizado.
1368 | 
1369 | #### "scoreUpdated" (scoreboard, item)
1370 | 
1371 | Se emite quando a pontuação de um item no placar é atualizada.
1372 | 
1373 | #### "scoreRemoved" (scoreboard, item)
1374 | 
1375 | Se emite quando a pontuação de um item no placar é removida.
1376 | 
1377 | #### "scoreboardPosition" (position, scoreboard)
1378 | 
1379 | Se emite quando a posição de um placar é atualizada.
1380 | 
1381 | #### "bossBarCreated" (bossBar)
1382 | 
1383 | Se emite quando uma barra de vida de chefe é criada.
1384 | 
1385 | #### "bossBarDeleted" (bossBar)
1386 | 
1387 | Se emite quando uma barra é excluída.
1388 | 
1389 | #### "bossBarUpdated" (bossBar)
1390 | 
1391 | Se emite quando uma barra é atualizada.
1392 | 
1393 | #### "heldItemChanged" (heldItem)
1394 | 
1395 | Se emite quando o item que você está segurando muda.
1396 | 
1397 | #### "physicsTick" ()
1398 | 
1399 | Se emite a cada tick se bot.physicsEnabled estiver em true.
1400 | 
1401 | #### "chat:name" (matches)
1402 | 
1403 | Se emite quando todos os padrões de chat têm correspondências.
1404 | 
1405 | ### Functions
1406 | 
1407 | #### bot.blockAt(point, extraInfos=true)
1408 | 
1409 | Retorna o bloco no `point` (um Vec3) ou `null` se esse ponto não estiver carregado. Se `extraInfos` estiver definido como true, também retorna informações sobre placas, quadros e entidades de blocos (mais lento). Veja `Block`.
1410 | 
1411 | #### bot.waitForChunksToLoad(cb)
1412 | 
1413 | Essa função também retorna uma `Promise`, com `void` como argumento quando a carga dos chunks estiver completa.
1414 | 
1415 | O `cb` é executado quando bastantes chunks são carregados.
1416 | 
1417 | #### bot.blockInSight(maxSteps, vectorLength)
1418 | 
1419 | Obsoleto, usar `blockAtCursor` no lugar.
1420 | 
1421 | Retorna o bloco que está no cursor do bot ou `null`.
1422 |  * `maxSteps` - Número de passos do traçado de raios, o valor padrão é 256.
1423 |  * `vectorLength` - Comprimento do vetor do traçado de raios, o valor padrão é `5/16`.
1424 | 
1425 | #### bot.blockAtCursor(maxDistance=256)
1426 | 
1427 | Retorna o bloco que está no cursor do bot ou `null`.
1428 |  * `maxDistance` - Distância máxima à qual o bloco pode estar do olho, o valor padrão é 256.
1429 | 
1430 | #### bot.canSeeBlock(block)
1431 | 
1432 | Retorna verdadeiro ou falso dependendo se o bot pode ver o `block` (bloco).
1433 | 
1434 | #### bot.findBlocks(options)
1435 | 
1436 | Encontra os blocos mais próximos do ponto especificado.
1437 |  * `options` - Opções de pesquisa:
1438 |    - `point` - A posição a partir da qual começar a pesquisa (centro). Padrão: a posição do bot.
1439 |    - `matching` - Uma função que retorna verdadeiro se o bloco atender às condições. Também pode ser um ID de bloco ou uma matriz de IDs.
1440 |    - `useExtraInfo` - Pode ser de dois tipos para manter a compatibilidade inversa.
1441 |       - **boolean** - Você fornece sua função `matching` com mais informações - mais lento.
1442 |       - **function** - É feito em duas etapas, se o bloco atender às condições da função `matching`, ele passa para `useExtraInfo` com informações adicionais.
1443 |    - `maxDistance` - A distância máxima de pesquisa, padrão: 16.
1444 |    - `count` - Número de blocos a serem encontrados antes de retornar os resultados. Padrão: 1. Pode retornar menos se não houver blocos suficientes.
1445 | 
1446 | Retorna um array (pode estar vazio) com as coordenadas dos blocos encontrados (não retorna instâncias de blocos). O array é ordenado (os mais próximos primeiro).
1447 | 
1448 | #### bot.findBlock(options)
1449 | 
1450 | Semelhante a `bot.blockAt(bot.findBlocks(options)[0])`. Retorna um único bloco ou `null`.
1451 | 
1452 | #### bot.canDigBlock(block)
1453 | 
1454 | Retorna se o `block` está dentro do alcance e se pode ser escavado.
1455 | 
1456 | #### bot.recipesFor(itemType, metadata, minResultCount, craftingTable)
1457 | 
1458 | Retorna uma lista de instâncias `Recipe` (receita) que você pode usar para criar `itemType` com `metadata`.
1459 | 
1460 |  * `itemType` - ID numérico do item que deseja criar.
1461 |  * `metadata` - o valor numérico da metadados do item que deseja criar, `null` significa "com qualquer valor de metadados".
1462 |  * `minResultCount` - baseia-se no seu inventário atual, qualquer receita da lista retornada poderá produzir esse número de itens. `null` significa `1`.
1463 |  * `craftingTable` - uma instância `Block` (mesa de criação). Se for `null`, apenas receitas que podem ser feitas no inventário serão incluídas na lista.
1464 | 
1465 | #### bot.recipesAll(itemType, metadata, craftingTable)
1466 | 
1467 | Semelhante a bot.recipesFor, mas não verifica se o bot tem materiais suficientes para a receita.
1468 | 
1469 | #### bot.nearestEntity(match = (entity) => { return true })
1470 | 
1471 | Retorna a entidade mais próxima do bot, correspondendo à função (padrão: todas as entidades).
1472 | Retorna null se nenhuma entidade for encontrada.
1473 | 
1474 | ### Methods
1475 | 
1476 | #### bot.end()
1477 | 
1478 | Encerra a conexão com o servidor.
1479 | 
1480 | #### bot.quit(reason)
1481 | 
1482 | Para se desconectar do servidor de forma elegante com um motivo (padrão: 'disconnect.quitting').
1483 | 
1484 | #### bot.tabComplete(str, cb, [assumeCommand], [sendBlockInSight])
1485 | 
1486 | Essa função também retorna uma `Promise`, com `matches` como argumento quando a conclusão é feita.
1487 | 
1488 | Solicita a conclusão da mensagem de chat (para comandos).
1489 |  * `str` - String para completar.
1490 |  * `callback(matches)`
1491 |    - `matches` - Array de strings correspondentes.
1492 |  * `assumeCommand` - Campo enviado ao servidor, padrão: false.
1493 |  * `sendBlockInSight` - Campo enviado ao servidor, padrão: true. Mude para false se desejar maior eficiência.
1494 | 
1495 | #### bot.chat(message)
1496 | 
1497 | Envia uma mensagem pública no chat. Divide mensagens grandes em pedaços e as envia como várias mensagens, se necessário.
1498 | 
1499 | #### bot.whisper(username, message)
1500 | 
1501 | Atalho para "/tell <username>" (usuário). Todas as partes serão sussurradas ao usuário.
1502 | 
1503 | #### bot.chatAddPattern(pattern, chatType, description)
1504 | 
1505 | #### bot.addChatPattern(name, pattern, chatPatternOptions)
1506 | 
1507 | Adicione um padrão regex à lista de padrões do bot. Útil para servidores Bukkit onde o formato do chat muda com frequência.
1508 |  * `pattern` - padrão regex para corresponder
1509 |  * `chatType` - o evento que o bot emite quando o padrão corresponde, por exemplo, "chat" ou "whisper"
1510 |  * 'description' - Opcional, descrição do padrão
1511 | 
1512 | #### bot.addChatPattern(name, pattern, chatPatternOptions)
1513 | 
1514 | ** isso é semelhante a `bot.addChatPatternSet(name, [pattern], chatPatternOptions)`
1515 | 
1516 | Cria um evento que é emitido sempre que um padrão corresponde, o evento será chamado "chat:name", sendo "name" o nome fornecido.
1517 | * `name` - o nome usado para o evento
1518 | * `pattern` - expressão regular a ser testada nas mensagens
1519 | * `chatPatternOptions` - objeto
1520 |   * `repeat` - padrão: true, se continuar testando após corresponder uma vez
1521 |   * `parse` - em vez de retornar a mensagem, retorne os grupos capturados pela regex
1522 |   * `deprecated` - (**unstable**) usado por bot.chatAddPattern para manter a compatibilidade, provavelmente será removido
1523 | 
1524 | Retorna um número que pode ser usado em bot.removeChatPattern() para remover esse padrão.
1525 | 
1526 | #### bot.addChatPatternSet(name, patterns, chatPatternOptions)
1527 | 
1528 | Cria um evento que é emitido sempre que todos os padrões correspondem, o evento será chamado "chat:name", sendo "name" o nome fornecido.
1529 | * `name` - o nome usado para o evento
1530 | * `patterns` - expressões regulares a serem testadas nas mensagens
1531 | * `chatPatternOptions` - objeto
1532 |   * `repeat` - padrão: true, se continuar testando após corresponder uma vez
1533 |   * `parse` - em vez de retornar a mensagem, retorne os grupos capturados pela regex
1534 | 
1535 | Retorna um número que pode ser usado em bot.removeChatPattern() para remover esse conjunto de padrões.
1536 | 
1537 | #### bot.removeChatPattern(name)
1538 | 
1539 | Remove um padrão / conjuntos de padrões
1540 | * `name`: string ou número
1541 | 
1542 | Se o nome for uma string, todos os padrões com esse nome serão removidos; caso contrário, se for um número, apenas o padrão exato será removido.
1543 | 
1544 | #### bot.awaitMessage(...args)
1545 | 
1546 | Promessa que é resolvida quando uma das mensagens fornecidas é cumprida.
1547 | 
1548 | Exemplo:
1549 | 
1550 | ```js
1551 | async function wait () {
1552 |   await bot.awaitMessage('<flatbot> hello world') // resolve "hello world" no chat por flatbot (se resolve quando um usuário chamado flatbot escreve "hello world" no chat)
1553 |   await bot.awaitMessage(['<flatbot> hello', '<flatbot> world']) // resolve "hello" ou "world" no chat por flatbot (se resolve quando um usuário chamado flatbot escreve "hello" ou "world" no chat)
1554 |   await bot.awaitMessage(['<flatbot> hello', '<flatbot> world'], ['<flatbot> im', '<flatbot> batman']) // resolve "hello" ou "world" ou "im" ou "batman" no chat por flatbot (se resolve quando um usuário chamado flatbot escreve "hello world", "world", "im" ou "batman" no bater papo)
1555 |   await bot.awaitMessage('<flatbot> hello', '<flatbot> world') // resolve "hello" ou "world" no chat do flatbot
1556 |   await bot.awaitMessage(/<flatbot> (.+)/) // resolve na primeira mensagem correspondente ao regex (se resolve quando um usuário chamado flatbot escreve algo que coincide com o padrão)
1557 | }
1558 | ```
1559 | 
1560 | #### bot.setSettings(options)
1561 | 
1562 | Veja a propriedade `bot.settings`.
1563 | 
1564 | #### bot.loadPlugin(plugin)
1565 | 
1566 | Introduz um Plugin. Não faz nada se o plugin já estiver carregado/introduzido.
1567 | 
1568 |  * `plugin` - função
1569 | 
1570 | ```js
1571 | function somePlugin (bot, options) {
1572 |   function someFunction () {
1573 |     bot.chat('Yay!')
1574 |   }
1575 | 
1576 |   bot.myPlugin = {} // Boas práticas para API de plugin de namespace (faça isso para evitar erros como myPlugin não está definido)
1577 |   bot.myPlugin.someFunction = someFunction
1578 | }
1579 | 
1580 | const bot = mineflayer.createBot({})
1581 | bot.loadPlugin(somePlugin)
1582 | bot.once('login', function () {
1583 |   bot.myPlugin.someFunction() // Yay!
1584 | })
1585 | ```
1586 | 
1587 | #### bot.loadPlugins(plugins)
1588 | 
1589 | Introduz plugins, veja `bot.loadPlugin`.
1590 |  * `plugins` - array de funções
1591 | 
1592 | #### bot.hasPlugin(plugin)
1593 | 
1594 | Verifica se o plugin já está carregado (ou previsto para carregar) no bot.
1595 | 
1596 | #### bot.sleep(bedBlock, [cb])
1597 | 
1598 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
1599 | 
1600 | Dormir em uma cama. `bedBlock` deve ser uma instância `Block` que é uma cama. `cb` é uma função que pode ter um parâmetro de erro se o bot não conseguir dormir.
1601 | 
1602 | #### bot.isABed(bedBlock)
1603 | 
1604 | Retorna verdadeiro se `bedBlock` for uma cama.
1605 | 
1606 | #### bot.wake([cb])
1607 | 
1608 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
1609 | 
1610 | Acordar de uma cama. `cb` é uma função que pode ter um parâmetro de erro se o bot não conseguir acordar.
1611 | 
1612 | #### bot.setControlState(control, state)
1613 | 
1614 | Este é o método principal para controlar os movimentos do bot. É semelhante a pressionar teclas no Minecraft.
1615 | Por exemplo, forward como true fará o bot se mover para a frente. Forward como false fará o bot parar de se mover para a frente.
1616 | Você pode usar bot.lookAt com isso para controlar o movimento. O exemplo jumper.js mostra como fazer isso.
1617 | 
1618 |  * `control` - Um dos seguintes: ['forward', 'back', 'left', 'right', 'jump', 'sprint', 'sneak']
1619 |  * `state` - `true` ou `false`
1620 | 
1621 | #### bot.getControlState(control)
1622 | 
1623 | #### bot.getControlState(control)
1624 | 
1625 | Retorna verdadeiro se o controle estiver ativado.
1626 | 
1627 | * `control` - um dos seguintes ['forward', 'back', 'left', 'right', 'jump', 'sprint', 'sneak']
1628 | 
1629 | #### bot.clearControlStates()
1630 | 
1631 | Desativa todos os controles.
1632 | 
1633 | #### bot.lookAt(point, [force], [callback])
1634 | 
1635 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
1636 | 
1637 | Move a cabeça.
1638 | 
1639 |  * `point` - uma instância [Vec3](https://github.com/andrewrk/node-vec3) - move a cabeça para olhar para este ponto.
1640 |  * `force` - Veja `force` em `bot.look`.
1641 |  * `callback()` - opcional, executado quando você está olhando para o `point`.
1642 | 
1643 | #### bot.look(yaw, pitch, [force], [callback])
1644 | 
1645 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
1646 | 
1647 | Move a cabeça.
1648 | 
1649 |  * `yaw` - O número de radianos para girar em torno do eixo vertical, começando pelo leste, no sentido anti-horário.
1650 |  * `pitch` - O número de radianos para olhar para cima ou para baixo. 0 significa olhar em frente. PI / 2 significa para cima. -PI / 2 significa para baixo.
1651 |  * `force` - Se presente e verdadeiro, pula a transição suave. Especifique como verdadeiro se você quiser valores precisos para soltar itens ou atirar flechas. Isso não é necessário para cálculos do lado do cliente, como mover-se.
1652 |  * `callback()` - opcional, executado quando você está olhando para `yaw` e `pitch`.
1653 | 
1654 | #### bot.updateSign(block, text)
1655 | 
1656 | Altera o texto em um sinal.
1657 | 
1658 | #### bot.equip(item, destination, [callback])
1659 | 
1660 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
1661 | 
1662 | Equipar um item do inventário.
1663 | 
1664 |  * `item` - instância `Item`. Veja `window.items()`.
1665 |  * `destination` - `"hand"` (mão), `null` é um alias para isso.
1666 |    - `"head"` (cabeça)
1667 |    - `"torso"` (peito)
1668 |    - `"legs"` (pernas)
1669 |    - `"feet"` (pés)
1670 |    - `"off-hand"` (mão esquerda), quando disponível.
1671 |  * `callback(error)` - opcional, executado quando o bot equipou o item ou quando falhou em fazê-lo.
1672 | 
1673 | #### bot.unequip(destination, [callback])
1674 | 
1675 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
1676 | 
1677 | Remove um item do destino.
1678 | 
1679 | #### bot.tossStack(item, [callback])
1680 | 
1681 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
1682 | 
1683 | Descarta a pilha de itens especificada.
1684 |  * `item` - a pilha de itens que você deseja descartar.
1685 |  * `callback(error)` - opcional, executado quando o bot terminou de descartar ou quando falhou em fazê-lo.
1686 | 
1687 | #### bot.toss(itemType, metadata, count, [callback])
1688 | 
1689 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
1690 | 
1691 |  * `itemType` - ID numérico do item que você deseja descartar.
1692 |  * `metadata` - metadados do item que você deseja descartar. `null` para qualquer metadados.
1693 |  * `count` - quantos itens você deseja descartar. `null` significa `1`.
1694 |  * `callback(err)` - (opcional) executado quando o bot terminou de descartar ou quando falhou em fazê-lo.
1695 | 
1696 | #### bot.dig(block, [forceLook = true], [digFace], [callback])
1697 | 
1698 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
1699 | 
1700 | Começa a quebrar o `block` (bloco) com o item na mão.
1701 | Observe os eventos "diggingCompleted" e "diggingAborted".
1702 | 
1703 | Nota: ao começar a quebrar um bloco, você não poderá quebrar outro bloco até terminar de quebrar aquele bloco ou executar `bot.stopDigging()`.
1704 | 
1705 |  * `block` - o bloco que você deseja quebrar.
1706 |  * `forceLook` - (opcional) se for verdadeiro, olha rapidamente para o bloco e começa a quebrá-lo. Se for falso, olha lentamente para o bloco antes de começar a quebrá-lo. Além disso, pode ser 'ignore', para que o bot não olhe para o bloco ao quebrá-lo.
1707 |  * `digFace` - (opcional) Padrão: 'auto', olha para o centro do bloco e quebra-o a partir do topo. Também pode ser um vetor Vec3 da face do bloco para onde o bot deve olhar. Por exemplo: ```vec3(0, 1, 0)``` para quebrar a face de cima. Também pode ser 'raycast', isso verifica se alguma face é visível para começar a quebrar por essa face, o que é útil em servidores com um anti-cheat.
1708 |  * `callback(err)` - (opcional) executado quando o bot quebrou o bloco ou quando falhou em fazê-lo.
1709 | 
1710 | #### bot.stopDigging()
1711 | 
1712 | Parar de quebrar o escavar o bloco.
1713 | 
1714 | #### bot.digTime(block)
1715 | 
1716 | Retorna quanto tempo levará para quebrar o bloco, em milissegundos.
1717 | 
1718 | #### bot.acceptResourcePack()
1719 | 
1720 | Aceitar o pacote de recursos.
1721 | 
1722 | #### bot.denyResourcePack()
1723 | 
1724 | Negar o pacote de recursos.
1725 | 
1726 | #### bot.placeBlock(referenceBlock, faceVector, cb)
1727 | 
1728 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
1729 | 
1730 |  * `referenceBlock` - o bloco ao lado do bloco que deseja colocar
1731 |  * `faceVector` - uma das seis direções cardeais, por exemplo, `new Vec3(0, 1, 0)` para o lado de cima, indicando a face do bloco de referência.
1732 |  * `cb` será executado quando o servidor confirmar que o bloco foi colocado.
1733 | 
1734 | O bloco será colocado em `referenceBlock.position.plus(faceVector)` (posição do bloco de referência mais o vetor de face).
1735 | 
1736 | #### bot.placeEntity(referenceBlock, faceVector)
1737 | 
1738 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
1739 | 
1740 |  * `referenceBlock` - o bloco ao lado de onde deseja colocar a entidade.
1741 |  * `faceVector` - uma das seis direções cardeais, por exemplo, `new Vec3(0, 1, 0)` para a face de cima, indicando a face do bloco de referência.
1742 | 
1743 | A entidade será colocada em `referenceBlock.position.plus(faceVector)` (posição do bloco de referência mais o vetor de face).
1744 | 
1745 | #### bot.activateBlock(block, [callback])
1746 | 
1747 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
1748 | 
1749 | Ativar um bloco, como bater em um bloco de nota ou abrir uma porta.
1750 | 
1751 |  * `block` - o bloco a ser ativado.
1752 |  * `callback(err)` - (opcional) executado quando o bot ativa o bloco ou falha ao fazê-lo.
1753 | 
1754 | #### bot.activateEntity(entity, [callback])
1755 | 
1756 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
1757 | 
1758 | Ativar uma entidade, por exemplo, com aldeões.
1759 | 
1760 |  * `entity` - a entidade a ser ativada.
1761 |  * `callback(err)` - (opcional) executado quando o bot ativa a entidade ou falha ao fazê-lo.
1762 | 
1763 | #### bot.activateEntityAt(entity, position, [callback])
1764 | 
1765 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
1766 | 
1767 | Ativar uma entidade na posição especificada, útil para suportes de armadura.
1768 | 
1769 |  * `entity` - a entidade a ser ativada.
1770 |  * `position` - a posição onde você deve clicar.
1771 |  * `callback(err)` - (opcional) executado quando o bot ativa a entidade ou falha ao fazê-lo.
1772 | 
1773 | #### bot.consume(callback)
1774 | 
1775 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
1776 | 
1777 | Consumir ou beber o item na mão.
1778 | 
1779 |  * `callback(error)` - executado quando o bot consome o item ou falha ao fazê-lo.
1780 | 
1781 | #### bot.fish(callback)
1782 | 
1783 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
1784 | 
1785 | Pescar com a vara de pescar na mão.
1786 | 
1787 |  * `callback(error)` - (opcional) executado quando o bot pescou algo ou falhou ao fazê-lo.
1788 | 
1789 | #### bot.activateItem(offHand=false)
1790 | 
1791 | Ativar o item na mão. Isso é usado para comer, atirar flechas, jogar ovos, etc.
1792 | O parâmetro opcional pode ser `false` para a mão esquerda.
1793 | 
1794 | #### bot.deactivateItem()
1795 | 
1796 | Desativar o item na mão. Isso é como atirar uma flecha, parar de comer, etc.
1797 | 
1798 | #### bot.useOn(targetEntity)
1799 | 
1800 | Usar o item na mão na instância de `Entity` (entidade). Isso é usado para colocar uma sela em um cavalo, ou usar tesouras em uma ovelha, por exemplo.
1801 | 
1802 | #### bot.attack(entity)
1803 | 
1804 | Atacar a entidade ou criatura.
1805 | 
1806 | #### bot.swingArm([hand], showHand)
1807 | 
1808 | Reproduz a animação de mover o braço.
1809 | 
1810 |  * `mão` - a mão que será animada, pode ser `esquerda` ou `direita`. Padrão: `direita`
1811 |  * `mostrarMão` - um booleano que indica se adicionar a mão ao pacote para mostrar a animação. Padrão: `verdadeiro`
1812 | 
1813 | #### bot.mount(entity)
1814 | 
1815 | Subir em uma entidade. Para descer, use `bot.dismount`.
1816 | 
1817 | #### bot.dismount()
1818 | 
1819 | Desce da entidade em que você está montado.
1820 | 
1821 | #### bot.moveVehicle(left,forward)
1822 | 
1823 | Mover o veículo:
1824 | 
1825 |  * esquerda pode ser -1 ou 1: -1 significa direita, 1 significa esquerda
1826 |  * frente pode ser -1 ou 1: -1 significa para trás, 1 significa para a frente
1827 | 
1828 | Todas as direções são relativas à direção em que o bot está olhando.
1829 | 
1830 | #### bot.setQuickBarSlot(slot)
1831 | 
1832 |  * `slot` - pode ser de 0 a 8, a posição da barra de acesso rápido
1833 | 
1834 | #### bot.craft(recipe, count, craftingTable, [callback])
1835 | 
1836 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
1837 | 
1838 |  * `receita` - Uma instância de `Receita`. Veja `bot.receitasPara`.
1839 |  * `quantidade` - Quantas vezes você deseja repetir a ação.
1840 |    Se você deseja criar `8` varas com tábuas de madeira, você colocaria
1841 |    `quantidade` como `2`. `null` significa `1`.
1842 |  * `mesaDeCriação` - Uma instância de `Bloco`, a mesa de criação que você deseja usar. Se a criação não exigir uma mesa, este argumento pode ser deixado como `null`.
1843 |  * `retorno` - (opcional) Executado quando o bot terminou a criação e o inventário foi atualizado.
1844 | 
1845 | #### bot.writeBook(slot, pages, [callback])
1846 | 
1847 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
1848 | 
1849 |  * `slot` é um número de posição no inventário (36 é o primeiro slot, etc.).
1850 |  * `páginas` é um array de strings representando as páginas.
1851 |  * `retorno(erro)` - opcional. Executado quando o bot terminou de escrever ou ocorreu um erro.
1852 | 
1853 | #### bot.openContainer(containerBlock or containerEntity)
1854 | 
1855 | Abre um recipiente.
1856 | Retorna uma promise com uma instância de `Container` que representa o recipiente que você está abrindo.
1857 | 
1858 | #### bot.openChest(chestBlock or minecartchestEntity)
1859 | 
1860 | Obsoleto. O mesmo que `openContainer`
1861 | 
1862 | #### bot.openFurnace(furnaceBlock)
1863 | 
1864 | Abre um forno.
1865 | Retorna uma promise com uma instância de `Forno` que representa o forno que você está abrindo.
1866 | 
1867 | #### bot.openDispenser(dispenserBlock)
1868 | 
1869 | Obsoleto. O mesmo que `openContainer`
1870 | 
1871 | #### bot.openEnchantmentTable(enchantmentTableBlock)
1872 | 
1873 | Retorna uma promise com uma instância de `MesaDeEncantamento` que representa a mesa de encantamento que você está abrindo.
1874 | 
1875 | #### bot.openAnvil(anvilBlock)
1876 | 
1877 | Retorna uma promise com uma instância de `bigorna` que representa a bigorna que você está abrindo.
1878 | 
1879 | #### bot.openVillager(villagerEntity)
1880 | 
1881 | Retorna uma promise com uma instância de `Aldeão` que representa a janela de negociação que você está abrindo
1882 | O evento `pronto` na instância de `Aldeão` pode ser usado para saber quando as negociações estão prontas
1883 | 
1884 | #### bot.trade(villagerInstance, tradeIndex, [times], [cb])
1885 | 
1886 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
1887 | 
1888 | Use a instância de `Aldeão` para fazer negociações.
1889 | 
1890 | #### bot.setCommandBlock(pos, command, [options])
1891 | 
1892 | Altera as propriedades de um bloco de comandos na posição `posição`.
1893 | Exemplo de `opções`:
1894 | ```js
1895 | {
1896 |   modo: 2,
1897 |   rastrearSaída: verdadeiro,
1898 |   condicional: falso,
1899 |   sempreAtivo: verdadeiro
1900 | }
1901 | ```
1902 | opções.modo pode ter 3 valores: 0 (SEQUÊNCIA), 1 (AUTO), 2 (REDSTONE)
1903 | Todas as opções têm padrão como falso, exceto modo que é 2 (para se assemelhar ao bloco de comandos do Minecraft).
1904 | 
1905 | #### bot.supportFeature(name)
1906 | 
1907 | Isso pode ser usado para verificar se uma característica está disponível na versão do bot do Minecraft. Normalmente, isso é usado para lidar com funções específicas de uma versão.
1908 | 
1909 | Você pode encontrar a lista de características em [./lib/features.json](https://github.com/PrismarineJS/mineflayer/blob/master/lib/features.json) arquivo.
1910 | 
1911 | #### bot.waitForTicks(ticks)
1912 | 
1913 | Esta função retorna uma promessa e espera que o número de ticks especificado passe no jogo; esta função é semelhante à função setTimeout do JavaScript, mas funciona com o relógio físico do jogo.
1914 | 
1915 | ### Lower level inventory methods
1916 | 
1917 | Esses são métodos de nível mais baixo para o inventário e podem ser úteis em algumas situações, mas é melhor usar os métodos apresentados acima sempre que possível.
1918 | 
1919 | #### bot.clickWindow(slot, mouseButton, mode, cb)
1920 | 
1921 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
1922 | 
1923 | Clique na janela/interface atual; os detalhes estão em https://wiki.vg/Protocol#Click_Window
1924 |  * slot - número que representa a posição na janela
1925 |  * mouseButton - 0 para clique esquerdo e 1 para clique direito
1926 |  * mode - mineflayer só tem o modo 0 disponível
1927 | 
1928 | #### bot.putSelectedItemRange(start, end, window, slot)
1929 | 
1930 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
1931 | 
1932 | Mova o item na posição `slot` em um intervalo especificado.
1933 | 
1934 | #### bot.putAway(slot)
1935 | 
1936 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
1937 | 
1938 | Mova o item para a posição `slot` no inventário.
1939 | 
1940 | #### bot.closeWindow(window)
1941 | 
1942 | Feche a janela/interface.
1943 |  * janela - a janela a ser fechada
1944 | 
1945 | #### bot.transfer(options, cb)
1946 | 
1947 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
1948 | 
1949 | Transfira um item de um intervalo para outro. `opções` é um objeto com:
1950 | 
1951 |  * `janela`: a janela para onde o item será movido
1952 |  * `tipoItem`: o tipo de item a ser movido (ID numérico)
1953 |  * `metadata`: a metadados do item a ser movido
1954 |  * `inícioOrigem` e `fimOrigem`: o intervalo de origem
1955 |  * `inícioDestino` e `fimDestino`: o intervalo de destino
1956 | 
1957 | #### bot.openBlock(block)
1958 | 
1959 | Abra um bloco, como um baú; retorna uma promessa com `Janela` sendo a janela aberta.
1960 | 
1961 |  * `bloco` é o bloco a ser aberto
1962 | 
1963 | #### bot.openEntity(entity)
1964 | 
1965 | Abra uma entidade com um inventário, como um aldeão; retorna uma promessa com `Janela` sendo a janela aberta.
1966 | 
1967 |  * `entidade` é a entidade a ser aberta
1968 | 
1969 | #### bot.moveSlotItem(sourceSlot, destSlot, cb)
1970 | 
1971 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
1972 | 
1973 | Mova um item de uma posição `origemSlot` para outra `destinoSlot` em uma janela.
1974 | 
1975 | #### bot.updateHeldItem()
1976 | 
1977 | Atualize `bot.heldItem`.
1978 | 
1979 | #### bot.getEquipmentDestSlot(destination)
1980 | 
1981 | Retorna o ID da posição de equipamento pelo nome do destino.
1982 | 
1983 | O destino pode ser:
1984 | * cabeça - (cabeça)
1985 | * peito - (peito)
1986 | * pernas - (pernas)
1987 | * pés - (pés)
1988 | * mão - (mão)
1989 | * mão secundária - (mão esquerda)
1990 | 
1991 | ### bot.creative
1992 | 
1993 | Esta coleção de APIs é útil no modo criativo.
1994 | A detecção e a troca de modo não estão implementadas,
1995 | mas é assumido e muitas vezes é necessário que o bot esteja no modo criativo para que essas funcionalidades funcionem.
1996 | 
1997 | #### bot.creative.setInventorySlot(slot, item, [callback])
1998 | 
1999 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
2000 | 
2001 | Fornece ao bot o item especificado na posição especificada.
2002 | Se for executado duas vezes antes que a primeira execução seja concluída, a primeira execução conterá um erro.
2003 | 
2004 |  * `slot` é um número de posição no inventário (onde 36 é a primeira posição, etc.).
2005 |  * `item` é uma instância de [prismarine-item](https://github.com/PrismarineJS/prismarine-item) com seus metadados, dados nbt, etc.
2006 |     Se `item` for `null`, o item nessa posição será removido
2007 |  * `retorno(erro)` (opcional) é uma função de retorno que é executada quando o servidor aceita a transação ou quando a transação falha.
2008 | 
2009 | Se este método alterar algo, será emitido `bot.inventory.on("updateSlot")`.
2010 | 
2011 | #### bot.creative.flyTo(destination, [cb])
2012 | 
2013 | Esta função também retorna uma `Promise`, com `void` como argumento quando concluída.
2014 | 
2015 | Execute `startFlying()` e mova-se a uma velocidade constante em um espaço tridimensional em linha reta até o destino.
2016 | `destino` é um `Vec3`, e as coordenadas `x` e `z` às vezes terminarão em `.5`.
2017 | Essa operação não funcionará se houver algum obstáculo no caminho,
2018 | portanto, é recomendável voar distâncias curtas.
2019 | 
2020 | Quando o bot chegar ao destino, `cb` será executado.
2021 | 
2022 | Este método não procurará automaticamente o caminho.
2023 | Espera-se que uma implementação de busca de caminho use este método para se mover < 2 blocos de cada vez.
2024 | 
2025 | Para parar de voar (voltar à física normal), você pode executar `stopFlying()`.
2026 | 
2027 | #### bot.creative.startFlying()
2028 | 
2029 | Altera `bot.physics.gravity` para `0`.
2030 | Para voltar à física normal, você pode executar `stopFlying()`.
2031 | 
2032 | Este método é útil se você quiser flutuar enquanto quebra o bloco abaixo de você.
2033 | Não é necessário executar esta função antes de executar `flyTo()`.
2034 | 
2035 | Observação: enquanto você voa, `bot.entity.velocity` não é preciso.
2036 | 
2037 | #### bot.creative.stopFlying()
2038 | 
2039 | Restaura `bot.physics.gravity` ao seu valor original.
2040 | 


--------------------------------------------------------------------------------
/docs/br/unstable_api_br.md:
--------------------------------------------------------------------------------
 1 | <!-- START doctoc generated TOC please keep comment here to allow auto update -->
 2 | <!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
 3 | **Tabla de contenidos**  *generado con [DocToc](https://github.com/thlorenz/doctoc)*
 4 | 
 5 | - [API inestable : bot._](#api-instable--bot_)
 6 |   - [bot._client](#bot_client)
 7 | 
 8 | <!-- END doctoc generated TOC please keep comment here to allow auto update -->
 9 | 
10 | # API instável: bot._
11 | 
12 | Esses métodos e classes são úteis em alguns casos especiais, mas não são estáveis e podem mudar a qualquer momento.
13 | 
14 | ## bot._client
15 | 
16 | `bot._client` é criado usando [node-minecraft-protocol](https://github.com/PrismarineJS/node-minecraft-protocol).
17 | Lida com a escrita e recepção de pacotes.
18 | O comportamento pode mudar (por exemplo, em cada nova versão do Minecraft), portanto, é melhor usar os métodos do mineflayer, se possível.
19 | 
20 | Esta documentação não é oficialmente mantida. Se você deseja ver as últimas novidades, por favor, consulte a documentação original: [unstable_api](../unstable_api.md)
21 | 


--------------------------------------------------------------------------------
/docs/demos.md:
--------------------------------------------------------------------------------
 1 | ## mineflayer-navigate
 2 | 
 3 | [navigate](https://github.com/andrewrk/mineflayer-navigate/) - get around
 4 |    easily using A* pathfinding
 5 | 
 6 | <iframe type="text/html" width="640" height="360" src="http://www.youtube.com/embed/O6lQdmRz8eE" frameborder="0"></iframe>
 7 | 
 8 | ## rbot
 9 | 
10 | [rom1504/rbot](https://github.com/rom1504/rbot) smart bot based on mineflayer
11 | 
12 | <iframe type="text/html" width="640" height="360" src="http://www.youtube.com/embed/0cQxg9uDnzA" frameborder="0"></iframe>
13 | 
14 | ## chaoscraft
15 | 
16 | [Chaoscraft](https://github.com/schematical/chaoscraft) Minecraft bot using genetic algorithms
17 | 
18 | 
19 | ​<iframe width="640" height="360" src="https://www.youtube.com/embed/videoseries?list=PLLkpLgU9B5xJ7Qy4kOyBJl5J6zsDIMceH" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>


--------------------------------------------------------------------------------
/docs/es/CONTRIBUTING_ES.md:
--------------------------------------------------------------------------------
 1 | # Contribuir
 2 | 
 3 | Mineflayer originalmente fue hecho mayormemente por [andrewrk](http://github.com/andrewrk)
 4 | pero ha sido arreglado y mejorado mucho por muchos [contribuyentes](https://github.com/andrewrk/mineflayer/graphs/contributors).
 5 | Por eso es importante saber cual es la mejor manera de contribuir a mineflayer.
 6 | 
 7 | ## Organización de problemas
 8 | 
 9 | Tenemos 3 etiquetas para 3 fases de organizar los problemas:
10 | 
11 | * Stage 1: (Fase 1) creado por alguien nuevo al proyecto, no sabemos si merece una implementación / solución
12 | * Stage 2: (Fase 2) idea prometedora, pero se necesita pensar más sobre el tema antes de implementarlo
13 | * Stage 3: (Fase 3) la idea es muy precisa, solo hace falta programarlo
14 | 
15 | Los links como https://github.com/PrismarineJS/mineflayer/issues?q=is%3Aopen+is%3Aissue+-label%3AStage1 se pueden usar como filtro para la fase 1 si estás buscando cosas que están listas para que sean contribuidas
16 | 
17 | ## Creando tests
18 | Mineflayer tiene dos tipos de tests :
19 | 
20 |  * [tests internos](test/internalTest.js) : tests que se hacen con un servidor simple creado con node-minecraft-protocol
21 |  * [tests externos](test/externalTests/) : tests que se hacen con un servidor vanilla
22 |  
23 | El objectivo de estos tests es saber automáticamente qué funciona y qué no funciona en mineflayer, así es más fácil hacer funcionar mineflayer.
24 | 
25 | ### Creando un text externo
26 | 
27 | Para crear un test externo solo tienes que crear un archivo en [test/externalTests](test/externalTests)
28 | 
29 | Un ejemplo : [test/externalTests/digAndBuild.js](https://github.com/PrismarineJS/mineflayer/blob/master/test/externalTests/digAndBuild.js)
30 | 
31 | Ese archivo tiene que exportar una función que devuelve una función o un array de funciones que necesitan como parámetros el object de bot y un callback para cuando haya finalizado, debería contener asserts para saber si la función testeada ha fallado.
32 | 
33 | 
34 | ## Creando un plugin de terceros
35 | Mineflayer admite plugins; cualquiera puede crear un plugin que añade una API con un nivel más alto encima de Mineflayer.
36 | 
37 | Bastantes plugins de terceros han sido [creados](https://github.com/andrewrk/mineflayer#third-party-plugins)
38 | 
39 | Para crear un plugin nuevo tienes que :
40 | 
41 | 1. crear un repositorio nuevo
42 | 2. en tu archivo index.js, exportar una función para inicializar el plugin con argumento mineflayer ([ejemplo](https://github.com/andrewrk/mineflayer-navigate/blob/e24cb6a868ce64ae43bea2d035832c15ed01d301/index.js#L18))
43 | 3. esa función devuelve una función para introducir el plugin con argumento el object del bot ([ejemplo](https://github.com/andrewrk/mineflayer-navigate/blob/e24cb6a868ce64ae43bea2d035832c15ed01d301/index.js#L23))
44 | 4. a partir de esa función se pueden añadir más funcionalidades al bot ([ejemplo](https://github.com/andrewrk/mineflayer-navigate/blob/e24cb6a868ce64ae43bea2d035832c15ed01d301/index.js#L32))
45 | 
46 | Como el object de mineflayer fue pasado como argumento, ese plugin de terceros no tiene que depender en mineflayer (no hay mineflayer en el package.json)
47 | 
48 | Mira un [ejemplo completo](https://github.com/andrewrk/mineflayer-navigate/tree/e24cb6a868ce64ae43bea2d035832c15ed01d301) here.
49 | 
50 | ## Reportando bugs
51 | Mineflayer funciona bien para la mayoría de cosas, pero a veces sigue teniendo bugs.
52 | 
53 | Cuando encuentras uno es mejor que informes sobre el error proporcionando esta información :
54 | 
55 | * que quieres hacer (el objetivo en english)
56 | * que es lo que has intentado (el código)
57 | * que ha pasado
58 | * que esperabas que pasara
59 | 
60 | ## Código de Mineflayer
61 | Algunas cosas para pensar al crear un Pull Request (solicitud de pull) o hacer un commit :
62 | 
63 | ### Gestión de errores
64 | En la mayoría de casos, mineflayer no debería romper/crashear el bot. Incluso si algo falla, el bot puede coger una ruta alternativa para coseguir el objetivo.
65 | 
66 | Con esto se refiere a que no deberíamos usar el `throw new Error("error")` sino pasar el error junto al callback.
67 | 
68 | Por ejemplo : 
69 | 
70 | ```js
71 | function myfunction (param1, callback) {
72 |   // do stuff
73 |   let toDo = 1
74 |   toDo = 2
75 |   if (toDo === 2) { // everything worked (todo ha funcionado)
76 |     callback()
77 |   } else {
78 |     callback(new Error('something failed')) // (algo ha fallado)
79 |   }
80 | }
81 | ```
82 | 
83 | Mira otro ejemplo en el [código de mineflayer](https://github.com/andrewrk/mineflayer/blob/a8736c4ea473cf1a609c5a29046c0cdad006d429/lib/plugins/bed.js#L10)
84 | 
85 | ### Actualizando la documentación
86 | La tabla de contenidos del docs/api.md está hecho con doctoc. Tras actualizar el archivo, deberías ejecutar doctoc docs/api.md para actualizar la tabla de contenidos.
87 | 
88 | 
89 | Esta documentación no está mantenida oficialmente, si quiere ver las últimas novedades, por favor dirijase a la documentación original: [unstable_api](../CONTRIBUTING.md)
90 | 


--------------------------------------------------------------------------------
/docs/es/FAQ_ES.md:
--------------------------------------------------------------------------------
  1 | ## FAQ
  2 | 
  3 | Este documento sobre preguntas frecuentes es para ayudar la gente en cosas básicas
  4 | 
  5 | ## Como ocultar errores?
  6 | 
  7 | Escribe `hideErrors: true` en las opciones de createBot
  8 | También puedes usar estos eventos:
  9 | 
 10 | ```js
 11 | client.on('error', () => {})
 12 | client.on('end', () => {})
 13 | ```
 14 | 
 15 | ## Mi evento de chat no se emite en un servidor personalizado, cómo lo resuelvo?
 16 | 
 17 | Los servidores spigot, en particular algunos plugins, usan formatos personalizados de chat, tienes que analizarlos con un regex personalizado.
 18 | Lee y modifica [chat_parsing.js](https://github.com/PrismarineJS/mineflayer/blob/master/examples/chat_parsing.js) para que funcione con tu plugin de chat particular. Lee también http://prismarinejs.github.io/mineflayer/#/tutorial?id=custom-chat
 19 | 
 20 | ### Como puedo recolectar información de un plugin de chat personalizado?
 21 | 
 22 | La mayoría de servidores de minecraft tienen plugins, que mandan mensajes al chat cuando ocurre algo. Si es algo sencillo, se puede utilizar la solución anterior, pero si tiene mucha información en un solo mensaje, la otra opción sería usar el evento `"messagestr"` que te permite analizar los mensajes fácilmente.
 23 | 
 24 | **Ejemplo:**
 25 | 
 26 | El mensaje podría ser así:
 27 | ```
 28 | (!) U9G has won the /jackpot and received
 29 | $26,418,402,450! They purchased 2,350,000 (76.32%) ticket(s) out of the
 30 | 3,079,185 ticket(s) sold!
 31 | ```
 32 | ```js
 33 | const regex = {
 34 |   first: /\(!\) (.+) has won the \/jackpot and received +/,
 35 |   second: /\$(.+)! They purchased (.+) \((.+)%\) ticket\(s\) out of the /,
 36 |   third: /(.+) ticket\(s\) sold!/
 37 | }
 38 | 
 39 | let jackpot = {}
 40 | bot.on('messagestr', msg => {
 41 |   if (regex.first.test(msg)) {
 42 |     const username = msg.match(regex.first)[1]
 43 |     jackpot.username = username
 44 |   } else if (regex.second.test(msg)) {
 45 |     const [, moneyWon, boughtTickets, winPercent] = msg.match(regex.second)
 46 |     jackpot.moneyWon = parseInt(moneyWon.replace(/,/g, ''))
 47 |     jackpot.boughtTickets = parseInt(boughtTickets.replace(/,/g, ''))
 48 |     jackpot.winPercent = parseFloat(winPercent)
 49 |   } else if (regex.third.test(msg)) {
 50 |     const totalTickets = msg.match(regex.third)[1]
 51 |     jackpot.totalTickets = parseInt(totalTickets.replace(/,/g, ''))
 52 |     onDone(jackpot)
 53 |     jackpot = {}
 54 |   }
 55 | })
 56 | ```
 57 | 
 58 | ### Como puedo mandar un comando?
 59 | 
 60 | Usando `bot.chat()`.
 61 | 
 62 | **Ejemplo:**
 63 | ```js
 64 | bot.chat('/give @p diamond')
 65 | ```
 66 | 
 67 | ### Es posible crear multiples bots y controlarlos separadamente?
 68 | 
 69 | Crea diferentes bots con createBot y haz diferentes cosas para cada uno, echa un vistazo a multiple.js
 70 | 
 71 | ### Como hago para que el bot dropee/tire todo su inventario?
 72 | 
 73 | bot.inventory.items() te proporciona un array de los ítems del bot. Puedes usar una función recursiva para tirar cada ítem usando bot.toss(). Haz click [aquí](https://gist.github.com/dada513/3d88f772be4224b40f9e5d1787bd63e9) para ver un ejemplo
 74 | 
 75 | ### Como veo los paquetes que con mandados/recibidos?
 76 | 
 77 | Activa el modo de depuración https://github.com/PrismarineJS/mineflayer/blob/master/docs/es/README_ES.md#depuraci%C3%B3n
 78 | 
 79 | ### Quiero prevenir una desconexión en caso de lag en el servidor, como puedo hacerlo?
 80 | 
 81 | Una forma de hacerlo es aumentar el valor en la opción [checkTimeoutInterval](https://github.com/PrismarineJS/node-minecraft-protocol/blob/master/docs/API.md#mccreateclientoptions) (por ejemplo `300*1000` que es 5 minutos en vez del valor predeterminado, que es 30 segundos). Si con eso todavía te desconecta del servidor, puedes reconectarte automáticamente con este ejemplo https://github.com/PrismarineJS/mineflayer/blob/master/examples/reconnector.js
 82 | 
 83 | ### Como puedo obtener el lore / texto de un ítem?
 84 | 
 85 | Puedes usar la propiedad `item.nbt`. Está recomendado usar la librería `prismarine-nbt`. El método nbt.simplify() podría ser útil.
 86 | 
 87 | **Ejemplo:**
 88 | ```js
 89 | function getLore (item) {
 90 |   let message = ''
 91 |   if (item.nbt == null) return message
 92 | 
 93 |   const nbt = require('prismarine-nbt')
 94 |   const ChatMessage = require('prismarine-chat')(bot.version)
 95 | 
 96 |   const data = nbt.simplify(item.nbt)
 97 |   const display = data.display
 98 |   if (display == null) return message
 99 | 
100 |   const lore = display.Lore
101 |   if (lore == null) return message
102 |   for (const line of lore) {
103 |     message += new ChatMessage(line).toString()
104 |     message += '\n'
105 |   }
106 | 
107 |   return message
108 | }
109 | ```
110 | 
111 | ### Como puedo mandar un mensaje de la consola al servidor?
112 | 
113 | Puedes usar una librería como `repl` para leer lo que escribes en la consola y usar `bot.chat()` para mandarlo al servidor. Puedes encontrar un ejemplo [aquí](https://github.com/PrismarineJS/mineflayer/blob/master/examples/repl.js)
114 | 
115 | ### Cuando creo un plugin, como puedo especificar otro plugin como dependencia?
116 | 
117 | En la función `inject()` the tu plugin, puedes ejecutar la función `bot.loadPlugin()` para cargar ese plugin. Si el plugin ya estaba cargado de antes, no pasará nada.
118 | 
119 | Nota: el orden en el cual los plugins son cargados es dinámico, nunca deberías llamar otro plugin en tu función `inject()`.
120 | 
121 | ### Como puedo usar un proxy socks5?
122 | 
123 | En las opciones de `mineflayer.createBot(opciones)`, quita tu `host` de las opciones y pon las cosas que se necesite en estas variables `PROXY_IP`, `PROXY_PORT`, `PROXY_USERNAME`, `PROXY_PASSWORD`, `MC_SERVER_IP`, `MC_SERVER_PORT`, y añade esto a tus opciones:
124 | ```js
125 | connect: (client) => {
126 |   socks.createConnection({
127 |     proxy: {
128 |       host: PROXY_IP,
129 |       port: PROXY_PORT,
130 |       type: 5,
131 |       userId: PROXY_USERNAME,
132 |       password: PROXY_PASSWORD
133 |     },
134 |     command: 'connect',
135 |     destination: {
136 |       host: MC_SERVER_IP,
137 |       port: MC_SERVER_PORT
138 |     }
139 |   }, (err, info) => {
140 |     if (err) {
141 |       console.log(err)
142 |       return
143 |     }
144 |     client.setSocket(info.socket)
145 |     client.emit('connect')
146 |   })
147 | }
148 | ```
149 | 
150 | # Errores frecuentes
151 | 
152 | ### `UnhandledPromiseRejectionWarning: Error: Failed to read asymmetric key`
153 | 
154 | Esto pasa cuando proporcionas una versión equivocada a mineflayer o mineflayer detecta la versión equivocada
155 | 
156 | ### `TypeError: Cannot read property '?' of undefined`
157 | 
158 | Podrías estar intentando usar una propiedad del bot que todavía no existe, intenta usar la propiedad despues del evento `spawn`
159 | 
160 | ### `SyntaxError: Unexpected token '?'`
161 | 
162 | Actualiza la versión de tu node
163 | 
164 | ### The bot can't break/place blocks or open chests
165 | 
166 | Comprueba que la protección de spawn no está impidiendo el bot de realizar la acción
167 | 
168 | 
169 | Esta documentación no está mantenida oficialmente, si quiere ver las últimas novedades, por favor dirijase a la documentación original: [FAQ](../FAQ.md)
170 | 


--------------------------------------------------------------------------------
/docs/es/README_ES.md:
--------------------------------------------------------------------------------
  1 | # Mineflayer
  2 | 
  3 | [![NPM version](https://badge.fury.io/js/mineflayer.svg)](http://badge.fury.io/js/mineflayer)
  4 | [![Build Status](https://github.com/PrismarineJS/mineflayer/workflows/CI/badge.svg)](https://github.com/PrismarineJS/mineflayer/actions?query=workflow%3A%22CI%22)
  5 | [![Discord](https://img.shields.io/badge/chat-on%20discord-brightgreen.svg)](https://discord.gg/GsEFRM8)
  6 | [![Gitter](https://img.shields.io/badge/chat-on%20gitter-brightgreen.svg)](https://gitter.im/PrismarineJS/general)
  7 | [![Irc](https://img.shields.io/badge/chat-on%20irc-brightgreen.svg)](https://irc.gitter.im/)
  8 | 
  9 | [![Try it on gitpod](https://img.shields.io/badge/try-on%20gitpod-brightgreen.svg)](https://gitpod.io/#https://github.com/PrismarineJS/mineflayer)
 10 | 
 11 | | <sub>EN</sub> [English](../README.md) | <sub>RU</sub> [русский](../ru/README_RU.md) | <sub>ES</sub> [Español](../es/README_ES.md) | <sub>FR</sub> [Français](../fr/README_FR.md) | <sub>TR</sub> [Türkçe](../tr/README_TR.md) | <sub>ZH</sub> [中文](../zh/README_ZH_CN.md) | <sub>BR</sub> [Português](../br/README_BR.md) |
 12 | |-------------------------|----------------------------|----------------------------|----------------------------|----------------------------|----------------------------|----------------------------|
 13 | 
 14 | Crea bots para Minecraft con una API de JavaScript potente, estable y de alto nivel.
 15 | 
 16 | ¿Primera vez usando node.js? Puede que quieras empezar con el tutorial [tutorial](../tutorial.md)
 17 | 
 18 | ## Características
 19 | 
 20 |  * Soporta Minecraft 1.8, 1.9, 1.10, 1.11, 1.12, 1.13, 1.14, 1.15, 1.16, 1.17, 1.18, 1.19 y 1.20.
 21 |  * Rastreo e información de entidades.
 22 |  * Información sobre bloques. Puedes solicitar información de todo lo que te rodea. Encuentra bloques en milisegundos
 23 |  * Físicas y movimientos básicos - maneja todos los cuadros de colisión
 24 |  * Atacar entidades y usar vehículos.
 25 |  * Gestión del inventario.
 26 |  * Crafteo, cofres, dispensadores, mesas de encantamiento.
 27 |  * Cavar y contruir.
 28 |  * Diversas cosas como saber tu salud y si está lloviendo.
 29 |  * Activar bloques y usar ítems.
 30 |  * Chatear/Hablar.
 31 | 
 32 | ### Planes para el futuro
 33 | 
 34 | Echa un vistazo a nuestros [proyectos actuales](https://github.com/PrismarineJS/mineflayer/wiki/Big-Prismarine-projects)
 35 | 
 36 | ## Instalación
 37 | Primero instala Node.js >= 18 desde [nodejs.org](https://nodejs.org/)
 38 | 
 39 | `npm install mineflayer`
 40 | 
 41 | ## Documentación
 42 | 
 43 | | link | descripción |
 44 | |---|---|
 45 | |[tutorial](../tutorial.md) | Empieza con node.js y mineflayer |
 46 | | [FAQ.md](FAQ_ES.md) | Alguna duda? Echa un vistazo a esto |
 47 | | [api.md](api_es.md) [unstable_api.md](unstable_api_es.md) | Toda la documentación de la API |
 48 | | [history.md](../history.md) | Historial de cambios de Mineflayer |
 49 | | [examples/](https://github.com/PrismarineJS/mineflayer/tree/master/examples) | Todos los ejemplos de mineflayer |
 50 | 
 51 | ## Contribuir
 52 | 
 53 | Por favor, lee [CONTRIBUTING.md](CONTRIBUTING_ES.md) y [prismarine-contribute](https://github.com/PrismarineJS/prismarine-contribute)
 54 | 
 55 | ## Uso
 56 | 
 57 | **Vídeos**
 58 | 
 59 | Puedes encontrar un tutorial que explica el proceso de como empezar un bot [aquí](https://www.youtube.com/watch?v=ltWosy4Z0Kw) (en inglés).  
 60 | 
 61 | Si quieres aprender más, puedes mirar [aquí, ](https://www.youtube.com/playlist?list=PLh_alXmxHmzGy3FKbo95AkPp5D8849PEV) los códigos usados en los vídeos [aquí](https://github.com/TheDudeFromCI/Mineflayer-Youtube-Tutorials)
 62 | 
 63 | [<img src="https://img.youtube.com/vi/ltWosy4Z0Kw/0.jpg" alt="tutorial 1" width="200">](https://www.youtube.com/watch?v=ltWosy4Z0Kw)
 64 | [<img src="https://img.youtube.com/vi/UWGSf08wQSc/0.jpg" alt="tutorial 2" width="200">](https://www.youtube.com/watch?v=UWGSf08wQSc)
 65 | [<img src="https://img.youtube.com/vi/ssWE0kXDGJE/0.jpg" alt="tutorial 3" width="200">](https://www.youtube.com/watch?v=ssWE0kXDGJE)
 66 | [<img src="https://img.youtube.com/vi/walbRk20KYU/0.jpg" alt="tutorial 4" width="200">](https://www.youtube.com/watch?v=walbRk20KYU)
 67 | 
 68 | **Empezando**
 69 | 
 70 | Si no se especifica una versión, la versión del servidor se detectará automáticamente. Si no se especifica ningún tipo de autenticación, se utilizará el login de Mojang automáticamente. 
 71 | 
 72 | ### Ejemplo: echo
 73 | ```js
 74 | const mineflayer = require('mineflayer')
 75 | 
 76 | const bot = mineflayer.createBot({
 77 |   host: 'localhost', // ip del servidor de minecraft
 78 |   username: 'email@example.com', // usuario de la cuenta, e-mail si es premium
 79 |   password: '12345678' // para servidores premium
 80 |   // port: 25565, // modificar solo si es un servidor que no utiliza el puerto predeterminado (25565)
 81 |   // version: false, // modificar solo si se necesita una version específica
 82 |   // auth: 'mojang', // solo modificar si tienes una cuenta microsoft (en ese caso sería auth: 'microsoft')
 83 | })
 84 | 
 85 | bot.on('chat', (username, message) => {
 86 |   if (username === bot.username) return
 87 |   bot.chat(message)
 88 | })
 89 | 
 90 | // Imprimir errores y la razón del kickeo si te kickean:
 91 | bot.on('kicked', (reason, loggedIn) => console.log(reason, loggedIn))
 92 | bot.on('error', err => console.log(err))
 93 | ```
 94 | 
 95 | ### Mira lo que hace tu bot
 96 | 
 97 | Gracias al proyecto [prismarine-viewer](https://github.com/PrismarineJS/prismarine-viewer), puedes ver en una pestaña del navegador qué está haciendo tu bot.
 98 | Solo tienes que ejecutar `npm install prismarine-viewer` y añadir lo siguiente a tu bot:
 99 | ```js
100 | const { mineflayer: mineflayerViewer } = require('prismarine-viewer')
101 | bot.once('spawn', () => {
102 |   mineflayerViewer(bot, { port: 3007, firstPerson: true }) // el puerto es en que puerto del buscador hostear el plugin, y firstPerson es por si quieres la vista en primera persona o no
103 | })
104 | ```
105 | Y podrás ver una representación *en vivo* como esta:
106 | 
107 | [<img src="https://prismarinejs.github.io/prismarine-viewer/test_1.16.1.png" alt="viewer" width="500">](https://prismarinejs.github.io/prismarine-viewer/)
108 | 
109 | #### Más ejemplos
110 | 
111 | | ejemplo | descripción |
112 | |---|---|
113 | |[viewer](https://github.com/PrismarineJS/mineflayer/tree/master/examples/viewer) | Visualiza lo que ve tu bot en el buscador |
114 | |[pathfinder](https://github.com/Karang/mineflayer-pathfinder/blob/master/examples/test.js) | Haz que tu bot vaya a cualquier ubicación automáticamente |
115 | |[chest](https://github.com/PrismarineJS/mineflayer/blob/master/examples/chest.js) | Aprende a usar cofres, hornos, dispensadores y mesas de encantamiento |
116 | |[digger](https://github.com/PrismarineJS/mineflayer/blob/master/examples/digger.js) | Aprende como crear un bot que pueda romper un bloque |
117 | |[discord](https://github.com/PrismarineJS/mineflayer/blob/master/examples/discord.js) | Conecta un bot de discord con un bot de mineflayer |
118 | |[jumper](https://github.com/PrismarineJS/mineflayer/blob/master/examples/jumper.js) | Aprende a moverte, saltar, ir en vehiculos y atacar entidades cercanas |
119 | |[ansi](https://github.com/PrismarineJS/mineflayer/blob/master/examples/ansi.js) | Muestra todos los mensajes que mandan al chat en tu consola con sus colores correspondientes |
120 | |[guard](https://github.com/PrismarineJS/mineflayer/blob/master/examples/guard.js) | Haz un bot que defienda un área predefinida de mobs |
121 | |[multiple-from-file](https://github.com/PrismarineJS/mineflayer/blob/master/examples/multiple_from_file.js) | Usa un archivo de texto con cuentas para crear bots |
122 | 
123 | Más ejemplos en la carpeta de [ejemplos](https://github.com/PrismarineJS/mineflayer/tree/master/examples)
124 | 
125 | ### Módulos
126 | 
127 | La mayoría del desarrollo se está produciendo dentro de pequeños módulos npm que son usados por mineflayer
128 | 
129 | #### The Node Way&trade;
130 | 
131 | > "When applications are done well, they are just the really application-specific, brackish residue that can't be so easily abstracted away. All the nice, reusable components sublimate away onto github and npm where everybody can collaborate to advance the commons." — substack from ["how I write modules"](https://gist.github.com/substack/5075355)
132 | 
133 | #### Módulos
134 | Estos son los módulos principales que forman mineflayer:
135 | 
136 | | módulo | descripción |
137 | |---|---|
138 | | [minecraft-protocol](https://github.com/PrismarineJS/node-minecraft-protocol) | Analiza y crea paquetes de minecraft, autentificación and encriptación.
139 | | [minecraft-data](https://github.com/PrismarineJS/minecraft-data) | Módulo independiente del lenguaje que provee datos de minecraft para clientes, servidores y librerías.
140 | | [prismarine-physics](https://github.com/PrismarineJS/prismarine-physics) | Motor de físicas para las entidades de minecraft
141 | | [prismarine-chunk](https://github.com/PrismarineJS/prismarine-chunk) | Representa un chunk de minecraft
142 | | [node-vec3](https://github.com/PrismarineJS/node-vec3) | Usa vectores 3d con pruebas sólidas
143 | | [prismarine-block](https://github.com/PrismarineJS/prismarine-block) | Representa un bloque y su información asociada de Minecraft
144 | | [prismarine-chat](https://github.com/PrismarineJS/prismarine-chat) | Analizador para los mensajes de chat de minecraft (extraído de mineflayer)
145 | | [node-yggdrasil](https://github.com/PrismarineJS/node-yggdrasil) | Librería Node.js para interactuar con el sistema de autentificación de Mojang conocido como Yggdrasil.
146 | | [prismarine-world](https://github.com/PrismarineJS/prismarine-world) | Implementación principal de los mundos de Minecraft para Prismarine
147 | | [prismarine-windows](https://github.com/PrismarineJS/prismarine-windows) | Representa las interfaces de minecraft
148 | | [prismarine-item](https://github.com/PrismarineJS/prismarine-item) | Representa un item y su información asociada de Minecraft
149 | | [prismarine-nbt](https://github.com/PrismarineJS/prismarine-nbt) | Analizador de NBT para node-minecraft-protocol
150 | | [prismarine-recipe](https://github.com/PrismarineJS/prismarine-recipe) | Representa recetas/crafteos de Minecraft
151 | | [prismarine-biome](https://github.com/PrismarineJS/prismarine-biome) | Representa un bioma y su información asociada de Minecraft
152 | | [prismarine-entity](https://github.com/PrismarineJS/prismarine-entity) | Representa una entidad y su información asociada de Minecraft
153 | 
154 | ### Depuración
155 | 
156 | Puedes habilitar la depuración del protocolo utilizando la variable de entorno `DEBUG`:
157 | 
158 | ```bash
159 | DEBUG="minecraft-protocol" node [...]
160 | ```
161 | 
162 | En windows :
163 | ```
164 | set DEBUG=minecraft-protocol
165 | node tu_archivo.js
166 | ```
167 | ## Plugins de terceros
168 | 
169 | Mineflayer tiene la capacidad de instalar plugins; cualquiera puede crear un plugin que agregue
170 | un API de nivel superior a Mineflayer.
171 | 
172 | Los más actualizados y útiles son:
173 | 
174 |  * [pathfinder](https://github.com/Karang/mineflayer-pathfinder) - algoritmo de busqueda A* avanzado con muchas características configurables
175 |  * [prismarine-viewer](https://github.com/PrismarineJS/prismarine-viewer) - visualizador de chunks en la web
176 |  * [web-inventory](https://github.com/ImHarvol/mineflayer-web-inventory) - visualizador de inventario en la web
177 |  * [statemachine](https://github.com/TheDudeFromCI/mineflayer-statemachine) - API para comportamientos más complejos
178 |  * [Armor Manager](https://github.com/G07cha/MineflayerArmorManager) - gestión automática de armaduras
179 |  * [Collect Block](https://github.com/TheDudeFromCI/mineflayer-collectblock) - API rápida y simple para recolectar bloques.
180 |  * [Dashboard](https://github.com/wvffle/mineflayer-dashboard) - Panel de instrumentos para un bot de Mineflayer
181 |  * [PVP](https://github.com/TheDudeFromCI/mineflayer-pvp) - API sencilla para PVP y PVE.
182 |  * [auto-eat](https://github.com/LINKdiscordd/mineflayer-auto-eat) - Plugin para comer automáticamente.
183 |  * [Tool](https://github.com/TheDudeFromCI/mineflayer-tool) - Plugin con un API de alto nivel para seleccionar automáticamente la mejor arma/herramienta.
184 |  * [Hawkeye](https://github.com/sefirosweb/minecraftHawkEye) - Plugin para apuntar automáticamente con arcos.
185 | 
186 | 
187 | Pero también echa un vistazo a:
188 | 
189 |  * [radar](https://github.com/andrewrk/mineflayer-radar/) - interfaz de radar en la web utilizando canvas y socket.io [Demo en Youtube](https://www.youtube.com/watch?v=FjDmAfcVulQ)
190 |  * [blockfinder](https://github.com/Darthfett/mineflayer-blockFinder) - encuentra bloques en el mundo tridimensional
191 |  * [scaffold](https://github.com/andrewrk/mineflayer-scaffold) - ir a un destino específico incluso si es necesario construir o rompler bloques para lograrlo [Demo en Youtube](http://youtu.be/jkg6psMUSE0)
192 |  * [auto-auth](https://github.com/G07cha/MineflayerAutoAuth) - autentificación automática por chat
193 |  * [Bloodhound](https://github.com/Nixes/mineflayer-bloodhound) - determina quién y/o qué es responsable de dañar a otra entidad
194 |  * [tps](https://github.com/SiebeDW/mineflayer-tps) - obtener el tps actual (tps procesado)
195 |  * [panorama](https://github.com/IceTank/mineflayer-panorama) - toma imágenes panorámicas de tu mundo
196 | 
197 | ## Proyectos que utilizan Mineflayer
198 | 
199 |  * [rom1504/rbot](https://github.com/rom1504/rbot)
200 |    - [YouTube - construyendo una escalera en espiral](https://www.youtube.com/watch?v=UM1ZV5200S0)
201 |    - [YouTube - replicando una estructura](https://www.youtube.com/watch?v=0cQxg9uDnzA)
202 |  * [Darthfett/Helperbot](https://github.com/Darthfett/Helperbot)
203 |  * [vogonistic/voxel](https://github.com/vogonistic/mineflayer-voxel) - visualiza que está
204 |    haciendo el bot, utilizando voxel.js
205 |  * [JonnyD/Skynet](https://github.com/JonnyD/Skynet) -  registra la actividad de un jugador en una API en línea
206 |  * [MinecraftChat](https://github.com/rom1504/MinecraftChat) (última versión de código libre, creada por AlexKvazos) -  Interfaz de chat en la web para Minecraft <https://minecraftchat.net/>
207 |  * [Cheese Bot](https://github.com/Minecheesecraft/Cheese-Bot) - bot con una interfaz limpia. Hecho con Node-Webkit. http://bot.ezcha.net/
208 |  * [Chaoscraft](https://github.com/schematical/chaoscraft) - bot de Minecraft que utiliza algoritmos genéticos, ver [sus videos de youtube](https://www.youtube.com/playlist?list=PLLkpLgU9B5xJ7Qy4kOyBJl5J6zsDIMceH)
209 |  * [hexatester/minetelegram](https://github.com/hexatester/minetelegram) -  puente para Telegram, hecho con Mineflayer y Telegraf.
210 |  * [and hundreds more](https://github.com/PrismarineJS/mineflayer/network/dependents) - todos los proyectos que usan mineflayer y que han sido detectados por github
211 | 
212 | ## Pruebas
213 | 
214 | ### Ejecuta todas las pruebas
215 | 
216 | Simplemente ejecuta:
217 | 
218 | ```bash
219 | npm test
220 | ```
221 | 
222 | ### Ejecuta pruebas para una versión específica de Minecraft
223 | 
224 | Ejecuta
225 | ```bash
226 | npm test -- -g <version>
227 | ```
228 | 
229 | donde `<version>` es una versión de minecraft como `1.12`, `1.15.2`...
230 | 
231 | ### Ejecuta una prueba específica
232 | 
233 | Ejecuta
234 | ```bash
235 | npm test -- -g <test_name>
236 | ```
237 | 
238 | donde `<test_name>` es el nombre de la prueba que quieres ejecutar como `bed`, `useChests`, `rayTrace`...
239 | 
240 | ## Licencia
241 | 
242 | [MIT](../../LICENSE)
243 | 
244 | 
245 | Esta documentación no está mantenida oficialmente, si quiere ver las últimas novedades, por favor dirijase a la documentación original: [unstable_api](../README.md)
246 | 


--------------------------------------------------------------------------------
/docs/es/api_es.md:
--------------------------------------------------------------------------------
   1 | <!-- START doctoc generated TOC please keep comment here to allow auto update -->
   2 | <!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
   3 | **Tabla de contenidos**  *generado con [DocToc](https://github.com/thlorenz/doctoc)*
   4 | 
   5 | - [API](#api)
   6 |   - [Enums](#enums)
   7 |     - [minecraft-data](#minecraft-data)
   8 |     - [mcdata.blocks](#mcdatablocks)
   9 |     - [mcdata.items](#mcdataitems)
  10 |     - [mcdata.materials](#mcdatamaterials)
  11 |     - [mcdata.recipes](#mcdatarecipes)
  12 |     - [mcdata.instruments](#mcdatainstruments)
  13 |     - [mcdata.biomes](#mcdatabiomes)
  14 |     - [mcdata.entities](#mcdataentities)
  15 |   - [Clases](#clases)
  16 |     - [vec3](#vec3)
  17 |     - [mineflayer.Location](#mineflayerlocation)
  18 |     - [Entity](#entity)
  19 |     - [Block](#block)
  20 |     - [Biome](#biome)
  21 |     - [Item](#item)
  22 |     - [windows.Window (base class)](#windowswindow-base-class)
  23 |       - [window.deposit(itemType, metadata, count, [callback])](#windowdeposititemtype-metadata-count-callback)
  24 |       - [window.withdraw(itemType, metadata, count, [callback])](#windowwithdrawitemtype-metadata-count-callback)
  25 |       - [window.close()](#windowclose)
  26 |     - [Recipe](#recipe)
  27 |     - [mineflayer.Container](#mineflayercontainer)
  28 |     - [mineflayer.Furnace](#mineflayerfurnace)
  29 |       - [furnace "update"](#furnace-update)
  30 |       - [furnace.takeInput([callback])](#furnacetakeinputcallback)
  31 |       - [furnace.takeFuel([callback])](#furnacetakefuelcallback)
  32 |       - [furnace.takeOutput([callback])](#furnacetakeoutputcallback)
  33 |       - [furnace.putInput(itemType, metadata, count, [cb])](#furnaceputinputitemtype-metadata-count-cb)
  34 |       - [furnace.putFuel(itemType, metadata, count, [cb])](#furnaceputfuelitemtype-metadata-count-cb)
  35 |       - [furnace.inputItem()](#furnaceinputitem)
  36 |       - [furnace.fuelItem()](#furnacefuelitem)
  37 |       - [furnace.outputItem()](#furnaceoutputitem)
  38 |       - [furnace.fuel](#furnacefuel)
  39 |       - [furnace.progress](#furnaceprogress)
  40 |     - [mineflayer.EnchantmentTable](#mineflayerenchantmenttable)
  41 |       - [enchantmentTable "ready"](#enchantmenttable-ready)
  42 |       - [enchantmentTable.targetItem()](#enchantmenttabletargetitem)
  43 |       - [enchantmentTable.xpseed](#enchantmenttablexpseed)
  44 |       - [enchantmentTable.enchantments](#enchantmenttableenchantments)
  45 |       - [enchantmentTable.enchant(choice, [callback])](#enchantmenttableenchantchoice-callback)
  46 |       - [enchantmentTable.takeTargetItem([callback])](#enchantmenttabletaketargetitemcallback)
  47 |       - [enchantmentTable.putTargetItem(item, [callback])](#enchantmenttableputtargetitemitem-callback)
  48 |       - [enchantmentTable.putLapis(item, [callback])](#enchantmenttableputlapisitem-callback)
  49 |     - [mineflayer.anvil](#mineflayeranvil)
  50 |       - [anvil.combine(itemOne, itemTwo[, name, callback])](#anvilcombineitemone-itemtwo-name-callback)
  51 |       - [anvil.combine(item[, name, callback])](#anvilcombineitem-name-callback)
  52 |       - [villager "ready"](#villager-ready)
  53 |       - [villager.trades](#villagertrades)
  54 |       - [villager.trade(tradeIndex, [times], [cb])](#villagertradetradeindex-times-cb)
  55 |     - [mineflayer.ScoreBoard](#mineflayerscoreboard)
  56 |       - [ScoreBoard.name](#scoreboardname)
  57 |       - [ScoreBoard.title](#scoreboardtitle)
  58 |       - [ScoreBoard.itemsMap](#scoreboarditemsmap)
  59 |       - [ScoreBoard.items](#scoreboarditems)
  60 |     - [mineflayer.BossBar](#mineflayerbossbar)
  61 |       - [BossBar.title](#bossbartitle)
  62 |       - [BossBar.health](#bossbarhealth)
  63 |       - [BossBar.dividers](#bossbardividers)
  64 |       - [BossBar.entityUUID](#bossbarentityuuid)
  65 |       - [BossBar.shouldDarkenSky](#bossbarshoulddarkensky)
  66 |       - [BossBar.isDragonBar](#bossbarisdragonbar)
  67 |       - [BossBar.createFog](#bossbarcreatefog)
  68 |       - [BossBar.color](#bossbarcolor)
  69 |   - [Bot](#bot)
  70 |     - [mineflayer.createBot(options)](#mineflayercreatebotoptions)
  71 |     - [Properties](#properties)
  72 |       - [bot.world](#botworld)
  73 |         - [world "blockUpdate" (oldBlock, newBlock)](#world-blockupdate-oldblock-newblock)
  74 |         - [world "blockUpdate:(x, y, z)" (oldBlock, newBlock)](#world-blockupdatex-y-z-oldblock-newblock)
  75 |       - [bot.entity](#botentity)
  76 |       - [bot.entities](#botentities)
  77 |       - [bot.username](#botusername)
  78 |       - [bot.spawnPoint](#botspawnpoint)
  79 |       - [bot.heldItem](#bothelditem)
  80 |       - [bot.game.levelType](#botgameleveltype)
  81 |       - [bot.game.dimension](#botgamedimension)
  82 |       - [bot.game.difficulty](#botgamedifficulty)
  83 |       - [bot.game.gameMode](#botgamegamemode)
  84 |       - [bot.game.hardcore](#botgamehardcore)
  85 |       - [bot.game.maxPlayers](#botgamemaxplayers)
  86 |       - [bot.game.serverBrand](#botgameserverbrand)
  87 |     - [bot.physicsEnabled](#botphysicsenabled)
  88 |     - [bot.player](#botplayer)
  89 |       - [bot.players](#botplayers)
  90 |       - [bot.isRaining](#botisraining)
  91 |       - [bot.rainState](#botrainstate)
  92 |       - [bot.thunderState](#botthunderstate)
  93 |       - [bot.chatPatterns](#botchatpatterns)
  94 |       - [bot.settings.chat](#botsettingschat)
  95 |       - [bot.settings.colorsEnabled](#botsettingscolorsenabled)
  96 |       - [bot.settings.viewDistance](#botsettingsviewdistance)
  97 |       - [bot.settings.difficulty](#botsettingsdifficulty)
  98 |       - [bot.settings.skinParts](#botsettingsskinparts)
  99 |         - [bot.settings.skinParts.showCape](#botsettingsskinpartsshowcape)
 100 |         - [bot.settings.skinParts.showJacket](#botsettingsskinpartsshowjacket)
 101 |         - [bot.settings.skinParts.showLeftSleeve](#botsettingsskinpartsshowleftsleeve)
 102 |         - [bot.settings.skinParts.showRightSleeve](#botsettingsskinpartsshowrightsleeve)
 103 |         - [bot.settings.skinParts.showLeftPants](#botsettingsskinpartsshowleftpants)
 104 |         - [bot.settings.skinParts.showRightPants](#botsettingsskinpartsshowrightpants)
 105 |         - [bot.settings.skinParts.showHat](#botsettingsskinpartsshowhat)
 106 |       - [bot.experience.level](#botexperiencelevel)
 107 |       - [bot.experience.points](#botexperiencepoints)
 108 |       - [bot.experience.progress](#botexperienceprogress)
 109 |       - [bot.health](#bothealth)
 110 |       - [bot.food](#botfood)
 111 |       - [bot.foodSaturation](#botfoodsaturation)
 112 |       - [bot.oxygenLevel](#botoxygenlevel)
 113 |       - [bot.physics](#botphysics)
 114 |       - [bot.simpleClick.leftMouse (slot)](#botsimpleclickleftmouse-slot)
 115 |       - [bot.simpleClick.rightMouse (slot)](#botsimpleclickrightmouse-slot)
 116 |       - [bot.time.doDaylightCycle](#bottimedodaylightcycle)
 117 |       - [bot.time.bigTime](#bottimebigtime)
 118 |       - [bot.time.time](#bottimetime)
 119 |       - [bot.time.timeOfDay](#bottimetimeofday)
 120 |       - [bot.time.day](#bottimeday)
 121 |       - [bot.time.isDay](#bottimeisday)
 122 |       - [bot.time.moonPhase](#bottimemoonphase)
 123 |       - [bot.time.bigAge](#bottimebigage)
 124 |       - [bot.time.age](#bottimeage)
 125 |       - [bot.quickBarSlot](#botquickbarslot)
 126 |       - [bot.inventory](#botinventory)
 127 |       - [bot.targetDigBlock](#bottargetdigblock)
 128 |       - [bot.isSleeping](#botissleeping)
 129 |       - [bot.scoreboards](#botscoreboards)
 130 |       - [bot.scoreboard](#botscoreboard)
 131 |       - [bot.controlState](#botcontrolstate)
 132 |     - [Events](#events)
 133 |       - ["chat" (username, message, translate, jsonMsg, matches)](#chat-username-message-translate-jsonmsg-matches)
 134 |       - ["whisper" (username, message, translate, jsonMsg, matches)](#whisper-username-message-translate-jsonmsg-matches)
 135 |       - ["actionBar" (jsonMsg)](#actionbar-jsonmsg)
 136 |       - ["message" (jsonMsg, position)](#message-jsonmsg-position)
 137 |       - ["messagestr" (message, messagePosition, jsonMsg)](#messagestr-message-messageposition-jsonmsg)
 138 |       - ["inject_allowed"](#inject_allowed)
 139 |       - ["login"](#login)
 140 |       - ["spawn"](#spawn)
 141 |       - ["respawn"](#respawn)
 142 |       - ["game"](#game)
 143 |       - ["resourcePack" (url, hash)](#resourcepack-url-hash)
 144 |       - ["title" (title, type)](#title-title-type)
 145 |       - ["rain"](#rain)
 146 |       - ["weatherUpdate"](#weatherupdate)
 147 |       - ["time"](#time)
 148 |       - ["kicked" (reason, loggedIn)](#kicked-reason-loggedin)
 149 |       - ["end"](#end)
 150 |       - ["error" (err)](#error-err)
 151 |       - ["spawnReset"](#spawnreset)
 152 |       - ["death"](#death)
 153 |       - ["health"](#health)
 154 |       - ["breath"](#breath)
 155 |       - ["entitySwingArm" (entity)](#entityswingarm-entity)
 156 |       - ["entityHurt" (entity)](#entityhurt-entity)
 157 |       - ["entityDead" (entity)](#entitydead-entity)
 158 |       - ["entityTaming" (entity)](#entitytaming-entity)
 159 |       - ["entityTamed" (entity)](#entitytamed-entity)
 160 |       - ["entityShakingOffWater" (entity)](#entityshakingoffwater-entity)
 161 |       - ["entityEatingGrass" (entity)](#entityeatinggrass-entity)
 162 |       - ["entityWake" (entity)](#entitywake-entity)
 163 |       - ["entityEat" (entity)](#entityeat-entity)
 164 |       - ["entityCriticalEffect" (entity)](#entitycriticaleffect-entity)
 165 |       - ["entityMagicCriticalEffect" (entity)](#entitymagiccriticaleffect-entity)
 166 |       - ["entityCrouch" (entity)](#entitycrouch-entity)
 167 |       - ["entityUncrouch" (entity)](#entityuncrouch-entity)
 168 |       - ["entityEquip" (entity)](#entityequip-entity)
 169 |       - ["entitySleep" (entity)](#entitysleep-entity)
 170 |       - ["entitySpawn" (entity)](#entityspawn-entity)
 171 |       - ["itemDrop" (entity)](#itemdrop-entity)
 172 |       - ["playerCollect" (collector, collected)](#playercollect-collector-collected)
 173 |       - ["entityGone" (entity)](#entitygone-entity)
 174 |       - ["entityMoved" (entity)](#entitymoved-entity)
 175 |       - ["entityDetach" (entity, vehicle)](#entitydetach-entity-vehicle)
 176 |       - ["entityAttach" (entity, vehicle)](#entityattach-entity-vehicle)
 177 |       - ["entityUpdate" (entity)](#entityupdate-entity)
 178 |       - ["entityEffect" (entity, effect)](#entityeffect-entity-effect)
 179 |       - ["entityEffectEnd" (entity, effect)](#entityeffectend-entity-effect)
 180 |       - ["playerJoined" (player)](#playerjoined-player)
 181 |       - ["playerUpdated" (player)](#playerupdated-player)
 182 |       - ["playerLeft" (player)](#playerleft-player)
 183 |       - ["blockUpdate" (oldBlock, newBlock)](#blockupdate-oldblock-newblock)
 184 |       - ["blockUpdate:(x, y, z)" (oldBlock, newBlock)](#blockupdatex-y-z-oldblock-newblock)
 185 |       - ["blockPlaced" (oldBlock, newBlock)](#blockplaced-oldblock-newblock)
 186 |       - ["chunkColumnLoad" (point)](#chunkcolumnload-point)
 187 |       - ["chunkColumnUnload" (point)](#chunkcolumnunload-point)
 188 |       - ["soundEffectHeard" (soundName, position, volume, pitch)](#soundeffectheard-soundname-position-volume-pitch)
 189 |       - ["hardcodedSoundEffectHeard" (soundId, soundCategory, position, volume, pitch)](#hardcodedsoundeffectheard-soundid-soundcategory-position-volume-pitch)
 190 |       - ["noteHeard" (block, instrument, pitch)](#noteheard-block-instrument-pitch)
 191 |       - ["pistonMove" (block, isPulling, direction)](#pistonmove-block-ispulling-direction)
 192 |       - ["chestLidMove" (block, isOpen, block2)](#chestlidmove-block-isopen-block2)
 193 |       - ["blockBreakProgressObserved" (block, destroyStage)](#blockbreakprogressobserved-block-destroystage)
 194 |       - ["blockBreakProgressEnd" (block)](#blockbreakprogressend-block)
 195 |       - ["diggingCompleted" (block)](#diggingcompleted-block)
 196 |       - ["diggingAborted" (block)](#diggingaborted-block)
 197 |       - ["move"](#move)
 198 |       - ["forcedMove"](#forcedmove)
 199 |       - ["mount"](#mount)
 200 |       - ["dismount" (vehicle)](#dismount-vehicle)
 201 |       - ["windowOpen" (window)](#windowopen-window)
 202 |       - ["windowClose" (window)](#windowclose-window)
 203 |       - ["sleep"](#sleep)
 204 |       - ["wake"](#wake)
 205 |       - ["experience"](#experience)
 206 |       - ["scoreboardCreated" (scoreboard)](#scoreboardcreated-scoreboard)
 207 |       - ["scoreboardDeleted" (scoreboard)](#scoreboarddeleted-scoreboard)
 208 |       - ["scoreboardTitleChanged" (scoreboard)](#scoreboardtitlechanged-scoreboard)
 209 |       - ["scoreUpdated" (scoreboard, item)](#scoreupdated-scoreboard-item)
 210 |       - ["scoreRemoved" (scoreboard, item)](#scoreremoved-scoreboard-item)
 211 |       - ["scoreboardPosition" (position, scoreboard)](#scoreboardposition-position-scoreboard)
 212 |       - ["bossBarCreated" (bossBar)](#bossbarcreated-bossbar)
 213 |       - ["bossBarDeleted" (bossBar)](#bossbardeleted-bossbar)
 214 |       - ["bossBarUpdated" (bossBar)](#bossbarupdated-bossbar)
 215 |       - ["heldItemChanged" (heldItem)](#helditemchanged-helditem)
 216 |       - ["physicsTick" ()](#physicstick-)
 217 |       - ["chat:name" (matches)](#chatname-matches)
 218 |     - [Functions](#functions)
 219 |       - [bot.blockAt(point, extraInfos=true)](#botblockatpoint-extrainfostrue)
 220 |       - [bot.waitForChunksToLoad(cb)](#botwaitforchunkstoloadcb)
 221 |       - [bot.blockInSight(maxSteps, vectorLength)](#botblockinsightmaxsteps-vectorlength)
 222 |       - [bot.blockAtCursor(maxDistance=256)](#botblockatcursormaxdistance256)
 223 |       - [bot.canSeeBlock(block)](#botcanseeblockblock)
 224 |       - [bot.findBlocks(options)](#botfindblocksoptions)
 225 |       - [bot.findBlock(options)](#botfindblockoptions)
 226 |       - [bot.canDigBlock(block)](#botcandigblockblock)
 227 |       - [bot.recipesFor(itemType, metadata, minResultCount, craftingTable)](#botrecipesforitemtype-metadata-minresultcount-craftingtable)
 228 |       - [bot.recipesAll(itemType, metadata, craftingTable)](#botrecipesallitemtype-metadata-craftingtable)
 229 |       - [bot.nearestEntity(match = (entity) => { return true })](#botnearestentitymatch--entity---return-true-)
 230 |     - [Methods](#methods)
 231 |       - [bot.end()](#botend)
 232 |       - [bot.quit(reason)](#botquitreason)
 233 |       - [bot.tabComplete(str, cb, [assumeCommand], [sendBlockInSight])](#bottabcompletestr-cb-assumecommand-sendblockinsight)
 234 |       - [bot.chat(message)](#botchatmessage)
 235 |       - [bot.whisper(username, message)](#botwhisperusername-message)
 236 |       - [bot.chatAddPattern(pattern, chatType, description)](#botchataddpatternpattern-chattype-description)
 237 |       - [bot.addChatPattern(name, pattern, chatPatternOptions)](#botaddchatpatternname-pattern-chatpatternoptions)
 238 |       - [bot.addChatPatternSet(name, patterns, chatPatternOptions)](#botaddchatpatternsetname-patterns-chatpatternoptions)
 239 |       - [bot.removeChatPattern(name)](#botremovechatpatternname)
 240 |       - [bot.awaitMessage(...args)](#botawaitmessageargs)
 241 |       - [bot.setSettings(options)](#botsetsettingsoptions)
 242 |       - [bot.loadPlugin(plugin)](#botloadpluginplugin)
 243 |       - [bot.loadPlugins(plugins)](#botloadpluginsplugins)
 244 |       - [bot.hasPlugin(plugin)](#bothaspluginplugin)
 245 |       - [bot.sleep(bedBlock, [cb])](#botsleepbedblock-cb)
 246 |       - [bot.isABed(bedBlock)](#botisabedbedblock)
 247 |       - [bot.wake([cb])](#botwakecb)
 248 |       - [bot.setControlState(control, state)](#botsetcontrolstatecontrol-state)
 249 |       - [bot.getControlState(control)](#botgetcontrolstatecontrol)
 250 |       - [bot.clearControlStates()](#botclearcontrolstates)
 251 |       - [bot.lookAt(point, [force], [callback])](#botlookatpoint-force-callback)
 252 |       - [bot.look(yaw, pitch, [force], [callback])](#botlookyaw-pitch-force-callback)
 253 |       - [bot.updateSign(block, text)](#botupdatesignblock-text)
 254 |       - [bot.equip(item, destination, [callback])](#botequipitem-destination-callback)
 255 |       - [bot.unequip(destination, [callback])](#botunequipdestination-callback)
 256 |       - [bot.tossStack(item, [callback])](#bottossstackitem-callback)
 257 |       - [bot.toss(itemType, metadata, count, [callback])](#bottossitemtype-metadata-count-callback)
 258 |       - [bot.dig(block, [forceLook = true], [digFace], [callback])](#botdigblock-forcelook--true-digface-callback)
 259 |       - [bot.stopDigging()](#botstopdigging)
 260 |       - [bot.digTime(block)](#botdigtimeblock)
 261 |       - [bot.acceptResourcePack()](#botacceptresourcepack)
 262 |       - [bot.denyResourcePack()](#botdenyresourcepack)
 263 |       - [bot.placeBlock(referenceBlock, faceVector, cb)](#botplaceblockreferenceblock-facevector-cb)
 264 |       - [bot.placeEntity(referenceBlock, faceVector)](#botplaceentityreferenceblock-facevector)
 265 |       - [bot.activateBlock(block, [callback])](#botactivateblockblock-callback)
 266 |       - [bot.activateEntity(entity, [callback])](#botactivateentityentity-callback)
 267 |       - [bot.activateEntityAt(entity, position, [callback])](#botactivateentityatentity-position-callback)
 268 |       - [bot.consume(callback)](#botconsumecallback)
 269 |       - [bot.fish(callback)](#botfishcallback)
 270 |       - [bot.activateItem(offHand=false)](#botactivateitemoffhandfalse)
 271 |       - [bot.deactivateItem()](#botdeactivateitem)
 272 |       - [bot.useOn(targetEntity)](#botuseontargetentity)
 273 |       - [bot.attack(entity)](#botattackentity)
 274 |       - [bot.swingArm([hand], showHand)](#botswingarmhand-showhand)
 275 |       - [bot.mount(entity)](#botmountentity)
 276 |       - [bot.dismount()](#botdismount)
 277 |       - [bot.moveVehicle(left,forward)](#botmovevehicleleftforward)
 278 |       - [bot.setQuickBarSlot(slot)](#botsetquickbarslotslot)
 279 |       - [bot.craft(recipe, count, craftingTable, [callback])](#botcraftrecipe-count-craftingtable-callback)
 280 |       - [bot.writeBook(slot, pages, [callback])](#botwritebookslot-pages-callback)
 281 |       - [bot.openContainer(containerBlock or containerEntity)](#botopencontainercontainerblock-or-containerentity)
 282 |       - [bot.openChest(chestBlock or minecartchestEntity)](#botopenchestchestblock-or-minecartchestentity)
 283 |       - [bot.openFurnace(furnaceBlock)](#botopenfurnacefurnaceblock)
 284 |       - [bot.openDispenser(dispenserBlock)](#botopendispenserdispenserblock)
 285 |       - [bot.openEnchantmentTable(enchantmentTableBlock)](#botopenenchantmenttableenchantmenttableblock)
 286 |       - [bot.openAnvil(anvilBlock)](#botopenanvilanvilblock)
 287 |       - [bot.openVillager(villagerEntity)](#botopenvillagervillagerentity)
 288 |       - [bot.trade(villagerInstance, tradeIndex, [times], [cb])](#bottradevillagerinstance-tradeindex-times-cb)
 289 |       - [bot.setCommandBlock(pos, command, [options])](#botsetcommandblockpos-command-options)
 290 |       - [bot.supportFeature(name)](#botsupportfeaturename)
 291 |       - [bot.waitForTicks(ticks)](#botwaitforticksticks)
 292 |     - [Lower level inventory methods](#lower-level-inventory-methods)
 293 |       - [bot.clickWindow(slot, mouseButton, mode, cb)](#botclickwindowslot-mousebutton-mode-cb)
 294 |       - [bot.putSelectedItemRange(start, end, window, slot)](#botputselecteditemrangestart-end-window-slot)
 295 |       - [bot.putAway(slot)](#botputawayslot)
 296 |       - [bot.closeWindow(window)](#botclosewindowwindow)
 297 |       - [bot.transfer(options, cb)](#bottransferoptions-cb)
 298 |       - [bot.openBlock(block)](#botopenblockblock)
 299 |       - [bot.openEntity(entity)](#botopenentityentity)
 300 |       - [bot.moveSlotItem(sourceSlot, destSlot, cb)](#botmoveslotitemsourceslot-destslot-cb)
 301 |       - [bot.updateHeldItem()](#botupdatehelditem)
 302 |       - [bot.getEquipmentDestSlot(destination)](#botgetequipmentdestslotdestination)
 303 |     - [bot.creative](#botcreative)
 304 |       - [bot.creative.setInventorySlot(slot, item, [callback])](#botcreativesetinventoryslotslot-item-callback)
 305 |       - [bot.creative.flyTo(destination, [cb])](#botcreativeflytodestination-cb)
 306 |       - [bot.creative.startFlying()](#botcreativestartflying)
 307 |       - [bot.creative.stopFlying()](#botcreativestopflying)
 308 | 
 309 | <!-- END doctoc generated TOC please keep comment here to allow auto update -->
 310 | 
 311 | # API
 312 | 
 313 | ## Enums
 314 | 
 315 | Estos enums están guardados en un proyecto independiente del lenguaje [minecraft-data](https://github.com/PrismarineJS/minecraft-data),
 316 |  y accedidos por [node-minecraft-data](https://github.com/PrismarineJS/node-minecraft-data).
 317 | 
 318 | ### minecraft-data
 319 | Los datos están disponibles en el módulo [node-minecraft-data](https://github.com/PrismarineJS/node-minecraft-data)
 320 | 
 321 | `require('minecraft-data')(bot.version)` te da acceso a él.
 322 | 
 323 | ### mcdata.blocks
 324 | bloques ordenados por id
 325 | 
 326 | ### mcdata.items
 327 | items ordenados por id
 328 | 
 329 | ### mcdata.materials
 330 | 
 331 | El key es el material. El valor es un objeto con key como el id de la herramienta y el valor es el multiplicador de eficiencia.
 332 | 
 333 | ### mcdata.recipes
 334 | recetas ordenadas por id
 335 | 
 336 | ### mcdata.instruments
 337 | herramientas ordenadas por id
 338 | 
 339 | ### mcdata.biomes
 340 | biomas ordenados por id
 341 | 
 342 | ### mcdata.entities
 343 | entidades ordenadas por id
 344 | 
 345 | ## Clases
 346 | 
 347 | ### vec3
 348 | 
 349 | Mira [andrewrk/node-vec3](https://github.com/andrewrk/node-vec3)
 350 | 
 351 | Todos los puntos en mineflayer son instancias de esta clase.
 352 | 
 353 |  * x - south
 354 |  * y - up
 355 |  * z - west
 356 | 
 357 | Las funciones y los métodos que necesitan un punto aceptan instancias `Vec3`, un array con 3 valores, y un objeto con las propiedades `x`, `y`, y `z`.
 358 | 
 359 | ### mineflayer.Location
 360 | 
 361 | ### Entity
 362 | 
 363 | Las entidades representan jugadores, mobs, y objetos. Se emiten en muchos eventos, pero puedes acceder a tu propia entidad con `bot.entity`.
 364 | Mira [prismarine-entity](https://github.com/PrismarineJS/prismarine-entity)
 365 | 
 366 | ### Block
 367 | 
 368 | Mira [prismarine-block](https://github.com/PrismarineJS/prismarine-block)
 369 | 
 370 | También, `block.blockEntity` es un campo adicional con los datos de la entidad del bloque como `Object`
 371 | ```js
 372 | // sign.blockEntity
 373 | {
 374 |   x: -53,
 375 |   y: 88,
 376 |   z: 66,
 377 |   id: 'minecraft:sign', // 'Sign' in 1.10
 378 |   Text1: { toString: Function }, // ChatMessage object
 379 |   Text2: { toString: Function }, // ChatMessage object
 380 |   Text3: { toString: Function }, // ChatMessage object
 381 |   Text4: { toString: Function } // ChatMessage object
 382 | }
 383 | ```
 384 | 
 385 | ### Biome
 386 | 
 387 | Mira [prismarine-biome](https://github.com/PrismarineJS/prismarine-biome)
 388 | 
 389 | ### Item
 390 | 
 391 | Mira [prismarine-item](https://github.com/PrismarineJS/prismarine-item)
 392 | 
 393 | ### windows.Window (base class)
 394 | 
 395 | Mira [prismarine-windows](https://github.com/PrismarineJS/prismarine-windows)
 396 | 
 397 | #### window.deposit(itemType, metadata, count, [callback])
 398 | 
 399 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
 400 | 
 401 |  * `itemType` - id numérico del item
 402 |  * `metadata` - valor numérico. `null` significa que conicide cualquiera.
 403 |  * `count` - cuantos items hay que depositar. `null` es un alias de 1.
 404 |  * `callback(err)` - (opcional) - ejecutado al finalizar
 405 | 
 406 | #### window.withdraw(itemType, metadata, count, [callback])
 407 | 
 408 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
 409 | 
 410 |  * `itemType` - id numérico del item
 411 |  * `metadata` - valor numérico. `null` significa que coincide cualquiera.
 412 |  * `count` - cuantos items hay que retirar. `null` es un alias de 1.
 413 |  * `callback(err)` - (opcional) - ejecutado al finalizar
 414 | 
 415 | #### window.close()
 416 | 
 417 | Cierra la interfaz/ventana
 418 | 
 419 | ### Recipe
 420 | 
 421 | Mira [prismarine-recipe](https://github.com/PrismarineJS/prismarine-recipe)
 422 | 
 423 | ### mineflayer.Container
 424 | 
 425 | Extiende windows.Window para cofres, dispensadores, etc...
 426 | Mira `bot.openContainer(chestBlock o minecartchestEntity)`.
 427 | 
 428 | ### mineflayer.Furnace
 429 | 
 430 | Extiende windows.Window para hornos, fundidores, etc...
 431 | Mira `bot.openFurnace(funaceBlock)`.
 432 | 
 433 | #### furnace "update"
 434 | 
 435 | Se emite cuando `furnace.fuel` y/o `furnace.progress` se actualizan.
 436 | 
 437 | #### furnace.takeInput([callback])
 438 | 
 439 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
 440 | 
 441 |  * `callback(err, item)`
 442 | 
 443 | #### furnace.takeFuel([callback])
 444 | 
 445 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
 446 | 
 447 |  * `callback(err, item)`
 448 | 
 449 | #### furnace.takeOutput([callback])
 450 | 
 451 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
 452 | 
 453 |  * `callback(err, item)`
 454 | 
 455 | #### furnace.putInput(itemType, metadata, count, [cb])
 456 | 
 457 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
 458 | 
 459 | #### furnace.putFuel(itemType, metadata, count, [cb])
 460 | 
 461 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
 462 | 
 463 | #### furnace.inputItem()
 464 | 
 465 | Devuelve una instancia `Item` que es el item de entrada.
 466 | 
 467 | #### furnace.fuelItem()
 468 | 
 469 | Devuelve una instancia `Item` que es el combustible
 470 | 
 471 | #### furnace.outputItem()
 472 | 
 473 | Devuelve una instancia `Item` que es el item de salida.
 474 | 
 475 | #### furnace.fuel
 476 | 
 477 | Cuanto combustible queda del 0 al 1
 478 | 
 479 | #### furnace.progress
 480 | 
 481 | Cuanto esta hecho el item del 0 al 1
 482 | 
 483 | ### mineflayer.EnchantmentTable
 484 | 
 485 | Extiende windows.Window para mesas de encantamiento
 486 | Mira `bot.openEnchantmentTable(enchantmentTableBlock)`.
 487 | 
 488 | #### enchantmentTable "ready"
 489 | 
 490 | Se emite cuando `enchantmentTable.enchantments` está completo y puedes elegir un encantamiento ejecutando `enchantmentTable.enchant(choice)`.
 491 | 
 492 | #### enchantmentTable.targetItem()
 493 | 
 494 | Devuelve los items de entrada y de salida
 495 | 
 496 | #### enchantmentTable.xpseed
 497 | 
 498 | La semilla de XP de 16 bits mandada por el servidor
 499 | 
 500 | #### enchantmentTable.enchantments
 501 | 
 502 | Array de longitud 3 donde están 3 encantamientos que puedes elegir.
 503 | `level` puede ser `-1` si el servidor no ha mandado los datos todavía
 504 | 
 505 | Se parece a:
 506 | 
 507 | ```js
 508 | [
 509 |   {
 510 |     level: 3
 511 |   },
 512 |   {
 513 |     level: 4
 514 |   },
 515 |   {
 516 |     level: 9
 517 |   }
 518 | ]
 519 | ```
 520 | 
 521 | #### enchantmentTable.enchant(choice, [callback])
 522 | 
 523 | Esta función también devueve un `Promise`, con `item` como argumento al finalizar.
 524 | 
 525 |  * `choice` - [0-2], el índice del encantamiento que quieres escoger.
 526 |  * `callback(err, item)` - (opcional) ejecutado al finalizar
 527 | 
 528 | #### enchantmentTable.takeTargetItem([callback])
 529 | 
 530 | Esta función también devueve un `Promise`, con `item` como argumento al finalizar.
 531 | 
 532 |  * `callback(err, item)`
 533 | 
 534 | #### enchantmentTable.putTargetItem(item, [callback])
 535 | 
 536 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
 537 | 
 538 |  * `callback(err)`
 539 | 
 540 | #### enchantmentTable.putLapis(item, [callback])
 541 | 
 542 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
 543 | 
 544 |  * `callback(err)`
 545 | 
 546 | ### mineflayer.anvil
 547 | 
 548 | Extiende windows.Window para yunques
 549 | Mira `bot.openAnvil(anvilBlock)`.
 550 | 
 551 | #### anvil.combine(itemOne, itemTwo[, name, callback])
 552 | 
 553 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
 554 | 
 555 |  * `callback(err)` - para poder usar el callback, el nombre tiene que estar vacío ('')
 556 | 
 557 | #### anvil.combine(item[, name, callback])
 558 | 
 559 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
 560 | 
 561 |  * `callback(err)`
 562 | 
 563 | #### villager "ready"
 564 | 
 565 | Se emite cuando `villager.trades` se ha cargado.
 566 | 
 567 | #### villager.trades
 568 | 
 569 | Array de tradeos
 570 | 
 571 | Se parece a:
 572 | 
 573 | ```js
 574 | [
 575 |   {
 576 |     firstInput: Item,
 577 |     output: Item,
 578 |     hasSecondItem: false,
 579 |     secondaryInput: null,
 580 |     disabled: false,
 581 |     tooluses: 0,
 582 |     maxTradeuses: 7
 583 |   },
 584 |   {
 585 |     firstInput: Item,
 586 |     output: Item,
 587 |     hasSecondItem: false,
 588 |     secondaryInput: null,
 589 |     disabled: false,
 590 |     tooluses: 0,
 591 |     maxTradeuses: 7
 592 |   },
 593 |   {
 594 |     firstInput: Item,
 595 |     output: Item,
 596 |     hasSecondItem: true,
 597 |     secondaryInput: Item,
 598 |     disabled: false,
 599 |     tooluses: 0,
 600 |     maxTradeuses: 7
 601 |   }
 602 | ]
 603 | ```
 604 | 
 605 | #### villager.trade(tradeIndex, [times], [cb])
 606 | Es el mismo que [bot.trade(villagerInstance, tradeIndex, [times], [cb])](#bottradevillagerinstance-tradeindex-times-cb)
 607 | 
 608 | ### mineflayer.ScoreBoard
 609 | 
 610 | #### ScoreBoard.name
 611 | 
 612 | Nombre del scoreboard.
 613 | 
 614 | #### ScoreBoard.title
 615 | 
 616 | El título del scoreboard (no es siempre igual al nombre)
 617 | 
 618 | #### ScoreBoard.itemsMap
 619 | 
 620 | Un object con todos los items del scoreboard en él
 621 | ```js
 622 | {
 623 |   wvffle: { name: 'wvffle', value: 3 },
 624 |   dzikoysk: { name: 'dzikoysk', value: 6 }
 625 | }
 626 | ```
 627 | 
 628 | #### ScoreBoard.items
 629 | 
 630 | Un array con todos los items en el scoreboard en él
 631 | ```js
 632 | [
 633 |   { name: 'dzikoysk', value: 6 },
 634 |   { name: 'wvffle', value: 3 }
 635 | ]
 636 | ```
 637 | 
 638 | ### mineflayer.BossBar
 639 | 
 640 | #### BossBar.title
 641 | 
 642 | Título de la barra de vida del jefe, instancia de ChatMessage
 643 | 
 644 | #### BossBar.health
 645 | 
 646 | Porcentaje de la vida del jefe, del `0` al `1`
 647 | 
 648 | #### BossBar.dividers
 649 | 
 650 | Número de separadores en la barra, puede ser `0`, `6`, `10`, `12` o `20`
 651 | 
 652 | #### BossBar.entityUUID
 653 | 
 654 | UUID de la entidad del jefe
 655 | 
 656 | #### BossBar.shouldDarkenSky
 657 | 
 658 | Determina si el cielo debería oscurecerse o no
 659 | 
 660 | #### BossBar.isDragonBar
 661 | 
 662 | Determina si la barra es la barra de vida del dragón
 663 | 
 664 | #### BossBar.createFog
 665 | 
 666 | Determina si la barra crea niebla o no
 667 | 
 668 | #### BossBar.color
 669 | 
 670 | Determina el color de la barra entre `pink`, `blue`, `red`, `green`, `yellow`, `purple` y `white` (`rosa`, `azul`, `rojo`, `verde`, `amarillo`, `morado` y `blanco`)
 671 | 
 672 | ## Bot
 673 | 
 674 | ### mineflayer.createBot(options)
 675 | 
 676 | Crea y devuelve una instancia de la clase Bot.
 677 | `options` es un object que contiene las propiedades opcionales :
 678 |  * username : (usuario) el valor predeterminado es 'Player'
 679 |  * port : (puerto) el valor predeterminado es 25565
 680 |  * password : (contraseña) se puede omitir (si los tokens también son omitidos intentará conectarse en modo offline)
 681 |  * host : (ip) el valor predeterminado es localhost
 682 |  * version : si se omite intentará averiguar automáticamente la versión. Por ejemplo : "1.12.2"
 683 |  * auth : (autentificación) el valor predeterminado es 'mojang', también puede ser 'microsoft'
 684 |  * clientToken : generado si se proporciona una contraseña
 685 |  * accessToken : generado si se proporciona una contraseña
 686 |  * logErrors : el valor predeterminado es true, retiene errores y los imprime
 687 |  * hideErrors : el valor predeterminado es true, para ocultar errores (incluso si logErrors es true)
 688 |  * keepAlive : manda paquetes keepAlive : el valor predeterminado es true
 689 |  * checkTimeoutInterval : el valor predeterminado es `30*1000` (30s), comprueba si el paquete keepAlive ha sido recibido en ese periodo, desconectar el bot si no ha sido recibido.
 690 |  * loadInternalPlugins : (cargarPluginsInternos) el valor predeterminado es true
 691 |  * storageBuilder : una función opcional, toma como argumentos la versión y el nombre del mundo (worldName) y devuelve una instancia de algo con la misma API que prismarine-provider-anvil. Se usará para guardar el mundo.
 692 |  * client : una instancia de node-minecraft-protocol, si no se especifíca, mineflayer creará su propio cliente. Esto sirve para usar mineflayer a través de un proxy de muchos clientes o para un cliente vanilla y un cliente mineflayer.
 693 |  * plugins : object : el valor predeterminado es {}
 694 |    - pluginName : false : no cargar el plugin interno con ese nombre ej. `pluginName`
 695 |    - pluginName : true : carga el plugin interno con ese nombre ej. `pluginName` incluso si loadInternalPlugins está en false
 696 |    - pluginName : función para introducir : carga un plugin de terceros (externo), anula el plugin interno con el mismo nombre ej. `pluginName`
 697 |  * physicsEnabled : el valor predeterminado es true, si el bot debería ser afectado por las físicas, puede modificarse mediante bot.physicsEnabled
 698 |  * [chat](#bot.settings.chat)
 699 |  * [colorsEnabled](#bot.settings.colorsEnabled)
 700 |  * [viewDistance](#bot.settings.viewDistance)
 701 |  * [difficulty](#bot.settings.difficulty)
 702 |  * [skinParts](#bot.settings.skinParts)
 703 |  * chatLengthLimit : el valor máximo de carácteres que se pueden mandar con un solo mensaje. Si no se especifíca, será 100 en versiones anteriores a la 1.11 y 256 en la 1.11 a las posteriores de la 1.11
 704 | 
 705 | ### Properties
 706 | 
 707 | #### bot.world
 708 | 
 709 | Una representación sincronizada del mundo. Mira su documentación en http://github.com/PrismarineJS/prismarine-world
 710 | 
 711 | ##### world "blockUpdate" (oldBlock, newBlock)
 712 | 
 713 | Se emite cuando un bloque se actualiza. Devuelve el bloque antiguo `oldBlock` y el bloque nuevo `newBlock`.
 714 | 
 715 | Nota: `oldBlock` podría ser `null`.
 716 | 
 717 | ##### world "blockUpdate:(x, y, z)" (oldBlock, newBlock)
 718 | 
 719 | Se emite cuando un bloque en una coordenada se actualiza. Devuelve el bloque antiguo `oldBlock` y el bloque nuevo `newBlock`.
 720 | 
 721 | Nota: `oldBlock` podría ser `null`.
 722 | 
 723 | 
 724 | #### bot.entity
 725 | 
 726 | Tu propia entidad. Mira `Entity`.
 727 | 
 728 | #### bot.entities
 729 | 
 730 | Todas las entidades cercanas. Este object es un map de entityId (id de la entidad) a entity (entidad)
 731 | 
 732 | #### bot.username
 733 | 
 734 | Usa esto para averiguar tu propio nombre.
 735 | 
 736 | #### bot.spawnPoint
 737 | 
 738 | Coordenadas del punto de spawn, donde todas las brújulas apuntan.
 739 | 
 740 | #### bot.heldItem
 741 | 
 742 | El item en la mano del bot, presentado como una instancia [prismarine-item](https://github.com/PrismarineJS/prismarine-item) especificado con su metadata, nbtdata, etc.
 743 | 
 744 | #### bot.game.levelType
 745 | 
 746 | Tipo del nivel de juego
 747 | 
 748 | #### bot.game.dimension
 749 | 
 750 | Tipo de dimension
 751 | 
 752 | #### bot.game.difficulty
 753 | 
 754 | Tipo de dificultad de juego
 755 | 
 756 | #### bot.game.gameMode
 757 | 
 758 | Gamemode del bot
 759 | 
 760 | #### bot.game.hardcore
 761 | 
 762 | Si el juego está en hardcore o no
 763 | 
 764 | #### bot.game.maxPlayers
 765 | 
 766 | El número máximo de jugadores del juego
 767 | 
 768 | #### bot.game.serverBrand
 769 | 
 770 | La marca del servidor
 771 | 
 772 | ### bot.physicsEnabled
 773 | 
 774 | Si las físicas deberían habilitarse, el valor predeterminado es true.
 775 | 
 776 | ### bot.player
 777 | 
 778 | Object del jugador del bot
 779 | ```js
 780 | {
 781 |   username: 'player',
 782 |   displayName: { toString: Function }, // ChatMessage object.
 783 |   gamemode: 0,
 784 |   ping: 28,
 785 |   entity: entity // null si estás demasiado lejos (fuera de la zona renderizada)
 786 | }
 787 | ```
 788 | 
 789 | #### bot.players
 790 | 
 791 | Map de los nombres de los jugadores del juego
 792 | 
 793 | #### bot.isRaining
 794 | 
 795 | #### bot.rainState
 796 | 
 797 | Un número indicano el nivel de lluvia actual. Si no está lloviendo, este valdrá 0. Cuando empiece a llover, el valor aumentará gradualmente a 1. Y cuando pare de llover, disminuirá gradualmente a 0.
 798 | 
 799 | Cada vez que `bot.rainState` cambia, se emitirá el evento "weatherUpdate"
 800 | 
 801 | #### bot.thunderState
 802 | 
 803 | Un número indicando el nivel de tormenta de rayos actual. Si no hay tormenta, este valdrá 0. Cuando empiece una tormenta, el valor aumentará gradualmente a 1. Y cuando pare la tormenta, disminuirá gradualmente a 0.
 804 | 
 805 | Cada vez que `bot.thunderState` cambia, se emitirá el evento "weatherUpdate".
 806 | 
 807 | Esto es lo mismo que `bot.rainState`, pero para tormentas de rayos.
 808 | Para tormentas de rayos, `bot.rainState` y `bot.thunderState` cambiarán.
 809 | 
 810 | #### bot.chatPatterns
 811 | 
 812 | Esto es un array de objects de patrones, del siguiente formato:
 813 | { /regex/, "chattype", "description")
 814 |  * /regex/ - un patrón regex, debería tener al menos dos grupos de captura
 815 |  * 'chattype' - el tipo de chat que debería coincidir, puede ser "chat" o "whisper" (susurro), o también puede ser cualquiera.
 816 |  * 'description' - descripción del patrón, opcional.
 817 | 
 818 | #### bot.settings.chat
 819 | 
 820 | Opciones:
 821 | 
 822 |  * `enabled` (habilitado) (predeterminado)
 823 |  * `commandsOnly` (soloComandos)
 824 |  * `disabled` (deshabilitado)
 825 | 
 826 | #### bot.settings.colorsEnabled
 827 | 
 828 | Su valor predeterminado es true, si debería recibir códigos de color del servidor
 829 | 
 830 | #### bot.settings.viewDistance
 831 | 
 832 | Opciones:
 833 |  * `far` (lejano) (predeterminado)
 834 |  * `normal`
 835 |  * `short` (cercano)
 836 |  * `tiny` (diminuto)
 837 | 
 838 | #### bot.settings.difficulty
 839 | 
 840 | Lo mismo que server.properties.
 841 | 
 842 | #### bot.settings.skinParts
 843 | 
 844 | Estos booleans controlan si las partes externas de la skin del jugadordebería ser visible
 845 | 
 846 | ##### bot.settings.skinParts.showCape
 847 | 
 848 | Si tienes una capa puedes desactivarla cambiando esto a false
 849 | 
 850 | ##### bot.settings.skinParts.showJacket
 851 | 
 852 | Si debería mostrarse la skin externa del pecho
 853 | 
 854 | ##### bot.settings.skinParts.showLeftSleeve
 855 | 
 856 | Si debería mostrarse la skin externa del brazo izquierdo
 857 | 
 858 | ##### bot.settings.skinParts.showRightSleeve
 859 | 
 860 | Si debería mostrarse la skin externa del brazo derecho
 861 | 
 862 | ##### bot.settings.skinParts.showLeftPants
 863 | 
 864 | Si debería mostrarse la skin externa de la pierna izquierda
 865 | 
 866 | ##### bot.settings.skinParts.showRightPants
 867 | 
 868 | Si debería mostrarse la skin externa de la pierna derecha
 869 | 
 870 | ##### bot.settings.skinParts.showHat
 871 | 
 872 | Si debería mostrarse la skin externa de la cabeza
 873 | 
 874 | 
 875 | #### bot.experience.level
 876 | 
 877 | El nivel de experiencia del bot
 878 | 
 879 | #### bot.experience.points
 880 | 
 881 | Total de los puntos de experiencia del bot
 882 | 
 883 | #### bot.experience.progress
 884 | 
 885 | Entre 0 y 1 - cantidad que falta para llegar al siguiente nivel.
 886 | 
 887 | #### bot.health
 888 | 
 889 | Números entre el 0 y el 20 representando el número de mitades de corazón.
 890 | 
 891 | #### bot.food
 892 | 
 893 | Números entre el 0 y el 20 representando el número de mitades de muslos de pollo.
 894 | 
 895 | #### bot.foodSaturation
 896 | 
 897 | La saturación actúa como una "sobrecarga" de la comida. Si la saturación es mayor que 0, el nivel de la comida no disminuirá. Los jugadores que entran al juego automáticamente tienen una saturación de 5.0. Comer aumenta la saturación y el nivel de la comida.
 898 | 
 899 | #### bot.oxygenLevel
 900 | 
 901 | Número entre el 0 y el 20 representando el número de mitades de burbujas del nivel de oxígeno.
 902 | 
 903 | #### bot.physics
 904 | 
 905 | Modifica estos números para cambiar la gravedad, velocidad del salto, velocidad terminal, etc. Hazlo bajo tu propio riesgo
 906 | 
 907 | #### bot.simpleClick.leftMouse (slot)
 908 | 
 909 | abstracción de `bot.clickWindow(slot, 0, 0)`
 910 | 
 911 | #### bot.simpleClick.rightMouse (slot)
 912 | 
 913 | abstracción de `bot.clickWindow(slot, 1, 0)`
 914 | 
 915 | #### bot.time.doDaylightCycle
 916 | 
 917 | Si el gamerule doDaylightCycle es true o false.
 918 | 
 919 | #### bot.time.bigTime
 920 | 
 921 | El número total de ticks desde el día 0.
 922 | 
 923 | Este valor es de tipo BigInt y es muy preciso incluso con valores muy grandes. (más de 2^51 - 1 tick)
 924 | 
 925 | #### bot.time.time
 926 | 
 927 | El número total de ticks desde el día 0.
 928 | 
 929 | Ya que el límite de números en Javascript es de 2^51 - 1 bot.time.time es menos preciso en valores más altos que este límite, por eso es recomendado el uso de bot.time.bigTime.
 930 | Siendo realistas, probablemente nunca tendrás que usar bot.time.bigTime ya que alcanzará naturalmente 2^51 - 1 tick tras ~14280821 años reales.
 931 | 
 932 | #### bot.time.timeOfDay
 933 | 
 934 | Hora del día, en ticks.
 935 | 
 936 | La hora está basada en ticks, donde 20 ticks ocurren cada segundo. Hay 24000 ticks al día, haciendo que los días en Minecraft sean exactamente 20 minutos.
 937 | 
 938 | La hora del día está basada en el módulo timestamp 24000. 0 es el amanecer, 6000 es el mediodía, 12000 es el anochecer, y 18000 es medianoche.
 939 | 
 940 | #### bot.time.day
 941 | 
 942 | Día del mundo
 943 | 
 944 | #### bot.time.isDay
 945 | 
 946 | Si es de día o no
 947 | 
 948 | Basado en si la hora actual está entre los 13000 y 23000 ticks.
 949 | 
 950 | #### bot.time.moonPhase
 951 | 
 952 | Fase de la luna.
 953 | 
 954 | Entre 0 y 7 donde 0 es luna llena.
 955 | 
 956 | #### bot.time.bigAge
 957 | 
 958 | Edad del mundo, en ticks
 959 | 
 960 | Este valor es de tipo BigInt y es preciso incluso en valores muy altos. (más de 2^51 - 1 tick)
 961 | 
 962 | #### bot.time.age
 963 | 
 964 | Age of the world, in ticks.
 965 | 
 966 | Ya que el límite de números en Javascript es de 2^51 - 1 bot.time.age es menos preciso en valores más altos que este límite, por eso es recomendado el uso de bot.time.bigAge.
 967 | Siendo realistas, probablemente nunca tendrás que usar bot.time.bigAge ya que alcanzará naturalmente 2^51 - 1 tick tras ~14280821 años reales.
 968 | 
 969 | #### bot.quickBarSlot
 970 | 
 971 | Que casilla está seleccionada en la barra de acceso rápido (0 - 8).
 972 | 
 973 | #### bot.inventory
 974 | 
 975 | Una instancia [`Window`](https://github.com/PrismarineJS/prismarine-windows#windowswindow-base-class) (ventana/interfaz) representando tu inventario.
 976 | 
 977 | #### bot.targetDigBlock
 978 | 
 979 | El `block` (bloque) que estás picando/rompiendo en ese momento, o `null`.
 980 | 
 981 | #### bot.isSleeping
 982 | 
 983 | Boolean representando si estás durmiendo o no.
 984 | 
 985 | #### bot.scoreboards
 986 | 
 987 | Todos los scoreboards que el bot conoce en un object de forma nombre scoreboard -> scoreboard
 988 | 
 989 | #### bot.scoreboard
 990 | 
 991 | Todos los scoreboards que el bot conoce en un object de forma casilla de visualización -> scoreboard.
 992 | 
 993 |  * `belowName` - scoreboard que está debajo del nombre
 994 |  * `sidebar` - scoreboard que está en la barra del lado
 995 |  * `list` - scoreboard que está en la lista
 996 |  * `0-18` - casillas definidas en el [protocol](https://wiki.vg/Protocol#Display_Scoreboard)
 997 | 
 998 | #### bot.controlState
 999 | 
1000 | Un object que contiene los estados de control principales: ['forward', 'back', 'left', 'right', 'jump', 'sprint', 'sneak']. ('adelante', 'atrás', 'izquierda', 'derecha', 'salto', 'sprint/correr', 'agachado')
1001 | 
1002 | Estos valores se pueden usar en [bot.setControlState](#botsetcontrolstatecontrol-state).
1003 | 
1004 | ### Events
1005 | 
1006 | #### "chat" (username, message, translate, jsonMsg, matches)
1007 | 
1008 | Solo se emite cuando un jugador chatea públicamente.
1009 | 
1010 |  * `username` - el jugador que ha mandado el mensaje (compáralo con `bot.username` para ignorar tus propios mensajes)
1011 |  * `message` - mensaje sin códigos de color
1012 |  * `translate` - tipo de mensaje de chat. Null para la mayoría de mensajes de bukkit
1013 |  * `jsonMsg` - mensaje JSON sin modificar del servidor
1014 |  * `matches` - array de las coincidencias devueltas de las expresiones regulares. Puede ser Null
1015 | 
1016 | #### "whisper" (username, message, translate, jsonMsg, matches)
1017 | 
1018 | Solos se emite cuando un jugador chatea contigo en privado (susurro).
1019 | 
1020 |  * `username` - el jugador que ha mandado el mensaje
1021 |  * `message` - mensaje sin códigos de color
1022 |  * `translate` - tipo de mensaje de chat. Null para la mayoría de mensajes de bukkit
1023 |  * `jsonMsg` - mensaje JSON sin modificar del servidor
1024 |  * `matches` - array de las coincidencias devueltas de las expresiones regulares. Puede ser Null
1025 | 
1026 | #### "actionBar" (jsonMsg)
1027 | 
1028 | Se emite por cada mensaje del servidor que aparece en la barra de acción.
1029 | 
1030 |  * `jsonMsg` - mensaje JSON sin modificar del servidor
1031 | 
1032 | #### "message" (jsonMsg, position)
1033 | 
1034 | Se emite por cada mensaje del servidor, incluye chats.
1035 | 
1036 |  * `jsonMsg` - mensaje JSON sin modificar del servidor
1037 | 
1038 |  * `position` - (>= 1.8.1): la posición del mensaje de chat puede ser
1039 |    * chat
1040 |    * system
1041 |    * game_info
1042 | 
1043 | #### "messagestr" (message, messagePosition, jsonMsg)
1044 | 
1045 | Parecido a "message" pero ejecuta .toString() en el mensaje JSON para obtener un string del mensaje antes de que se emita.
1046 | 
1047 | #### "inject_allowed"
1048 | Se enute cuando el archivo index se ha cargado, puedes cargar mcData o los plugins aquí, pero es mejor esperar al evento "spawn".
1049 | 
1050 | #### "login"
1051 | 
1052 | Se emite tras registrarse en el servidor.
1053 | Aunque probablemente quieras esperar al evento "spawn" antes de hacer algo.
1054 | 
1055 | #### "spawn"
1056 | 
1057 | Se emite cuando te registras y spawneas y cuando respawneas al morir.
1058 | 
1059 | Normalmente este es el evento que quieres recibir antes de hacer algo en el servidor.
1060 | 
1061 | #### "respawn"
1062 | 
1063 | Se emite al cambiar dimensiones o justo antes de spawnear.
1064 | Normalmente querrás ignorar este evento y esperar hasta que el evento "spawn" se emita.
1065 | 
1066 | #### "game"
1067 | 
1068 | Se emite cuando el servidor cambia cualquiera de sus propiedades
1069 | 
1070 | #### "resourcePack" (url, hash)
1071 | 
1072 | Se emite cuando el servidor manda un paquete de recursos
1073 | 
1074 | #### "title" (title, type)
1075 | 
1076 | Se emite cuando el servidor manda/muestra un título
1077 | 
1078 |  * `title` - texto del título
1079 |  * `type` - tipo del título "subtitle" o "title"
1080 | 
1081 | #### "rain"
1082 | 
1083 | Se emite cuando empieza a llover o cuando para. Si cuando entras a un servidor ya está lloviendo, este evento se emitirá.
1084 | 
1085 | #### "weatherUpdate"
1086 | 
1087 | Se emite cuando `bot.thunderState` o `bot.rainState` cambia.
1088 | Si cuando entras a un servidor y está lloviendo, este evento se emitirá.
1089 | 
1090 | #### "time"
1091 | 
1092 | Se emite cuando el servidor cambia/actualiza su hora. Mira `bot.time`.
1093 | 
1094 | #### "kicked" (reason, loggedIn)
1095 | 
1096 | Se emite cuando el bot es echado del servidor. `reason` es un mensaje de chat con la razón del kickeo. `loggedIn` será `true` si el cliente ya estaba conectado cuando se le echó, y `false` si el cliente fue echado durante el proceso de registración.
1097 | 
1098 | #### "end"
1099 | 
1100 | Se emite cuando ya no estás conectado en el servidor.
1101 | 
1102 | #### "error" (err)
1103 | 
1104 | Se emite cuando ocurre un error.
1105 | 
1106 | #### "spawnReset"
1107 | 
1108 | Se emite cuando no puedes spawnear en tu cama, y se resetea tu spawn.
1109 | 
1110 | #### "death"
1111 | 
1112 | Se emite al morir
1113 | 
1114 | #### "health"
1115 | 
1116 | Se emite cuando tu vida o el nivel de comida cambia.
1117 | 
1118 | #### "breath"
1119 | 
1120 | Se emite cuando tu nivel de oxígeno cambia.
1121 | 
1122 | #### "entitySwingArm" (entity)
1123 | 
1124 | Se emite cuando una entidad mueve su brazo.
1125 | 
1126 | #### "entityHurt" (entity)
1127 | 
1128 | Se emite cuando una entidad se hace daño.
1129 | 
1130 | #### "entityDead" (entity)
1131 | 
1132 | Se emite cuando una entidad muere.
1133 | 
1134 | #### "entityTaming" (entity)
1135 | 
1136 | Se emite cuando una entidad está siendo domesticada.
1137 | 
1138 | #### "entityTamed" (entity)
1139 | 
1140 | Se emite cuando una entidad es domesticada.
1141 | 
1142 | #### "entityShakingOffWater" (entity)
1143 | 
1144 | Se emite cuando una entidad se seca (lobos por ejemplo).
1145 | 
1146 | #### "entityEatingGrass" (entity)
1147 | 
1148 | Se emite cuando una entidad come hierba.
1149 | 
1150 | #### "entityWake" (entity)
1151 | 
1152 | Se emite cuando una entidad se despierta.
1153 | 
1154 | #### "entityEat" (entity)
1155 | 
1156 | Se emite cuando una entidad come.
1157 | 
1158 | #### "entityCriticalEffect" (entity)
1159 | 
1160 | Se emite cuando una entidad recibe un ataque crítico.
1161 | 
1162 | #### "entityMagicCriticalEffect" (entity)
1163 | 
1164 | Se emite cuando una entidad recibe un ataque crítico con pociones.
1165 | 
1166 | #### "entityCrouch" (entity)
1167 | 
1168 | Se emite cuando una entidad se agacha.
1169 | 
1170 | #### "entityUncrouch" (entity)
1171 | 
1172 | Se emite cuando una entidad deja de agacharse.
1173 | 
1174 | #### "entityEquip" (entity)
1175 | 
1176 | Se emite cuando una entidad equipa algo.
1177 | 
1178 | #### "entitySleep" (entity)
1179 | 
1180 | Se emite cuando una entidad se duerme.
1181 | 
1182 | #### "entitySpawn" (entity)
1183 | 
1184 | Se emite cuando una entidad aparece.
1185 | 
1186 | #### "itemDrop" (entity)
1187 | 
1188 | Se emite cuando una entidad se dropea (los items también son entidades).
1189 | 
1190 | #### "playerCollect" (collector, collected)
1191 | 
1192 | Se emite cuando una entidad recoge un item.
1193 | 
1194 |  * `collector` - la entidad que ha recogido el item.
1195 |  * `collected` - la entidad que fue recogida (el item).
1196 | 
1197 | #### "entityGone" (entity)
1198 | 
1199 | Se emite cuando una entidad desaparece (muere, despawnea).
1200 | 
1201 | #### "entityMoved" (entity)
1202 | 
1203 | Se emite cuando una entidad se mueve.
1204 | 
1205 | #### "entityDetach" (entity, vehicle)
1206 | 
1207 | Se emite cuando una entidad se baja en un vehículo.
1208 | 
1209 | #### "entityAttach" (entity, vehicle)
1210 | 
1211 | Se emite cuando una entidad se sube en un vehículo.
1212 | 
1213 |  * `entity` - la entidad que se ha subido
1214 |  * `vehicle` - la entidad del vehículo (minecart, caballo)
1215 | 
1216 | #### "entityUpdate" (entity)
1217 | 
1218 | Se emite cuando una entidad actualiza una de sus propiedades.
1219 | 
1220 | #### "entityEffect" (entity, effect)
1221 | 
1222 | Se emite cuando una entidad obtiene un efecto.
1223 | 
1224 | #### "entityEffectEnd" (entity, effect)
1225 | 
1226 | Se emite cuando una entidad finaliza un efecto.
1227 | 
1228 | #### "playerJoined" (player)
1229 | 
1230 | Se emite cuando un jugador se une al servidor.
1231 | 
1232 | #### "playerUpdated" (player)
1233 | 
1234 | Se emite cuando un jugador actualiza una de sus propiedades.
1235 | 
1236 | #### "playerLeft" (player)
1237 | 
1238 | Se emite cuando un jugador se desconecta del servidor.
1239 | 
1240 | #### "blockUpdate" (oldBlock, newBlock)
1241 | 
1242 | (Es mejor usar este evento desde bot.world en vez que desde bot directamente) Se emite cuando un bloque se actualiza. Devuelve `oldBlock` y `newBlock`.
1243 | 
1244 | Nota: `oldBlock` puede ser `null`.
1245 | 
1246 | #### "blockUpdate:(x, y, z)" (oldBlock, newBlock)
1247 | 
1248 | (Es mejor usar este evento desde bot.world en vez que desde bot directamente) Se emite cuando un bloque en una coordenada específica se actualiza. Devuelve `oldBlock` y `newBlock`.
1249 | 
1250 | Nota: `oldBlock` puede ser `null`.
1251 | 
1252 | #### "blockPlaced" (oldBlock, newBlock)
1253 | 
1254 | Se emite cuando el bot coloca un bloque. Devuelve `oldBlock` y `newBlock`.
1255 | 
1256 | Nota: `oldBlock` puede ser `null`.
1257 | 
1258 | #### "chunkColumnLoad" (point)
1259 | 
1260 | Se emite cuando un chunk se carga
1261 | 
1262 | #### "chunkColumnUnload" (point)
1263 | 
1264 | Se emite cuando un chunk se actualiza. `point` es la coordenada de la esquina del chunk con los valores x, y, y z más pequeños.
1265 | 
1266 | #### "soundEffectHeard" (soundName, position, volume, pitch)
1267 | 
1268 | Se emite cuando el cliente oye un efecto de sonido con nombre.
1269 | 
1270 |  * `soundName`: nombre del efecto de sonido
1271 |  * `position`: una instancia Vec3 indicando el punto de donde el sonido ha originado
1272 |  * `volume`: volumen con punto flotante, 1.0 es 100%
1273 |  * `pitch`: tono con números enteros, 63 es 100%
1274 | 
1275 | #### "hardcodedSoundEffectHeard" (soundId, soundCategory, position, volume, pitch)
1276 | 
1277 |   Se emite cuando el cliente oye un efecto de sonido codificado.
1278 | 
1279 |    * `soundId`: id del efecto de sonido
1280 |    * `soundCategory`: categoría del efecto de sonido
1281 |    * `position`: una instancia Vec3 indicando el punto de donde el sonido ha originado
1282 |    * `volume`: volumen con punto flotante, 1.0 es 100%
1283 |    * `pitch`: tono con números enteros, 63 es 100%
1284 | 
1285 | #### "noteHeard" (block, instrument, pitch)
1286 | 
1287 | Se emite cuando un bloque de notas se dispara en algún sitio
1288 | 
1289 |  * `block`: una instancia Block, el bloque que ha emitido el sonido
1290 |  * `instrument`:
1291 |    - `id`: id con números enteros
1292 |    - `name`: uno de estos [`harp`, `doubleBass`, `snareDrum`, `sticks`, `bassDrum`]. (`harpa`, `dobleBajo`, `tambor`, `palos`, `tamborBajo`)
1293 |  * `pitch`: El tono de la nota (entre 0 y 24 ambos incluídos donde 0 es el más bajo y 24 es el más alto). Se puede leer más (sobre como los valores de los tonos corresponden a las notas en la vida real) aquí: [official Minecraft wiki](http://minecraft.wiki/w/Note_Block).
1294 | 
1295 | #### "pistonMove" (block, isPulling, direction)
1296 | 
1297 | Se emite cuando un pistón se mueve.
1298 | 
1299 | #### "chestLidMove" (block, isOpen, block2)
1300 | 
1301 | Se emite cuando la tapa de un cofre se mueve
1302 | 
1303 | * `block`: una instancia de Block, el bloque de la tapadera que se ha movido. El bloque derecho si es un cofre doble
1304 | * `isOpen`: número de jugadores que tienen el cofre abierto
1305 | * `block2`: una instancia de Block, la otra mitad del bloque donde la tapadera se movió. null si no es un cofre doble
1306 | 
1307 | #### "blockBreakProgressObserved" (block, destroyStage)
1308 | 
1309 | Se emite cuando el cliente observa un bloque mientras este se está rompiendo
1310 | 
1311 |  * `block`: una instancia de Block, el que se está rompiendo
1312 |  * `destroyStage`: número entero correspondiente al progreso (0-9)
1313 | 
1314 | #### "blockBreakProgressEnd" (block)
1315 | 
1316 | Se emite cuando el cliente observa un bloque que termina de romperse
1317 | Esto ocurre cuando el proceso fue completado o abortado.
1318 | 
1319 |  * `block`: una instancia de Block, el bloque que ya no está siendo roto
1320 | 
1321 | #### "diggingCompleted" (block)
1322 | 
1323 | Se emite cuando se ha terminado de romper un bloque.
1324 |  * `block` - el bloque que ya no existe
1325 | 
1326 | #### "diggingAborted" (block)
1327 | 
1328 | Se emite cuando se ha abortado el proceso de rotura de un bloque.
1329 |  * `block` - el bloque que todavía existe
1330 | 
1331 | #### "move"
1332 | 
1333 | Se emite cuando el bot se mueve. Si quieres la posición actual, puedes usar `bot.entity.position` y si quieres averiguar la posición anterior, usa `bot.entity.positon.minus(bot.entity.velocity)`
1334 | 
1335 | #### "forcedMove"
1336 | 
1337 | Se emite cuando el bot es movido forzadamente por el servidor (teletransporte, spawnear, ...). Si quieres la posición actual, usa `bot.entity.position`.
1338 | 
1339 | #### "mount"
1340 | 
1341 | Se emite cuando el bot se sube a una entidad como un minecart. Para tener acceso a la entidad, usa `bot.vehicle`.
1342 | 
1343 | Para subirte a una entidad, usa `mount`.
1344 | 
1345 | #### "dismount" (vehicle)
1346 | 
1347 | Se emite cuando te bajas de una entidad.
1348 | 
1349 | #### "windowOpen" (window)
1350 | 
1351 | Se emite cuando empiezas a usar una mesa de crafteo, cofre, mesa de pociones, etc.
1352 | 
1353 | #### "windowClose" (window)
1354 | 
1355 | Se emite cuando ya no estás usando una mesa de crafteo, cofre, etc.
1356 | 
1357 | #### "sleep"
1358 | 
1359 | Se emite cuando duermes.
1360 | 
1361 | #### "wake"
1362 | 
1363 | Se emite cuando te despiertas.
1364 | 
1365 | #### "experience"
1366 | 
1367 | Se emite cuando `bot.experience.*` cambia.
1368 | 
1369 | #### "scoreboardCreated" (scoreboard)
1370 | 
1371 | Se emite cuando se crea un scoreboard.
1372 | 
1373 | #### "scoreboardDeleted" (scoreboard)
1374 | 
1375 | Se emite cuando se elimina un scoreboard.
1376 | 
1377 | #### "scoreboardTitleChanged" (scoreboard)
1378 | 
1379 | Se emite cuando el título de un scoreboard se actualiza.
1380 | 
1381 | #### "scoreUpdated" (scoreboard, item)
1382 | 
1383 | Se emite cuando la puntuación de un item en el scoreboard se actualiza.
1384 | 
1385 | #### "scoreRemoved" (scoreboard, item)
1386 | 
1387 | Se emite cuando la puntuación de un item en el scoreboard se elimina.
1388 | 
1389 | #### "scoreboardPosition" (position, scoreboard)
1390 | 
1391 | Se emite cuando la posición de un scoreboard se actualiza.
1392 | 
1393 | #### "bossBarCreated" (bossBar)
1394 | 
1395 | Se emite cuando se crea una barra de vida de jefe.
1396 | 
1397 | #### "bossBarDeleted" (bossBar)
1398 | 
1399 | Se emite cuando se elimina una barra.
1400 | 
1401 | #### "bossBarUpdated" (bossBar)
1402 | 
1403 | Se emite cuando se actualiza una barra.
1404 | 
1405 | #### "heldItemChanged" (heldItem)
1406 | 
1407 | Se emite cuando el item que sostienes cambia.
1408 | 
1409 | #### "physicsTick" ()
1410 | 
1411 | Se emite por cada tick si bot.physicsEnabled está en true.
1412 | 
1413 | #### "chat:name" (matches)
1414 | 
1415 | Se emite cuando todos patrones de chat tienen coincidencias.
1416 | 
1417 | ### Functions
1418 | 
1419 | #### bot.blockAt(point, extraInfos=true)
1420 | 
1421 | Devuelve el bloque en el `point` (punto: un Vec3) o `null` si ese punto no está cargado. Si `extraInfos` está en true, también devuelve informaciones sobre carteles, cuadros y entidades de bloques (más lento). Mira `Block`.
1422 | 
1423 | #### bot.waitForChunksToLoad(cb)
1424 | 
1425 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
1426 | 
1427 | El cb se ejecuta cuando se han cargado bastantes chunks.
1428 | 
1429 | #### bot.blockInSight(maxSteps, vectorLength)
1430 | 
1431 | Obsoleto, usar `blockAtCursor` en su lugar.
1432 | 
1433 | Devuelve el bloque que se encuentra en el cursor del bot o `null`
1434 |  * `maxSteps` - Número de pasos del trazado de rayos, el valor predeterminado es 256.
1435 |  * `vectorLength` - Longitud del vector del trazado de rayos, el valor predeterminado es `5/16`.
1436 | 
1437 | #### bot.blockAtCursor(maxDistance=256)
1438 | 
1439 | Devuelve el bloque que se encuentra en el cursor del bot o `null`
1440 |  * `maxDistance` - Distancia máxima a la que el bloque puede estar del ojo, el valor predeterminado es 256.
1441 | 
1442 | #### bot.canSeeBlock(block)
1443 | 
1444 | Devuelve true o false dependiendo de si el bot puede ver el `block` (bloque).
1445 | 
1446 | #### bot.findBlocks(options)
1447 | 
1448 | Encuentra los bloques más cercanos al punto establecido.
1449 |  * `options` - Opciones de búsqueda:
1450 |    - `point` - La posición por donde empezar la búsqueda (centro). Predeterminado: la posición del bot.
1451 |    - `matching` - Una función que devuelve true si el bloque cumple las condiciones. También puede ser un ID de un bloque o un array de IDs.
1452 |    - `useExtraInfo` - Puede ser de dos tipos para preservar una compatibilidad a la inversa.
1453 |       - **boolean** - Proporcionas tu función `matching` más datos - más lento
1454 |       - **function** - Se hace mediante dos pasos, si el bloque pasa las condiciones de la función `matching` se pasa a `useExtraInfo` con información adicional
1455 |    - `maxDistance` - La distancia máxima de búsqueda, predeterminado: 16.
1456 |    - `count` - Número de bloques que hay que encontrar antes de devolver los resultados. Predeterminado: 1. Puede devolver menos si no hay suficientes bloques.
1457 | 
1458 | Devuelve un array (puede estar vació) con las coordenadas de los bloques encontrados (no devuelve instancias de bloques). El array es ordenado (los más cercanos primero)
1459 | 
1460 | #### bot.findBlock(options)
1461 | 
1462 | Parecido a `bot.blockAt(bot.findBlocks(options)[0])`. Devuelve un único bloque o `null`.
1463 | 
1464 | #### bot.canDigBlock(block)
1465 | 
1466 | Devuelve si `block` está dentro del rango y si es posible picarlo.
1467 | 
1468 | #### bot.recipesFor(itemType, metadata, minResultCount, craftingTable)
1469 | 
1470 | Devuelve una lista de instancias `Recipe` (receta) que puedes usar para craftear `itemType` con `metadata`.
1471 | 
1472 |  * `itemType` - ID numérico de la cosa que quieres craftear
1473 |  * `metadata` - el valor numérico de metada del item que quieres craftear, `null` significa "con cualquier valor de metadata".
1474 |  * `minResultCount` - se basa en tu inventario actual, cualquier receta de la lista devuelta podrá producir este número de items. `null` significa `1`.
1475 |  * `craftingTable` - (mesa de crafteo) una instancia `Block`. Si es `null`, solo recetas que se pueden hacer en el inventario estarán incluidas en la lista.
1476 | 
1477 | #### bot.recipesAll(itemType, metadata, craftingTable)
1478 | 
1479 | Parecido a bot.recipesFor pero este no comprueba si el bot tiene suicientes materiales para la receta.
1480 | 
1481 | #### bot.nearestEntity(match = (entity) => { return true })
1482 | 
1483 | Devuelve la entidad más cercana al bot, correspondiendo a la función (predeterminado: todas las entidades).
1484 | Devuelve null si no se encuentra una entidad.
1485 | 
1486 | ### Methods
1487 | 
1488 | #### bot.end()
1489 | 
1490 | Termina la conexión con el servidor.
1491 | 
1492 | #### bot.quit(reason)
1493 | 
1494 | Para desconectarse con elegancia del servidor con una razón (predeterminado: 'disconnect.quitting')
1495 | 
1496 | #### bot.tabComplete(str, cb, [assumeCommand], [sendBlockInSight])
1497 | 
1498 | Esta función también devueve un `Promise`, con `matches` como argumento al finalizar.
1499 | 
1500 | Solicita completar el mensaje de chat (para comandos).
1501 |  * `str` - String para completar.
1502 |  * `callback(matches)`
1503 |    - `matches` - Array de strings que coinciden.
1504 |  * `assumeCommand` - Campo mandado al servidor, predeterminado: false.
1505 |  * `sendBlockInSight` - Campo mandado al servidor, predeterminado: true. Cambiarlo a false si quiere más eficacia.
1506 | 
1507 | #### bot.chat(message)
1508 | 
1509 | Manda un mensaje público al chat. Rompe grandes mensajes en trozos y los manda como múltiples mensajes si es necesario.
1510 | 
1511 | #### bot.whisper(username, message)
1512 | 
1513 | Atajo de "/tell <username>" (usuario). Todos los trozos serán susurrados al usuario.
1514 | 
1515 | #### bot.chatAddPattern(pattern, chatType, description)
1516 | 
1517 | Obsoleto, usar `addChatPattern` en su lugar.
1518 | 
1519 | Añade un patrón regex a la lista de patrones del bot. Útil para servidores bukkit donde el formato de chat cambia mucho.
1520 |  * `pattern` - patrón regex para concidir
1521 |  * `chatType` - el evento que el bot emite cuando el patrón coincide: Ej. "chat" or "whisper"
1522 |  * 'description ' - Opcional, descripción del patrón
1523 | 
1524 | #### bot.addChatPattern(name, pattern, chatPatternOptions)
1525 | 
1526 | ** esto es parecido a `bot.addChatPatternSet(name, [pattern], chatPatternOptions)`
1527 | 
1528 | crea un evento que se emite cada vez que coincide un patrón, el evento se llamará `"chat:nombre"`, siendo nombre el nombre que se ha proporcionado
1529 | * `name` - el nombre usado para el evento
1530 | * `pattern` - expresión regular para probar en los mensajes
1531 | * `chatPatternOptions` - object
1532 |   * `repeat` - predeterminado: true, si seguir probando despues de coincidir una vez
1533 |   * `parse` - en vez de devolver el mensaje, devolver los grupos de captura del regex
1534 |   * `deprecated` - (**unstable**) (inestable) usado por bot.chatAddPattern para mantener compatibilidad, seguramente sea quitado
1535 | 
1536 | devuelve un número que puede usarse en bot.removeChatPattern() para eliminar ese patrón
1537 | 
1538 | #### bot.addChatPatternSet(name, patterns, chatPatternOptions)
1539 | 
1540 | crea un evento que se emite cada vez que coinciden todos los patrones, el evento se llamará `"chat:nombre"`, siendo nombre el nombre que se ha proporcionado
1541 | * `name` - el nombre usado para el evento
1542 | * `patterns` - expresión regular para probar en los mensajes
1543 | * `chatPatternOptions` - object
1544 |   * `repeat` - predeterminado: true, si seguir probando despues de coincidir una vez
1545 |   * `parse` - en vez de devolver el mensaje, devolver los grupos de captura del regex
1546 | 
1547 | devuelve un número que puede usarse en bot.removeChatPattern() para eliminar ese set de patrones
1548 | 
1549 | #### bot.removeChatPattern(name)
1550 | 
1551 | Elimina un patrón / unos patrones
1552 | * `name` : string o número
1553 | 
1554 | si name es un string, todos los patrones con ese nombre serán eliminados, al contrario, si es un número, solo se eliminará ese patrón exacto
1555 | 
1556 | #### bot.awaitMessage(...args)
1557 | 
1558 | promise (promesa) que se resuelve cuando uno de los mensajes proporcionados se resuelve
1559 | 
1560 | Ejemplo:
1561 | 
1562 | ```js
1563 | async function wait () {
1564 |   await bot.awaitMessage('<flatbot> hello world') // resolves on "hello world" in chat by flatbot (se resuelve cuando un usuario llamado flatbot escribe "hello world" en el chat)
1565 |   await bot.awaitMessage(['<flatbot> hello', '<flatbot> world']) // resolves on "hello" or "world" in chat by flatbot (se resuelve cuando un usuario llamado flatbot escribe "hello" o "world" en el chat)
1566 |   await bot.awaitMessage(['<flatbot> hello', '<flatbot> world'], ['<flatbot> im', '<flatbot> batman']) // resolves on "hello" or "world" or "im" or "batman" in chat by flatbot (se resuelve cuando un usuario llamado flatbot escribe "hello world", "world", "im" o "batman" en el chat)
1567 |   await bot.awaitMessage('<flatbot> hello', '<flatbot> world') // resolves on "hello" or "world" in chat by flatbot
1568 |   await bot.awaitMessage(/<flatbot> (.+)/) // resolves on first message matching the regex (se resuelve cuando un usuario llamado flatbot escribe algo que coincide con el patrón)
1569 | }
1570 | ```
1571 | 
1572 | #### bot.setSettings(options)
1573 | 
1574 | Mira la propiedad `bot.settings`.
1575 | 
1576 | #### bot.loadPlugin(plugin)
1577 | 
1578 | Introduce un Plugin. No have nada si el plugin ya está cargado/introducido.
1579 | 
1580 |  * `plugin` - función
1581 | 
1582 | ```js
1583 | function somePlugin (bot, options) {
1584 |   function someFunction () {
1585 |     bot.chat('Yay!')
1586 |   }
1587 | 
1588 |   bot.myPlugin = {} // Good practice to namespace plugin API (hacer esto para evitar errores como que myPlugin no está definido)
1589 |   bot.myPlugin.someFunction = someFunction
1590 | }
1591 | 
1592 | const bot = mineflayer.createBot({})
1593 | bot.loadPlugin(somePlugin)
1594 | bot.once('login', function () {
1595 |   bot.myPlugin.someFunction() // Yay!
1596 | })
1597 | ```
1598 | 
1599 | #### bot.loadPlugins(plugins)
1600 | 
1601 | Introduce plugins, mira `bot.loadPlugin`.
1602 |  * `plugins` - array (lista) de funciones
1603 | 
1604 | #### bot.hasPlugin(plugin)
1605 | 
1606 | Comprueba si el plugin ya está cargado (o previsto para cargar) en el bot.
1607 | 
1608 | #### bot.sleep(bedBlock, [cb])
1609 | 
1610 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
1611 | 
1612 | Dormir en una cama. `bedBlock` tiene que ser una instancia `Block` que es una cama. `cb` es una función que puede tener un parámetro de error por si el bot no puede dormir.
1613 | 
1614 | #### bot.isABed(bedBlock)
1615 | 
1616 | Devuelve true si `bedBlock` es una cama
1617 | 
1618 | #### bot.wake([cb])
1619 | 
1620 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
1621 | 
1622 | Levantarse de una cama. `cb` es una función que puede tener un parámetro de error por si el bot no puede levantarse.
1623 | 
1624 | #### bot.setControlState(control, state)
1625 | 
1626 | Este es el método principal para controlar los movimientos del bot. Es parecido a presionar teclas en minecraft.
1627 | Por ejemplo, forward con true hará que el bot se mueva hacia adelante. Forward con false hará que el bot deje de moverse hacia adelante.
1628 | Puedes usar bot.lookAt con esto para controlar el movimiento. El ejemplo jumper.js te enseña como hacerlo
1629 | 
1630 |  * `control` - Uno de estos: ['forward', 'back', 'left', 'right', 'jump', 'sprint', 'sneak'] ('adelante', 'atrás', 'izquierda', 'derecha', 'salto', 'sprint/correr', 'agachado')
1631 |  * `state` - `true` o `false`
1632 | 
1633 | #### bot.getControlState(control)
1634 | 
1635 | Devuelve true si el control está activado.
1636 | 
1637 | * `control` - uno de estos ['forward', 'back', 'left', 'right', 'jump', 'sprint', 'sneak'] ('adelante', 'atrás', 'izquierda', 'derecha', 'salto', 'sprint/correr', 'agachado')
1638 | 
1639 | #### bot.clearControlStates()
1640 | 
1641 | Deshabilita todos los controles.
1642 | 
1643 | #### bot.lookAt(point, [force], [callback])
1644 | 
1645 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
1646 | 
1647 | Mueve la cabeza.
1648 | 
1649 |  * `point` una instancia [Vec3](https://github.com/andrewrk/node-vec3) - mueve la cabeza para que este mirando este punto
1650 |  * `force` - Mira `force` en `bot.look`
1651 |  * `callback()` opcional, ejecutado cuando esás mirando al `point`
1652 | 
1653 | #### bot.look(yaw, pitch, [force], [callback])
1654 | 
1655 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
1656 | 
1657 | Mueve la cabeza.
1658 | 
1659 |  * `yaw` - El número de radianes para rotar alrededor del eje vertical, empezando por el este. Sentido anti-horario.
1660 |  * `pitch` - Número de radianes para mirar arriba o abajo. 0 significa recto hacia adelante. PI / 2 significa arriba. -PI / 2 significa abajo.
1661 |  * `force` - Si está presente y es true, salta la suave transición. Especifícalo como true si quieres valores precisos para soltar items o disparar flechas. Esto no es necesario para cálculos por parte del cliente como para moverse.
1662 |  * `callback()` opcional, ejecutado cuando estás mirando al `yaw` y `pitch`
1663 | 
1664 | #### bot.updateSign(block, text)
1665 | 
1666 | Cambia el texto en un cartel.
1667 | 
1668 | #### bot.equip(item, destination, [callback])
1669 | 
1670 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
1671 | 
1672 | Equipar un item del inventario.
1673 | 
1674 |  * `item` - instancia `Item`. Mira `window.items()`.
1675 |  * `destination` (destino)
1676 |    - `"hand"` - (mano) `null` es un alias de esto
1677 |    - `"head"` - cabeza
1678 |    - `"torso"` - pecho
1679 |    - `"legs"` - piernas
1680 |    - `"feet"` - pies
1681 |    - `"off-hand"` - (mano izquierda) when available
1682 |  * `callback(error)` - opcional. ejecutado cuando el bot ha equipado el item o cuando ha fallado al hacerlo.
1683 | 
1684 | #### bot.unequip(destination, [callback])
1685 | 
1686 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
1687 | 
1688 | Quita un item del destino.
1689 | 
1690 | #### bot.tossStack(item, [callback])
1691 | 
1692 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
1693 | 
1694 | Suelta el stack de items especificado.
1695 |  * `item` - el stack de items que quieres soltar
1696 |  * `callback(error)` - opcional, ejecutado cuando el bot ha terminado de soltar o cuando ha fallado al hacerlo.
1697 | 
1698 | #### bot.toss(itemType, metadata, count, [callback])
1699 | 
1700 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
1701 | 
1702 |  * `itemType` - ID numérico del item que quieres soltar
1703 |  * `metadata` - metadata del item que quieres soltar. `null` para cualquier metadata
1704 |  * `count` - cuantos items quieres soltar. `null` significa `1`.
1705 |  * `callback(err)` - (opcional) ejecutado cuando el bot ha terminado de soltar o cuando ha fallado al hacerlo
1706 | 
1707 | #### bot.dig(block, [forceLook = true], [digFace], [callback])
1708 | 
1709 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
1710 | 
1711 | Empezar a picar el `block` (bloque) con el item de la mano.
1712 | Mira los eventos "diggingCompleted" y "diggingAborted".
1713 | 
1714 | Nota: al empezar a romper un bloque, no podrás romper otro bloque hasta que terminas de romper ese bloque o ejecutas `bot.stopDigging()`.
1715 | 
1716 |  * `block` - el bloque que quieres picar
1717 |  * `forceLook` - (opcional) si es true, mirar al bloque rápidamente y empezar a picarlo. Si es false, mirar al bloque lentamente antes de picarlo. Adicionalemente, se puede poner 'ignore', para que el bot no mire el bloque al picarlo.
1718 |  * `digFace` - (opcional) Predeterminado: 'auto', mira al centro del bloque y lo rompe desde la cara de arriba, también puede ser un vector Vec3 de la cara del bloque donde el bot debería estar mirando. Por ejemplo: ```vec3(0, 1, 0)``` para picar la cara de arriba. También puede ser 'raycast', esto comprueba si alguna cara es visible para empezar a picar por esa cara, esto es útil en servidores con un anti cheat.
1719 |  * `callback(err)` - (opcional) ejecutado cuando el bot ha roto el bloque o cuando ha fallado al hacerlo
1720 | 
1721 | #### bot.stopDigging()
1722 | 
1723 | Parar de romper el bloque.
1724 | 
1725 | #### bot.digTime(block)
1726 | 
1727 | Devuelve cuanto va a tardar en romper el bloque, en milisegundos.
1728 | 
1729 | #### bot.acceptResourcePack()
1730 | 
1731 | Acepta el paquete de recursos
1732 | 
1733 | #### bot.denyResourcePack()
1734 | 
1735 | Deniega el paquete de recursos
1736 | 
1737 | #### bot.placeBlock(referenceBlock, faceVector, cb)
1738 | 
1739 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
1740 | 
1741 |  * `referenceBlock` - (bloque de referencia) el bloque al lado del bloque que quieres colocar
1742 |  * `faceVector` - una de las seis direcciones cardinales, por ejemplo, `new Vec3(0, 1, 0)` para la cara de arriba, indicando la cara del bloque de referencia.
1743 |  * `cb` será ejecutado cuando el servidor confirma que el bloque ha sido roto
1744 | 
1745 | El bloque será colocado en `referenceBlock.position.plus(faceVector)` (posición del bloque de referencia más el vector de cara).
1746 | 
1747 | #### bot.placeEntity(referenceBlock, faceVector)
1748 | 
1749 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
1750 | 
1751 |  * `referenceBlock` - (bloque de referencia) el bloque al lado de donde quieres colocar la entidad
1752 |  * `faceVector` - una de las seis direcciones cardinales, por ejemplo, `new Vec3(0, 1, 0)` para la cara de arriba, indicando la cara del bloque de referencia.
1753 | 
1754 | La entidad será colocada en `referenceBlock.position.plus(faceVector)` (posición del bloque de referencia más el vector de cara).
1755 | 
1756 | #### bot.activateBlock(block, [callback])
1757 | 
1758 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
1759 | 
1760 | Golpea un bloque de notas, abre una puerta, etc.
1761 | 
1762 |  * `block` - el bloque que hay que activar
1763 |  * `callback(err)` - (opcional) ejecutado cuando el bot ha activado el bloque o ha fallado al hacerlo
1764 | 
1765 | #### bot.activateEntity(entity, [callback])
1766 | 
1767 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
1768 | 
1769 | Activa una entidad, por ejemplo con aldeanos.
1770 | 
1771 |  * `entity` - la entidad que hay que activar
1772 |  * `callback(err)` - (opcional) ejecutado cuano el bot ha activado la entidad o ha fallado al hacerlo
1773 | 
1774 | #### bot.activateEntityAt(entity, position, [callback])
1775 | 
1776 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
1777 | 
1778 | Activa una entitdad en la posición especificada, útil para los soportes de armadura.
1779 | 
1780 |  * `entity` - la entidad que hay que activar
1781 |  * `position` - la posición donde hay que hacer click
1782 |  * `callback(err)` - (opcional) ejecutado cuano el bot ha activado la entidad o ha fallado al hacerlo
1783 | 
1784 | #### bot.consume(callback)
1785 | 
1786 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
1787 | 
1788 | Consumir / beber el item en la mano
1789 | 
1790 |  * `callback(error)` - ejecutado cuano el bot ha consuimdo el item o ha fallado al hacerlo
1791 | 
1792 | #### bot.fish(callback)
1793 | 
1794 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
1795 | 
1796 | Pescar con la caña en la mano
1797 | 
1798 |  * `callback(error)` - (opcional) ejecutado cuano el bot ha pescado algo o ha fallado al hacerlo
1799 | 
1800 | #### bot.activateItem(offHand=false)
1801 | 
1802 | Activa el item en la mano. Esto es para comer, disparar flechas, tirar huevos, etc.
1803 | El parámetro opcional puede ser `false` para la mano izquierda.
1804 | 
1805 | #### bot.deactivateItem()
1806 | 
1807 | Desactiva el item en la mano. Esto es como disparas la flecha, dejas de comer, etc.
1808 | 
1809 | #### bot.useOn(targetEntity)
1810 | 
1811 | Usar el item en la mano en la instancia de `Entity` (entidad). Esto es como colocas un sillín en un caballo o usas las tijeras en una oveja.
1812 | 
1813 | #### bot.attack(entity)
1814 | 
1815 | Ataca la entidad o el mob.
1816 | 
1817 | #### bot.swingArm([hand], showHand)
1818 | 
1819 | Reproduce la animación de mover el brazo.
1820 | 
1821 |  * `hand` la mano qe se va a animar, puede ser `left` (izquierda) o `right` (derecha). Predeterminado: `right`
1822 |  * `showHand` es un boolean que indica si añadir la mano al paquete para mostrar la animación. Predeterminado: `true`
1823 | 
1824 | #### bot.mount(entity)
1825 | 
1826 | Subirse a una entidad. Para bajarse, usar `bot.dismount`.
1827 | 
1828 | #### bot.dismount()
1829 | 
1830 | Baja de la entidad en la que estás montado.
1831 | 
1832 | #### bot.moveVehicle(left,forward)
1833 | 
1834 | Mover el vehículo :
1835 | 
1836 |  * left puede ser -1 o 1 : -1 significa derecha, 1 significa izquierda
1837 |  * forward puede ser -1 o 1 : -1 significa hacia atrás, 1 significa hacia adelante
1838 | 
1839 | Todas las direcciones son relativas a donde está mirando el bot
1840 | 
1841 | #### bot.setQuickBarSlot(slot)
1842 | 
1843 |  * `slot` - puede ser de 0 a 8, la casilla de la barra de acceso rápido
1844 | 
1845 | #### bot.craft(recipe, count, craftingTable, [callback])
1846 | 
1847 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
1848 | 
1849 |  * `recipe` - Una instancia `Recipe`. Mira `bot.recipesFor`.
1850 |  * `count` - Cuantas veces quieres repetir la acción.
1851 |    Si quieres craftear `8` palos con tablas de madera, pondrías
1852 |    `count` a `2`. `null` significa `1`.
1853 |  * `craftingTable` - Una instancia de `Block`, la mesa de crafteo que quieres usar. Si el crafteo no necesita una mesa, este argumento se puede dejar como `null`.
1854 |  * `callback` - (opcional) Ejecutado cuando el bot ha terminado de craftear y el inventario ha sido actualizado.
1855 | 
1856 | #### bot.writeBook(slot, pages, [callback])
1857 | 
1858 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
1859 | 
1860 |  * `slot` es un número de casilla del inventario (36 es la primera casilla, etc.).
1861 |  * `pages` es un array de strings representando las páginas.
1862 |  * `callback(error)` - opcional. Ejecutado cuando el bot ha terminado de escribir o ha ocurrido un error.
1863 | 
1864 | #### bot.openContainer(containerBlock or containerEntity)
1865 | 
1866 | Abre un contenedor.
1867 | Devuelve un promise con una instancia `Container` que representa el contenedor que estás abriendo.
1868 | 
1869 | #### bot.openChest(chestBlock or minecartchestEntity)
1870 | 
1871 | Obsoleto. Lo mismo que `openContainer`
1872 | 
1873 | #### bot.openFurnace(furnaceBlock)
1874 | 
1875 | Abre un horno.
1876 | Devuelve un promise con una instancia `Furnace` que representa el horno que estás abriendo.
1877 | 
1878 | #### bot.openDispenser(dispenserBlock)
1879 | 
1880 | Obsoleto. Lo mismo que `openContainer`
1881 | 
1882 | #### bot.openEnchantmentTable(enchantmentTableBlock)
1883 | 
1884 | Devuelve un promise con una instancia `EnchantmentTable` que representa la mesa de encantamiento que estás abriendo.
1885 | 
1886 | #### bot.openAnvil(anvilBlock)
1887 | 
1888 | Devuelve un promise con una instancia `anvil` que representa el yunque que estás abriendo.
1889 | 
1890 | #### bot.openVillager(villagerEntity)
1891 | 
1892 | Devuelve un promise con una instancia `Villager` que representa la ventana de tradeo que estás abriendo
1893 | El evento `ready` en la instancia `Villager` se puede usar para saber cuando están listos los tradeos
1894 | 
1895 | #### bot.trade(villagerInstance, tradeIndex, [times], [cb])
1896 | 
1897 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
1898 | 
1899 | Usa la instancia `Villager` para comerciar.
1900 | 
1901 | #### bot.setCommandBlock(pos, command, [options])
1902 | 
1903 | Cambia las propiedadezs de un bloque de comandos en la posición `pos`.
1904 | Ejemplo de `options`:
1905 | ```js
1906 | {
1907 |   mode: 2,
1908 |   trackOutput: true,
1909 |   conditional: false,
1910 |   alwaysActive: true
1911 | }
1912 | ```
1913 | options.mode puede tener 3 valores: 0 (SEQUENCE) (secuencia), 1 (AUTO), 2 (REDSTONE)
1914 | Todas las opciones tienen como predeterminado false, excepto modo que es 2 (para parecerse al bloque de comandos de Minecraft).
1915 | 
1916 | #### bot.supportFeature(name)
1917 | 
1918 | Esto puede usarse para ver si una característica está disponible en la versión del bot de Minecraft. Normalmente esto es solo para manejar funciones que son específicas de una versión.
1919 | 
1920 | Puedes encontrar la lista de características en [./lib/features.json](https://github.com/PrismarineJS/mineflayer/blob/master/lib/features.json) file.
1921 | 
1922 | #### bot.waitForTicks(ticks)
1923 | 
1924 | Esta función devuelve un promise y espera a que el número de ticks especificado pase dentro del juego, esta función es similar a la función setTimeout de Javascript pero esta funciona con el reloj físico del juego.
1925 | 
1926 | ### Lower level inventory methods
1927 | 
1928 | Estos son métodos de un nivel más bajo para el inventario, pueden ser útils algunas veces pero es mejor usar los métodos presentados arriba si es posible.
1929 | 
1930 | #### bot.clickWindow(slot, mouseButton, mode, cb)
1931 | 
1932 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
1933 | 
1934 | Hacer click en la ventana/interfaz actual, los detalles están en https://wiki.vg/Protocol#Click_Window
1935 |  * slot - número que representa la casilla de la ventan
1936 |  * mouseButton - 0 para click izquierdo, y 1 para click derecho
1937 |  * mode - mineflayer solo tiene disponible el modo 0
1938 | 
1939 | #### bot.putSelectedItemRange(start, end, window, slot)
1940 | 
1941 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
1942 | 
1943 | Mover el item en la casilla `slot` en un rango especificado
1944 | 
1945 | #### bot.putAway(slot)
1946 | 
1947 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
1948 | 
1949 | Mover el item a la casilla `slot` en el inventario.
1950 | 
1951 | #### bot.closeWindow(window)
1952 | 
1953 | Cerrar la ventana/interfaz.
1954 |  * window - la ventana a cerrar
1955 | 
1956 | #### bot.transfer(options, cb)
1957 | 
1958 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
1959 | 
1960 | Transferir un item de un rango a otro. `options` es un object con :
1961 | 
1962 |  * `window` : la ventana donde el item será movido
1963 |  * `itemType` : el tipo de item a mover (id numérico)
1964 |  * `metadata` : la metadata del item a mover
1965 |  * `sourceStart` and `sourceEnd` : el rango
1966 |  * `destStart` and `destEnd` : el rango de destino
1967 | 
1968 | #### bot.openBlock(block)
1969 | 
1970 | Abre un bloque, por ejemplo un cofre, devuelve un promise con `Window` siendo la ventana abierta.
1971 | 
1972 |  * `block` es el bloque a abrir
1973 | 
1974 | #### bot.openEntity(entity)
1975 | 
1976 | Abre una entidad con un inventario, por ejemplo un aldeano, devuelve un promise con `Window` siendo la ventana abierta.
1977 | 
1978 |  * `entity` es la entidad a abrir
1979 | 
1980 | #### bot.moveSlotItem(sourceSlot, destSlot, cb)
1981 | 
1982 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
1983 | 
1984 | Mover un item de una casilla `sourceSlot` a otra `destSlot` en una ventana.
1985 | 
1986 | #### bot.updateHeldItem()
1987 | 
1988 | Actualiza `bot.heldItem`.
1989 | 
1990 | #### bot.getEquipmentDestSlot(destination)
1991 | 
1992 | Devuelve el id de la casilla de equipamiento por nombre del destino.
1993 | 
1994 | El destino puede ser:
1995 | * head - (cabeza)
1996 | * torso - (pecho)
1997 | * legs - (piernas)
1998 | * feet - (pies)
1999 | * hand - (mano)
2000 | * off-hand - (mano izquierda)
2001 | 
2002 | ### bot.creative
2003 | 
2004 | Esta colección de apis es útil en modo creativo.
2005 | Detectar y cambiar de modo no está implementado,
2006 | pero se asume y muchas veces se necesita que el bot esté en modo creativo para que estas características funcionen.
2007 | 
2008 | #### bot.creative.setInventorySlot(slot, item, [callback])
2009 | 
2010 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
2011 | 
2012 | Proporciona al bot el item especificado en la casilla especificada.
2013 | Si se ejecuta dos veces antes de que la primera ejecución no haya terminado, la primera ejecución contendrá un error.
2014 | 
2015 |  * `slot` es un número de casilla del inventario (donde 36 es la primera casilla, etc.).
2016 |  * `item` es una instancia [prismarine-item](https://github.com/PrismarineJS/prismarine-item) con su metadata, nbtdata, etc.
2017 |     Si `item` es `null`, el item en esa casilla será eliminado
2018 |  * `callback(err)` (opcional) es un callback que es ejecutado cuando el servidor acepta la transacción o cuando falla al hacerlo.
2019 | 
2020 | Si este método cambia algo, se emitirá `bot.inventory.on("updateSlot")`
2021 | 
2022 | #### bot.creative.flyTo(destination, [cb])
2023 | 
2024 | Esta función también devueve un `Promise`, con `void` como argumento al finalizar.
2025 | 
2026 | Ejecuta `startFlying()` y se mueve a una velocidad constante en un espacio tridimensional en línea recta hasta el destino.
2027 | `destination` es un `Vec3`, y las coordenadas `x` y `z` a veces terminarán en `.5`.
2028 | Está operación no funcionará si hay algún obstáculo en el camino,
2029 | por eso es recomendable volar distancias cortas.
2030 | 
2031 | Cuando el bot llega al destino, `cb` es ejecutado.
2032 | 
2033 | Este método no va a buscar el camino automáticamente.
2034 | Se espera que una implementación de path finding usará este método para moverse < 2 bloques a la vez.
2035 | 
2036 | Para dejar de volar (volver a las físicas normales), se puede ejecutar `stopFlying()`.
2037 | 
2038 | #### bot.creative.startFlying()
2039 | 
2040 | Cambia `bot.physics.gravity` a `0`.
2041 | Para volver a las físicas normales, se puede ejecutar `stopFlying()`.
2042 | 
2043 | Este método es útil si quieres levitar mientras rompes el bloque debajo de tí.
2044 | No es necesario ejecutar esta función antes de ejecutar `flyTo()`.
2045 | 
2046 | Nota: mientras vuelas, `bot.entity.velocity` no es preciso.
2047 | 
2048 | #### bot.creative.stopFlying()
2049 | 
2050 | Restablece `bot.physics.gravity` a su valor original.
2051 | 


--------------------------------------------------------------------------------
/docs/es/unstable_api_es.md:
--------------------------------------------------------------------------------
 1 | <!-- START doctoc generated TOC please keep comment here to allow auto update -->
 2 | <!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
 3 | **Tabla de contenidos**  *generado con [DocToc](https://github.com/thlorenz/doctoc)*
 4 | 
 5 | - [API inestable : bot._](#api-instable--bot_)
 6 |   - [bot._client](#bot_client)
 7 | 
 8 | <!-- END doctoc generated TOC please keep comment here to allow auto update -->
 9 | 
10 | # API inestable : bot._
11 | 
12 | Estos métodos y clases son útiles en algunos casos especiales pero no son estables y pueden cambiar en cualquier momento
13 | 
14 | ## bot._client
15 | 
16 | `bot._client` es creado usando [node-minecraft-protocol](https://github.com/PrismarineJS/node-minecraft-protocol).
17 | Maneja escribir y recibir paquetes.
18 | El comportamiento puede cambiar (por ejemplo en cada versión nueva de minecraft), por eso es mejor usar los métodos de mineflayer si es posible.
19 | 
20 | 
21 | Esta documentación no está mantenida oficialmente, si quiere ver las últimas novedades, por favor dirijase a la documentación original: [unstable_api](../unstable_api.md)
22 | 


--------------------------------------------------------------------------------
/docs/fr/FAQ_FR.md:
--------------------------------------------------------------------------------
  1 | ## FAQ
  2 | 
  3 | Ce document de foire aux questions a pour but d'aider les gens pour les choses les plus courantes.
  4 | 
  5 | ### Je reçois une erreur lorsque j'essaie de me connecter avec un compte Microsoft.
  6 | 
  7 | Assurez-vous que l'email que vous avez entré dans l'option username de createBot peut être utilisé pour vous connecter à `minecraft.net` en utilisant le bouton 'Login with Microsoft'.
  8 | Assurez-vous que vous avez l'option `auth : 'microsoft'` dans vos options createBot.
  9 | 
 10 | Lorsque vous obtenez une erreur qui dit quelque chose au sujet des informations d'identification invalides ou "Ce compte possède Minecraft ?", essayez de supprimer le champ du mot de passe dans les options `createBot` et réessayez.
 11 | 
 12 | ### Comment masquer les erreurs ?
 13 | 
 14 | Utiliser `hideErrors : true` dans les options de createBot
 15 | Vous pouvez également choisir d'ajouter ces listeners :
 16 | 
 17 | ```js
 18 | client.on('error', () => {})
 19 | client.on('end', () => {})
 20 | ```
 21 | 
 22 | ### Je ne reçois pas d'événement de chat sur un serveur personnalisé, comment puis-je résoudre ce problème ?
 23 | 
 24 | Les serveurs Spigot, en particulier certains plugins, utilisent des formats de chat personnalisés, vous devez les analyser avec une expression rationnelle / un analyseur syntaxique personnalisé.
 25 | Lisez et adaptez [chat_parsing.js](https://github.com/PrismarineJS/mineflayer/blob/master/examples/chat_parsing.js) pour qu'il fonctionne pour vos besoins particuliers.
 26 | plugin de chat. A lire également <http://prismarinejs.github.io/mineflayer/#/tutorial?id=custom-chat>
 27 | 
 28 | ### Comment puis-je collecter les informations d'un plugin personnalisé dans le chat ?
 29 | 
 30 | La plupart des serveurs Minecraft personnalisés ont le support des plugins, et beaucoup de ces plugins disent quelque chose dans le chat quand quelque chose se passe. Si c'est juste un message, il est préférable d'utiliser la solution discutée dans la solution ci-dessus, mais quand ces messages sont divisés en plusieurs petits messages, une autre option est d'utiliser l'événement `"messagestr"` car il permet d'analyser facilement les messages de plusieurs lignes.
 31 | 
 32 | **Exemple:**
 33 | 
 34 | Le message du chat dans le chat ressemble à ceci :
 35 | 
 36 | ```
 37 | (!) U9G has won the /jackpot and received
 38 | $26,418,402,450! They purchased 2,350,000 (76.32%) ticket(s) out of the
 39 | 3,079,185 ticket(s) sold!
 40 | ```
 41 | 
 42 | ```js
 43 | const regex = {
 44 |   first: /\(!\) (.+) has won the \/jackpot and received +/,
 45 |   second: /\$(.+)! They purchased (.+) \((.+)%\) ticket\(s\) out of the /,
 46 |   third: /(.+) ticket\(s\) sold!/
 47 | }
 48 | 
 49 | let jackpot = {}
 50 | bot.on('messagestr', msg => {
 51 |   if (regex.first.test(msg)) {
 52 |     const username = msg.match(regex.first)[1]
 53 |     jackpot.username = username
 54 |   } else if (regex.second.test(msg)) {
 55 |     const [, moneyWon, boughtTickets, winPercent] = msg.match(regex.second)
 56 |     jackpot.moneyWon = parseInt(moneyWon.replace(/,/g, ''))
 57 |     jackpot.boughtTickets = parseInt(boughtTickets.replace(/,/g, ''))
 58 |     jackpot.winPercent = parseFloat(winPercent)
 59 |   } else if (regex.third.test(msg)) {
 60 |     const totalTickets = msg.match(regex.third)[1]
 61 |     jackpot.totalTickets = parseInt(totalTickets.replace(/,/g, ''))
 62 |     onDone(jackpot)
 63 |     jackpot = {}
 64 |   }
 65 | })
 66 | ```
 67 | 
 68 | ### Comment puis-je envoyer une commande ?
 69 | 
 70 | En utilisant `bot.chat()`.
 71 | 
 72 | **Example:**
 73 | 
 74 | ```js
 75 | bot.chat('/give @p diamond')
 76 | ```
 77 | 
 78 | ### Est-il possible de se connecter à plusieurs comptes en utilisant bot = mineflayer.createbot tout en les contrôlant tous séparément ?
 79 | 
 80 | Créer différentes instances de bot en appelant createBot puis faire différentes choses pour chacune, voir multiple.js
 81 | 
 82 | ### Comment faire pour que le robot lâche tout son inventaire ?
 83 | 
 84 | bot.inventory.items() renvoie un tableau des objets du bot. Vous pouvez utiliser une fonction récursive pour les parcourir en boucle et déposer chaque objet en utilisant bot.toss(). Cliquez [ici](https://gist.github.com/dada513/3d88f772be4224b40f9e5d1787bd63e9) pour voir un exemple.
 85 | 
 86 | ### Comment vérifier les paquets qui sont envoyés/reçus ?
 87 | 
 88 | Activation du mode de débogage <https://github.com/PrismarineJS/mineflayer#debug>
 89 | 
 90 | ### Je veux éviter la déconnexion même en cas de lag du serveur, comment puis-je y parvenir ?
 91 | 
 92 | Un moyen est d'augmenter l'option [checkTimeoutInterval](https://github.com/PrismarineJS/node-minecraft-protocol/blob/master/docs/API.md#mccreateclientoptions) (à définir dans createBot) à une valeur plus élevée (par exemple `300*1000` qui est 5min au lieu des 30s par défaut). Si vous êtes toujours déconnecté, vous pouvez vous reconnecter automatiquement en utilisant quelque chose comme cet exemple <https://github.com/PrismarineJS/mineflayer/blob/master/examples/reconnector.js>
 93 | 
 94 | ### Comment obtenir l'histoire / le texte d'un objet ?
 95 | 
 96 | Vous pouvez utiliser la propriété `item.nbt`. Il est également recommandé d'utiliser la bibliothèque `prismarine-nbt`. La méthode `nbt.simplify()` peut être utile.
 97 | 
 98 | **Exemple:**
 99 | 
100 | ```js
101 | function getLore (item) {
102 |   let message = ''
103 |   if (item.nbt == null) return message
104 | 
105 |   const nbt = require('prismarine-nbt')
106 |   const ChatMessage = require('prismarine-chat')(bot.version)
107 | 
108 |   const data = nbt.simplify(item.nbt)
109 |   const display = data.display
110 |   if (display == null) return message
111 | 
112 |   const lore = display.Lore
113 |   if (lore == null) return message
114 |   for (const line of lore) {
115 |     message += new ChatMessage(line).toString()
116 |     message += '\n'
117 |   }
118 | 
119 |   return message
120 | }
121 | ```
122 | 
123 | ### Comment puis-je envoyer un message de la console au serveur ?
124 | 
125 | You can use a library like `repl` to read the console input and use `bot.chat()` to send it. You can find an example [here.](https://github.com/PrismarineJS/mineflayer/blob/master/examples/repl.js)
126 | 
127 | ### Lors de la création d'un plugin, comment puis-je spécifier un autre plugin comme dépendance ?
128 | 
129 | Dans la fonction `inject()` de votre plugin, vous pouvez appeler sans risque `bot.loadPlugin(anotherPlugin)` pour vous assurer que ce plugin est chargé. Si le plugin a déjà été chargé auparavant, rien ne se passe.
130 | 
131 | Notez que l'ordre dans lequel les plugins sont chargés est dynamique, donc vous ne devriez jamais appeler un autre plugin dans votre fonction `inject()`.
132 | 
133 | ### Comment puis-je utiliser un proxy socks5 ?
134 | 
135 | In the options object for `mineflayer.createBot(options)`, remove your `host` option from the options object, have the following variables declared `PROXY_IP, PROXY_PORT, PROXY_USERNAME, PROXY_PASSWORD, MC_SERVER_ADDRESS, MC_SERVER_PORT` and add this to your options object:
136 | 
137 | ```js
138 | connect: (client) => {
139 |     socks.createConnection({
140 |       proxy: {
141 |         host: PROXY_IP,
142 |         port: PROXY_PORT,
143 |         type: 5,
144 |         userId: PROXY_USERNAME,
145 |         password: PROXY_PASSWORD
146 |       },
147 |       command: 'connect',
148 |       destination: {
149 |         host: MC_SERVER_ADDRESS,
150 |         port: MC_SERVER_PORT
151 |       }
152 |     }, (err, info) => {
153 |       if (err) {
154 |         console.log(err)
155 |         return
156 |       }
157 |       client.setSocket(info.socket)
158 |       client.emit('connect')
159 |     })
160 |   }
161 |   ```
162 | 
163 | `socks` est déclaré avec `const socks = require('socks').SocksClient` et utilise le paquet [this](https://www.npmjs.com/package/socks).
164 | Certains serveurs peuvent rejeter la connexion. Si cela se produit, essayez d'ajouter `fakeHost : MC_SERVER_ADDRESS` aux options de votre createBot.
165 |   
166 | # Erreurs courantes
167 | 
168 | ### `UnhandledPromiseRejectionWarning: Error: Failed to read asymmetric key`
169 | 
170 | Voici ce qui se passe lorsque vous avez donné à Mineflayer la mauvaise version du serveur, ou que Mineflayer détecte la mauvaise version du serveur.
171 | 
172 | ### `TypeError: Cannot read property '?' of undefined`
173 | 
174 | Vous essayez peut-être d'utiliser quelque chose sur l'objet bot qui n'existe pas encore, essayez d'appeler l'instruction après l'événement `spawn`.
175 | 
176 | ### `SyntaxError: Unexpected token '?'`
177 | 
178 | Mettez à jour la version de votre node.
179 | 
180 | ### The bot can't break/place blocks or open chests
181 | 
182 | Vérifiez que la protection contre le spawn n'empêche pas le bot d'agir.
183 | 


--------------------------------------------------------------------------------
/docs/fr/README_FR.md:
--------------------------------------------------------------------------------
  1 | # Mineflayer
  2 | 
  3 | [![NPM version](https://badge.fury.io/js/mineflayer.svg)](http://badge.fury.io/js/mineflayer)
  4 | [![Build Status](https://github.com/PrismarineJS/mineflayer/workflows/CI/badge.svg)](https://github.com/PrismarineJS/mineflayer/actions?query=workflow%3A%22CI%22)
  5 | [![Discord](https://img.shields.io/badge/chat-on%20discord-brightgreen.svg)](https://discord.gg/GsEFRM8)
  6 | [![Gitter](https://img.shields.io/badge/chat-on%20gitter-brightgreen.svg)](https://gitter.im/PrismarineJS/general)
  7 | [![Irc](https://img.shields.io/badge/chat-on%20irc-brightgreen.svg)](https://irc.gitter.im/)
  8 | [![Issue Hunt](https://github.com/BoostIO/issuehunt-materials/blob/master/v1/issuehunt-shield-v1.svg)](https://issuehunt.io/r/PrismarineJS/mineflayer)
  9 | 
 10 | [![Try it on gitpod](https://img.shields.io/badge/try-on%20gitpod-brightgreen.svg)](https://gitpod.io/#https://github.com/PrismarineJS/mineflayer)
 11 | 
 12 | | <sub>EN</sub> [Anglais](../README.md) | <sub>RU</sub> [Russe](../ru/README_RU.md) | <sub>ES</sub> [Espagnol](../es/README_ES.md) | <sub>FR</sub> [Français](README_FR.md) | <sub>TR</sub> [Türkçe](../tr/README_TR.md) | <sub>ZH</sub> [Chinois](../zh/README_ZH_CN.md) | <sub>BR</sub> [Portuguese](../br/README_BR.md) |
 13 | |-------------------------|----------------------------|----------------------------|----------------------------|----------------------------|----------------------------|----------------------------|
 14 | 
 15 | Créé des robots Minecraft avec API stable, puissante et facilement maniable, [API](api.md).
 16 | 
 17 | Si c'est la première fois que vous utilisez Node.js, il vaut mieux commencer avec le [tutoriel](tutorial.md)
 18 | 
 19 | ## Caractéristiques:
 20 | 
 21 |  * Compatible avec Minecraft 1.8, 1.9, 1.10, 1.11, 1.12, 1.13, 1.14, 1.15, 1.16, 1.17, 1.18, 1.19 et 1.20.
 22 |  * Reconnaissante et pistage des entités.
 23 |  * Identification des blocs. Vous pouvez passer en revue le monde autour de vous. Quelques millisecondes suffisent pour trouver n'importe quel bloc.
 24 |  * Information sur la physique et mouvements, données sur la taille des blocs...
 25 |  * Peut attaquer des entitées et utiliser des véhicules.
 26 |  * Gestion d'inventaire.
 27 |  * Gestion de l'établi, coffre, distributeur, table d'enchantement.
 28 |  * creuser et construire.
 29 |  * Autres actions diverses, telle que connaitre tes points de vie ou si il pleut.
 30 |  * Utiliser les blocs et items.
 31 |  * Discuter avec le chat.
 32 | 
 33 | ### Projets à venir:
 34 | 
 35 |  Visite cette page pour voir nos projets [projets](https://github.com/PrismarineJS/mineflayer/wiki/Big-Prismarine-projects). 
 36 |  
 37 | ## Installation
 38 | 
 39 | En premier installer Node.js (version minimale requise: 14) sur [nodejs.org](https://nodejs.org/) puis taper dans la console:
 40 | 
 41 | `npm install mineflayer`
 42 | 
 43 | ## Documentation
 44 | 
 45 | | lien | description |
 46 | |---|---|
 47 | | [tutoriel](tutorial.md) | Démarre par un tutoriel node js et mineflayer |
 48 | | [FAQ](FAQ.md) | Une question? Regardez d'abord ici ! |
 49 | | [API](api.md) [unstable_api.md](unstable_api.md) | L'API intégrale |
 50 | | [changement](history.md) | Les derniers changements dans mineflayer |
 51 | | [exemples](https://github.com/PrismarineJS/mineflayer/tree/master/examples) | quelques exemples réalisables avec mineflayer |
 52 | 
 53 | 
 54 | ## Pour Aider
 55 | 
 56 | Allez lire [CONTRIBUTING.md](CONTRIBUTING.md) et [prismarine-contribute](https://github.com/PrismarineJS/prismarine-contribute).
 57 | 
 58 | ## Utilisation
 59 | 
 60 | **Vidéos**
 61 | 
 62 | Un tutoriel vidéo qui explique comment mettre en place un robot mineflayer est disponible [ici.](https://www.youtube.com/watch?v=ltWosy4Z0Kw)
 63 | 
 64 | Si vous voulez en apprendre plus, des video peuvent être trouvées [ici,](https://www.youtube.com/playlist?list=PLh_alXmxHmzGy3FKbo95AkPp5D8849PEV) et le code source correspondant peut être trouvé [ici.](https://github.com/TheDudeFromCI/Mineflayer-Youtube-Tutorials)
 65 | 
 66 | [<img src="https://img.youtube.com/vi/ltWosy4Z0Kw/0.jpg" alt="tutorial 1" width="200">](https://www.youtube.com/watch?v=ltWosy4Z0Kw)
 67 | [<img src="https://img.youtube.com/vi/UWGSf08wQSc/0.jpg" alt="tutorial 2" width="200">](https://www.youtube.com/watch?v=UWGSf08wQSc)
 68 | [<img src="https://img.youtube.com/vi/ssWE0kXDGJE/0.jpg" alt="tutorial 3" width="200">](https://www.youtube.com/watch?v=ssWE0kXDGJE)
 69 | [<img src="https://img.youtube.com/vi/walbRk20KYU/0.jpg" alt="tutorial 4" width="200">](https://www.youtube.com/watch?v=walbRk20KYU)
 70 | 
 71 | **Introduction à mineflayer**
 72 | 
 73 | Si aucune version n'est specifiée, la version du serveur est automatiquement détectée.
 74 | Vous pouvez toujours en specifier une manuellement dans les options:
 75 | Par exemple `version:"1.16.5"`.
 76 | 
 77 | ### Echo Example
 78 | ```js
 79 | const mineflayer = require('mineflayer')
 80 | 
 81 | const bot = mineflayer.createBot({
 82 |   host: 'localhost', // optionel
 83 |   port: 25565, // optionel
 84 |   username: 'email@example.com', // l'email et le mot de passe sont requis seulement pour les serveurs
 85 |   password: '12345678', // online-mode=true
 86 |   version: false, // faux, corresponds pour la detection automatique(par défaut), met "1.8.8" par exemple si tu a besoin d'une version specifique
 87 |   auth: 'mojang' // optionel; par defaut utilise mojang, si vous utilisez un compte microsoft, preciser 'microsoft'
 88 | })
 89 | 
 90 | bot.on('chat', function (username, message) {
 91 |   if (username === bot.username) return
 92 |   bot.chat(message)
 93 | })
 94 | 
 95 | // erreur de code, ou raison de kick:
 96 | bot.on('kicked', (reason, loggedIn) => console.log(reason, loggedIn))
 97 | bot.on('error', err => console.log(err))
 98 | ```
 99 | 
100 | ### Observer ce que fait votre robot en temp réel
101 | Grace au projet [prismarine-viewer](https://github.com/PrismarineJS/prismarine-viewer), il est maintenant possible de voir ce que votre robot fait.
102 | Il suffit de lancer `npm install prismarine-viewer` dans votre console et d'ajouter ceci à votre code:
103 | ```js
104 | const mineflayerViewer = require('prismarine-viewer').mineflayer
105 | bot.once('spawn', () => {
106 |   mineflayerViewer(bot, { port: 3007, firstPerson: true })
107 | })
108 | ```
109 | et vous obtiendrez un affichage en *direct* qui ressemble à ceci:
110 | 
111 | [<img src="https://prismarinejs.github.io/prismarine-viewer/test_1.16.1.png" alt="viewer" width="500">](https://prismarinejs.github.io/prismarine-viewer/)
112 | 
113 | #### Exemples:
114 | 
115 | | exemple | description |
116 | |---|---|
117 | |[maps](https://github.com/PrismarineJS/mineflayer/tree/master/examples/viewer) | afficher ce que votre robot fait en direct |
118 | |[pathfinder](https://github.com/Karang/mineflayer-pathfinder/blob/master/examples/test.js) | Faire votre robot se déplacer la oû vous voulez |
119 | |[coffre](https://github.com/PrismarineJS/mineflayer/blob/master/examples/chest.js) | Utiliser les coffres, fours, distrubuteurs, tables d'enchantements |
120 | |[pelteuse](https://github.com/PrismarineJS/mineflayer/blob/master/examples/digger.js) | Aprener comment créer un robot simple capable de creuser |
121 | |[discord](https://github.com/PrismarineJS/mineflayer/blob/master/examples/discord.js) | connectez un bot discord avec un robot mineflayer |
122 | |[jumper](https://github.com/PrismarineJS/mineflayer/blob/master/examples/jumper.js) | Un robot simple qui peut bouger, sauter, conduire des véhicules, attaquer des créatures proches |
123 | |[ansi](https://github.com/PrismarineJS/mineflayer/blob/master/examples/ansi.js) | Afficher le chat du robot avec les couleurs du chat dans votre terminal |
124 | |[guard](https://github.com/PrismarineJS/mineflayer/blob/master/examples/guard.js) | Faire un robot qui garde une zone definie |
125 | |[multiple-from-file](https://github.com/PrismarineJS/mineflayer/blob/master/examples/multiple_from_file.js) | fichier texte avec tous vos comptes minecraft |
126 | 
127 | Et de nombreux exemples dans le dossier [exemples](https://github.com/PrismarineJS/mineflayer/tree/master/examples)
128 | 
129 | ### Modules
130 | 
131 | Beaucoup de development arrive à l'interieur de petit package npm, qui sont utilisé par mineflayer
132 | 
133 | #### The Node Way&trade;
134 | 
135 | > "When applications are done well, they are just the really application-specific, brackish residue that can't be so easily abstracted away. All the nice, reusable components sublimate away onto github and npm where everybody can collaborate to advance the commons." — substack from ["how I write modules"](https://gist.github.com/substack/5075355)
136 | 
137 | #### Modules
138 | 
139 | Voici les modules principales qui contruisent mineflayer:
140 | 
141 | | module | description |
142 | |---|---|
143 | | [minecraft-protocol](https://github.com/PrismarineJS/node-minecraft-protocol) | Traduis et serialise les packets minecraft, plus l'authentication et l'encryption.
144 | | [minecraft-data](https://github.com/PrismarineJS/minecraft-data) | Module qui provide des données minecraft pour les clients minecraft, les serveurs et les librairies.
145 | | [prismarine-physics](https://github.com/PrismarineJS/prismarine-physics) | provide les moteurs de physique pour les entitées minecraft.
146 | | [prismarine-chunk](https://github.com/PrismarineJS/prismarine-chunk) | Une class pour contenir les chunks minecraft
147 | | [node-vec3](https://github.com/PrismarineJS/node-vec3) | Mathematique de vecteur 3D
148 | | [prismarine-block](https://github.com/PrismarineJS/prismarine-block) | Represente un block minecraft avec les données associés.
149 | | [prismarine-chat](https://github.com/PrismarineJS/prismarine-chat) | Une traducteur pour les messages de chat minecraft (extracté depuis mineflayer)
150 | | [node-yggdrasil](https://github.com/PrismarineJS/node-yggdrasil) | Une librairies Node.js pour intéragir avecles systeme d'authenfication de mojang, connue sous le nom de Yggdrasil
151 | | [prismarine-world](https://github.com/PrismarineJS/prismarine-world) | l'implementation des mondes pour prismarine
152 | | [prismarine-windows](https://github.com/PrismarineJS/prismarine-windows) | Represente une fenetre minecraft
153 | | [prismarine-item](https://github.com/PrismarineJS/prismarine-item) | Contient les items minecraft et les donnnées qui y sont associé
154 | | [prismarine-nbt](https://github.com/PrismarineJS/prismarine-nbt) | Un traducteur NBT pour node-minecraft-protocol
155 | | [prismarine-recipe](https://github.com/PrismarineJS/prismarine-recipe) | Contient les récettes minecraft
156 | | [prismarine-biome](https://github.com/PrismarineJS/prismarine-biome) | Contient les biome et leur données 
157 | | [prismarine-entity](https://github.com/PrismarineJS/prismarine-entity) | Represente une entitées minecraft
158 | 
159 | 
160 | ### Debug
161 | 
162 | Vous pouvez activer le debug du protocole en utilisant `DEBUG` comme variable d'environnement:
163 | 
164 | ```bash
165 | DEBUG="minecraft-protocol" node [...]
166 | ```
167 | 
168 | Sur windows :
169 | ```
170 | set DEBUG=minecraft-protocol
171 | node your_script.js
172 | ```
173 | 
174 | ## Third Party Plugins
175 | 
176 | Mineflayer peut être amélioré avec plusieurs plugins; tout le monde peut créer un plugin qui ajoute une API de plus haut niveaux au-dessus de Mineflayer.
177 | 
178 | Les plugins les plus récents et les plus utiles sont :
179 | 
180 |  * [pathfinder](https://github.com/PrismarineJS/mineflayer-pathfinder) - advanced A* pathfinding avec de nombres paramètres configurables
181 |  * [prismarine-viewer](https://github.com/PrismarineJS/prismarine-viewer) - Un simple inspecteur web de chunk
182 |  * [web-inventory](https://github.com/ImHarvol/mineflayer-web-inventory) - un inspecteur d'inventaire en ligne
183 |  * [statemachine](https://github.com/PrismarineJS/mineflayer-statemachine) - Une API pour state machine pour robots aux comportements complexes
184 |  * [Armor Manager](https://github.com/PrismarineJS/MineflayerArmorManager) - gestion d'armure automatique
185 |  * [Collect Block](https://github.com/PrismarineJS/mineflayer-collectblock) - Une API rapide et flexible pour colleter des blocs.
186 |  * [Dashboard](https://github.com/wvffle/mineflayer-dashboard) - intertace en ligne pour robots mineflayer
187 |  * [PVP](https://github.com/PrismarineJS/mineflayer-pvp) - Une API facile pour les combats contre les entités et les joueurs.
188 |  * [auto-eat](https://github.com/LINKdiscordd/mineflayer-auto-eat) - pour manger automatiquement de la nouriture.
189 |  * [Tool](https://github.com/PrismarineJS/mineflayer-tool) - Un plugin pour choisir automatiquement le meilleur outil pour une tâche donnée
190 |  * [Hawkeye](https://github.com/sefirosweb/minecraftHawkEye) - Un plugin pour viser à la perfection avec des arcs.
191 | 
192 | 
193 | Laissez un coup d'oeil à ses projets :
194 |  
195 |  * [radar](https://github.com/andrewrk/mineflayer-radar/) - interface web utilisant un canvas et une communication socket.io. [YouTube Demo](https://www.youtube.com/watch?v=FjDmAfcVulQ)
196 |  * [blockfinder](https://github.com/Darthfett/mineflayer-blockFinder) - trouver des blocs dans un monde 3D
197 |  * [scaffold](https://github.com/PrismarineJS/mineflayer-scaffold) - trouver le meilleur chemin vers une destination précise en cassant et dispoant des blocs
198 |    [YouTube Demo](http://youtu.be/jkg6psMUSE0)
199 |  * [auto-auth](https://github.com/G07cha/MineflayerAutoAuth) - remplissage de compte de capchat pour serveur hors-ligne
200 |  * [Bloodhound](https://github.com/Nixes/mineflayer-bloodhound) - determiner ce qui a attaqué une autre entité.
201 |  * [tps](https://github.com/SiebeDW/mineflayer-tps) - trouver le tps du serveur
202 |  * [panorama](https://github.com/IceTank/mineflayer-panorama) - prendre des photos panoramiques de vos mondes.
203 | 
204 | ## Projets utilisant Mineflayer
205 | 
206 |  * [rom1504/rbot](https://github.com/rom1504/rbot)
207 |    - [YouTube - créé un escalier en collimasson](https://www.youtube.com/watch?v=UM1ZV5200S0)
208 |    - [YouTube - réplicé une contruction](https://www.youtube.com/watch?v=0cQxg9uDnzA)
209 |  * [Darthfett/Helperbot](https://github.com/Darthfett/Helperbot)
210 |  * [vogonistic/voxel](https://github.com/vogonistic/mineflayer-voxel) - visualiser se qui se passe avec son robot grâce à [voxel.js](https://www.voxeljs.com/)
211 |  * [JonnyD/Skynet](https://github.com/JonnyD/Skynet) -  Afficher les info des joueurs sur une API en ligne
212 |  * [MinecraftChat](https://github.com/rom1504/MinecraftChat) (derniere version open source, par AlexKvazos) -  Un client minecraft basé seulement sur le chat<https://minecraftchat.net/>
213 |  * [Cheese Bot](https://github.com/Minecheesecraft/Cheese-Bot) - Un robot basé sur les plugins, qui a une jolie interface. Réalisée avec Node-Webkit. http://bot.ezcha.net/
214 |  * [Chaoscraft](https://github.com/schematical/chaoscraft) - Des robots minecraft qui utilisent des algorithmes génétiques, regarder [ces videos youtube](https://www.youtube.com/playlist?list=PLLkpLgU9B5xJ7Qy4kOyBJl5J6zsDIMceH)
215 |  * [hexatester/minetelegram](https://github.com/hexatester/minetelegram) -  Minecraft - une API telgram, construite sur Mineflayer et Telegraf.
216 |  * [ProZedd/mineflayer-builder](https://github.com/PrismarineJS/mineflayer-builder) - "Imprimme" un .schematic dans Minecraft
217 |  * [et beaucoup plus](https://github.com/PrismarineJS/mineflayer/network/dependents) - Tous les les projets utilisant Mineflayer
218 | 
219 | 
220 | ## Test
221 | 
222 | ### Tout tester
223 | 
224 | Exécuter seulement :
225 | 
226 | ```bash
227 | npm test
228 | ```
229 | 
230 | ### Tester une version spécifique
231 | 
232 | Exécutez
233 | 
234 | ```bash
235 | npm test -g <version>
236 | ```
237 | 
238 | où `<version>` est une version de Minecraft comme `1.12`, `1.15.2`...
239 | 
240 | ### Tester un test spécifique
241 | 
242 | Executer
243 | 
244 | ```bash
245 | npm test -g <test_name>
246 | ```
247 | 
248 | où `<test_name>` est le nom d'un teste comme `lit`, `utiliseCoffre`, `rayTrace`...
249 | 
250 | ## Licence
251 | 
252 | [MIT](../../LICENSE)
253 | 


--------------------------------------------------------------------------------
/docs/history.md:
--------------------------------------------------------------------------------
   1 | ## 4.26.0
   2 | * [Use node 22 (#3570)](https://github.com/PrismarineJS/mineflayer/commit/dbff9314418d30df203c32fe83f2a1b56653d0a6) (thanks @rom1504)
   3 | * [Fix infinity setTimeout by throwing error (#3561)](https://github.com/PrismarineJS/mineflayer/commit/69539494c88c2ca718330142839a35414ecd3bda) (thanks @BBpezsgo)
   4 | * [Prevent TypeError when removing event lPrevent TypeError when removing event listeners in switchWorld (BunJS issue maybe)isteners in switchWorld (#3544)](https://github.com/PrismarineJS/mineflayer/commit/e974e703a875d16f5e36d35574bf334a20c76b1b) (thanks @0x15d3v2)
   5 | * [Mounting for other entities and fix bot not dismounting when the vehicle is gone (#3384)](https://github.com/PrismarineJS/mineflayer/commit/08b7317b57ca5c2f1a6ddd116bd0c74c2e10c20c) (thanks @qwqtoday)
   6 | 
   7 | ## 4.25.0
   8 | * [1.21.4 (#3546)](https://github.com/PrismarineJS/mineflayer/commit/8bbf5669f5ff3ea8a708633e51b47c312dc7a26b) (thanks @extremeheat)
   9 | 
  10 | ## 4.24.0
  11 | * [Support 1.21.3. (#3489)](https://github.com/PrismarineJS/mineflayer/commit/58ae9e5b5abf75139f4ba93fe4f34ef7ed3936e8) (thanks @rom1504)
  12 | * [Fix out of bounds access leading to crash at spawn (#3535)](https://github.com/PrismarineJS/mineflayer/commit/3187368397e880ba8b32bb03affa18203cbcbb42) (thanks @wAIfu-DEV)
  13 | * [fix: use dimension data on 1.16.2 (#3397)](https://github.com/PrismarineJS/mineflayer/commit/f6187f66c16dd122165287be7864c78b2fe7c32c) (thanks @zardoy)
  14 | * [update contribution docs to show test running commands (#3511)](https://github.com/PrismarineJS/mineflayer/commit/71a3a262681a173db86b8911aec82402a6993d21) (thanks @Madlykeanu)
  15 | * [Update inventory.js (#3507)](https://github.com/PrismarineJS/mineflayer/commit/a0e92cad5887181bf7e235f69378c8ede14a350c) (thanks @Pix3lPirat3)
  16 | * [Update FAQ.md - add mineflayer tested versions : lib/version.js (#3517)](https://github.com/PrismarineJS/mineflayer/commit/f2dd3a37505b374bf63119633659e35ec2ce3542) (thanks @boly38)
  17 | * [Bump protodef from 1.17.0 to 1.18.0 (#3523)](https://github.com/PrismarineJS/mineflayer/commit/06faa36c2da3da399bd5370869700aea6c65c9b0) (thanks @dependabot[bot])
  18 | * [Bump mocha from 10.8.2 to 11.0.1 (#3516)](https://github.com/PrismarineJS/mineflayer/commit/166971d317db3ec68cf3eebeda37f509152628fd) (thanks @dependabot[bot])
  19 | * [Fix chatterbox example (#3506)](https://github.com/PrismarineJS/mineflayer/commit/386200759556aa261fa212f26c43992a66cfa8ac) (thanks @ShiftSad)
  20 | * [Proper title event (#3498)](https://github.com/PrismarineJS/mineflayer/commit/3829a25150eec782bc045a222476865af7b0ac72) (thanks @SMEDjs)
  21 | * [Set `sequence` field correctly in activateItem (#3445)](https://github.com/PrismarineJS/mineflayer/commit/fdba03737ecdeaaf419e3175b9be33291db4e085) (thanks @GenerelSchwerz)
  22 | * [increase timeout in external test common](https://github.com/PrismarineJS/mineflayer/commit/3d6e2344751c38428701dc52e9f29dda73f7f782) (thanks @rom1504)
  23 | 
  24 | ## 4.23.0
  25 | * [1.21 (#3480)](https://github.com/PrismarineJS/mineflayer/commit/4aa10fb45431940504c7809f078f1f410e7fa7a3) (thanks @Madlykeanu)
  26 | * [Adding mindcraft to mineflayer readme](https://github.com/PrismarineJS/mineflayer/commit/dd00db42ba20682418d8fbd5629e1033dfb0ff20) (thanks @rom1504)
  27 | 
  28 | ## 4.22.0
  29 | * [Remove debug logging (#3478)](https://github.com/PrismarineJS/mineflayer/commit/eb29d350ede0590fce17e04bf21071807a87e3a1) (thanks @extremeheat)
  30 | 
  31 | ## 4.21.0
  32 | * [1.20.6 (#3412)](https://github.com/PrismarineJS/mineflayer/commit/44fad41c18be5024564e24e1cdee624d35d4d387) (thanks @extremeheat)
  33 | * [Update README.md (#3420)](https://github.com/PrismarineJS/mineflayer/commit/1c2a5c0fa78f74a63fabd7edde85c4a74db32dee) (thanks @SilkePilon)
  34 | * [types: add pitchSpeed as an option in typings (#3446)](https://github.com/PrismarineJS/mineflayer/commit/05b48ad0dad4cf64a1c11660bac256d7b4015841) (thanks @GenerelSchwerz)
  35 | * [Fixed a bug with not closing the window when changing the subserver (#3424)](https://github.com/PrismarineJS/mineflayer/commit/d00c386cfe51cefc361c0ff4d30b100aee9f114a) (thanks @DenisKvak1)
  36 | * [Bump @types/node from 20.14.14 to 22.1.0 (#3431)](https://github.com/PrismarineJS/mineflayer/commit/1d461616b514969fdece38e49bfbec747ab8d76a) (thanks @dependabot[bot])
  37 | * [Fix updateSlot event type (#3425)](https://github.com/PrismarineJS/mineflayer/commit/5d39db26a6ab17baac38b68af8ccd3eeb4af3def) (thanks @DenisKvak1)
  38 | * [Player hitbox fixes (#3382)](https://github.com/PrismarineJS/mineflayer/commit/78b4eccb4572a821b11c3124b7a593f3b91f1180) (thanks @AreaDenial)
  39 | * [Typo fixes (#3418)](https://github.com/PrismarineJS/mineflayer/commit/ef042a242ca9f5fc5820fe4dc2e1d997ef1db202) (thanks @kgurchiek)
  40 | * [Added support for 1.18+ edit book packet #3204 (#3373)](https://github.com/PrismarineJS/mineflayer/commit/eb9982aa04973b0086aac68a2847005d77f01a3d) (thanks @unlimitedcoder2)
  41 | * [Fix typos (#3381)](https://github.com/PrismarineJS/mineflayer/commit/d581ea7cee4d5b7df9606f671656bb0be0fdbf91) (thanks @data-miner00)
  42 | * [Fix typescript types syntax for setCommandBlock (#3366)](https://github.com/PrismarineJS/mineflayer/commit/315cdfc4b1fc2760e4a8a36feb718626a66d5056) (thanks @undefined)
  43 | * [Remove invalid sign check (#3328)](https://github.com/PrismarineJS/mineflayer/commit/ec76468c8ac4c6232bad3c2b66d4160f95f58396) (thanks @zardoy)
  44 | * [refactor: simplifying the code of blockAtCursor (#3337)](https://github.com/PrismarineJS/mineflayer/commit/dc70f932ac9aaab6e6cdb15057b409b15c3232dd) (thanks @SnowRunescape)
  45 | * [Updated setCommandBlock's 3rd argument (#3356)](https://github.com/PrismarineJS/mineflayer/commit/04ad6db404f0da779004b3ddd0e049bf2c6be0a3) (thanks @FlooferLand)
  46 | * [Added the serverBrand property to index.d.ts (#3355)](https://github.com/PrismarineJS/mineflayer/commit/0bb2707d2f6d0d64a467d4e0d6ddc52adf526127) (thanks @Khaogamermain01)
  47 | 
  48 | ## 4.20.1
  49 | * [Add bossBarCreated event in index.d.ts (#3340)](https://github.com/PrismarineJS/mineflayer/commit/8299288526cd7ff24bcd87511814221f8ad62507) (thanks @gguio)
  50 | * [Update scoreboard.js (#3318)](https://github.com/PrismarineJS/mineflayer/commit/195b3cbd70a110080af9b77a4659991c5d9e484a) (thanks @vicdum)
  51 | * [Fix hardcoded diggingface for cancel digging (#3322)](https://github.com/PrismarineJS/mineflayer/commit/ab78bf855929a476386b5eb6efcf3b271d02455e) (thanks @Vinciepincie)
  52 | * [Fix 1.20.4 server resource pack error (#3320)](https://github.com/PrismarineJS/mineflayer/commit/7c01eeb970647ed2933c10cb2b94fd7b44c777f5) (thanks @TerminalCalamitas)
  53 | * [Fix scoreboard delete handler not first checking if scoreboard exists (#3324)](https://github.com/PrismarineJS/mineflayer/commit/d9e9e15aeb646d81da2a3e2987566de47e3bae04) (thanks @Ynfuien)
  54 | 
  55 | ## 4.20.0
  56 | * [Update api.md - addChatPattern[Set] link to example of usage (#3304)](https://github.com/PrismarineJS/mineflayer/commit/bb3e5877b7b3b8ab063b39a5b47d103b819da1c2) (thanks @boly38)
  57 | * [Fixed deleted scoreboards not being removed from ScoreBoard.positions (#3306)](https://github.com/PrismarineJS/mineflayer/commit/643023df91bf428d3e7d30e8f2eab97e3238b0b2) (thanks @Ynfuien)
  58 | * [Support 1.20.4 (#3310)](https://github.com/PrismarineJS/mineflayer/commit/aa99daa7d63ee9549f2dda5a79c140e30e19a89b) (thanks @rom1504)
  59 | 
  60 | ## 4.19.0
  61 | * [Clarify readme createBot username handling (#3300)](https://github.com/PrismarineJS/mineflayer/commit/7a2680bc07f53d16626679537ea1f07aae180549) (thanks @extremeheat)
  62 | * [fix world typing (#3302)](https://github.com/PrismarineJS/mineflayer/commit/5dc36d6cdeaf4be72ea023827d45b9d78e575f66) (thanks @GenerelSchwerz)
  63 | * [modified the README.md files for other languages and fixed a linking issue at those files. (#3297)](https://github.com/PrismarineJS/mineflayer/commit/cc98f1307e3ab48477d2a9ff29da4447f42b30bc) (thanks @Axwaizee)
  64 | * [formatted docs/README.md for easy copy (#3295)](https://github.com/PrismarineJS/mineflayer/commit/468c8aa9d382a7872ec991c3b834b98cbe495e8d) (thanks @Axwaizee)
  65 | * [Added missing bot.teams definition (#3294)](https://github.com/PrismarineJS/mineflayer/commit/fb8ee7aa619bd38cc97d5dbd870bb11455d51d39) (thanks @Ynfuien)
  66 | * [Timeout for bot.tabComplete() (#3293)](https://github.com/PrismarineJS/mineflayer/commit/4231a169d579d08ac7b9ec0694e18b1f6ac837ea) (thanks @Ynfuien)
  67 | * [:label: Update types to be updated with what's in JavaScript (#3287)](https://github.com/PrismarineJS/mineflayer/commit/210785e86c031f7e3323d7d2ffe5152d2d4a5eb6) (thanks @fantomitechno)
  68 | * [Fixed some typo (#3290)](https://github.com/PrismarineJS/mineflayer/commit/ba53a953d03a6edb34aa5bf38bccde58e65d816d) (thanks @SilianZ)
  69 | * [Updated digging code to account for raycasted tall grass checks (#3285)](https://github.com/PrismarineJS/mineflayer/commit/bd0fb5c4d3b665f264009f62f9288828f3018cea) (thanks @GenerelSchwerz)
  70 | 
  71 | ## 4.18.0
  72 | * [Minecraft 1.20.2 support (#3262)](https://github.com/PrismarineJS/mineflayer/commit/2ff9919760d714be57dcb678f8ab5ecff69f5fee) (thanks @rom1504)
  73 | * [Update recommended Node.js version (#3279)](https://github.com/PrismarineJS/mineflayer/commit/5c71edf48bb2f2dfa16cddb9af5baa0c4d55cf0d) (thanks @Nyaasu66)
  74 | * [feat: bot.respawn, fix respawn with flying squid (#3206)](https://github.com/PrismarineJS/mineflayer/commit/3a6ce543b4ba8a3d0f55777670d142968af14571) (thanks @zardoy)
  75 | * [Add `maxCatchupTicks`, improve `supportFeature` typing (#3277)](https://github.com/PrismarineJS/mineflayer/commit/91108d392c4c5800204dd4674ce9247495ac98e0) (thanks @zardoy)
  76 | * [Fixed typo of "fromt" to "from" (#3273)](https://github.com/PrismarineJS/mineflayer/commit/216cab742db1cd053d9fa23bd7293b770239085b) (thanks @BorretSquared)
  77 | 
  78 | ## 4.17.0
  79 | * [Exclude browser from node version check (#3268)](https://github.com/PrismarineJS/mineflayer/commit/c466d327227796865c53bfd24e66668911be4af5) (thanks @rom1504)
  80 | * [Fix for a possible error in lib/plugins/entities.js file (#3254)](https://github.com/PrismarineJS/mineflayer/commit/15cfeb4fa59edfcddf7a0b70a966294b24d798ed) (thanks @Mykola1453)
  81 | * [Make explicit supported versions in readme (#3264)](https://github.com/PrismarineJS/mineflayer/commit/931a4187965aef686c6188b944de84455c65b827) (thanks @rom1504)
  82 | 
  83 | ## 4.16.0
  84 | * [Fix version check (#3259)](https://github.com/PrismarineJS/mineflayer/commit/88d361f9209cdc2bc4620b32118fb2245f6dcdf9) (thanks @extremeheat)
  85 | 
  86 | ## 4.15.0
  87 | * [Fix several bugs in villager trading (#3230)](https://github.com/PrismarineJS/mineflayer/commit/1caa2c216b3a10a2bccd7b78a22f3809cb359fe3) (thanks @evan-goode)
  88 | * [Fix `bot.heldItem` and `bot.entity.equipment` (#3225)](https://github.com/PrismarineJS/mineflayer/commit/9865ab72f7438fff9d74f2fe19a138da870c41aa) (thanks @szdytom)
  89 | * [Improve CI per version setup (#3256)](https://github.com/PrismarineJS/mineflayer/commit/48c3ca71ea5822c4304ec74951970dbefd5026eb) (thanks @rom1504)
  90 | * [added Readme Português-BR (#3219)](https://github.com/PrismarineJS/mineflayer/commit/70a652ee5b6c0151826e17b38efd458357fc93ac) (thanks @LukeTheNeko)
  91 | * [Fixes `fireworkRocketDuration` calculation (#3222)](https://github.com/PrismarineJS/mineflayer/commit/3d8a1aaed036c2df74c2e607245cefab12409761) (thanks @szdytom)
  92 | * [Update Minecraft Wiki links to new domain after fork (#3203)](https://github.com/PrismarineJS/mineflayer/commit/08208e2f110af2c6de41fac9a389597aac916412) (thanks @misode)
  93 | * [typings: add entityAtCursor to bot (#3200)](https://github.com/PrismarineJS/mineflayer/commit/7016c19f9c736671d8af1401ac25d5175401891f) (thanks @SnowRunescape)
  94 | * [Handle unknown scoreboard objectives (#3191)](https://github.com/PrismarineJS/mineflayer/commit/2e02cee82d6d154b3b7bfb30d213479e7c4fbc59) (thanks @frej4189)
  95 | * [Sidebar fixes (#3188)](https://github.com/PrismarineJS/mineflayer/commit/e571e54edf46ac6da000e1c84f36bec3b75ccf24) (thanks @FurnyGo)
  96 | * [Fix ci : fix lint in MD (#3192)](https://github.com/PrismarineJS/mineflayer/commit/7987e3c546038de0eaa6d573596f51d3edc383bb) (thanks @frej4189)
  97 | * [Updating RU docs (#3178)](https://github.com/PrismarineJS/mineflayer/commit/7474564da5432295c682e8a4f827f58e3c3f3be8) (thanks @FurnyGo)
  98 | 
  99 | ## 4.14.0
 100 | * [Update Jupyter notebook to install node 18, update the server in example (#3176)](https://github.com/PrismarineJS/mineflayer/commit/e8a967d4e832f72d665781492c037d26169ae5a0) (thanks @extremeheat)
 101 | * [Update index.d.ts (#3175)](https://github.com/PrismarineJS/mineflayer/commit/d4db3991c135344180937b69621c0ee31daa39f0) (thanks @StayWithMeSenpai)
 102 | * [Add elytra flying support and rocket support (#3163)](https://github.com/PrismarineJS/mineflayer/commit/010460e9dd752a56195d8a48f35a62e704dcf99f) (thanks @lkwilson)
 103 | 
 104 | ## 4.13.0
 105 | * [Switch to entity.displayName (#3168)](https://github.com/PrismarineJS/mineflayer/commit/2409ad458b952173de669a7d9cfaeb770effe3ae) (thanks @lkwilson)
 106 | * [Update readme auth doc (#3169)](https://github.com/PrismarineJS/mineflayer/commit/f5d4a288a768ca6717fa4d22c72fb0267428c684) (thanks @extremeheat)
 107 | * [Add OpenDeliveryBot to "Projects Using Mineflayer" (#3162)](https://github.com/PrismarineJS/mineflayer/commit/ab3c0cf25d0cc28ccba89640b2ceff6ab6b4dace) (thanks @SilkePilon)
 108 | * [Use node 18 on CI (#3157)](https://github.com/PrismarineJS/mineflayer/commit/d3df34dcaa804a71bf0d8cc50a419990d4a2dce3) (thanks @extremeheat)
 109 | * [Fix ambigious function naming (#3161)](https://github.com/PrismarineJS/mineflayer/commit/9ecdf201794bfa350486839a01e318dfd94b3bfb) (thanks @frej4189)
 110 | 
 111 | ## 4.12.0
 112 | * [Mineflayer physics refactor (#2492)](https://github.com/PrismarineJS/mineflayer/commit/d0eb3a1afe6cda7b04ae2f88052cd868ba0c0c4f) (thanks @U5B)
 113 | 
 114 | ## 4.11.0
 115 | * [Import changedSlots computation from prismarine-windows (#3134)](https://github.com/PrismarineJS/mineflayer/commit/e5b5eeecf1133c1c80c0ef48d6e72fed77d84834) (thanks @kaduvert)
 116 | * [Make the place block success check ignore block updates received with no block type changes (#3090)](https://github.com/PrismarineJS/mineflayer/commit/bbdd93afe2e31d1f1e899176e7edf8e73af5d5d3) (thanks @PondWader)
 117 | * [Use node-minecraft-protocol for chat (#3110)](https://github.com/PrismarineJS/mineflayer/commit/385fba65ed6ebe632c870c7cf234666cacf5a766) (thanks @lkwilson)
 118 | * [Extended useChests.js tests (#3132)](https://github.com/PrismarineJS/mineflayer/commit/131a7ea63c9c6b2cce41ebb29a26c898f859471d) (thanks @kaduvert)
 119 | * [Allow more click modes (#3133)](https://github.com/PrismarineJS/mineflayer/commit/a315653bb94274113c9d6078d4c2ab840af0f62a) (thanks @kaduvert)
 120 | * [Add nether test (#2932)](https://github.com/PrismarineJS/mineflayer/commit/6b1d6ea15c72edc5b761b78765a53d2ab7d0d274) (thanks @frej4189)
 121 | * [Explicitly depend on pitem 1.14.0 with fix](https://github.com/PrismarineJS/mineflayer/commit/acc6ec9b5e61d566facb76e9c3ff512cc9a5137f) (thanks @rom1504)
 122 | * [Make sure we pass a string to a storagebuilder (#2645)](https://github.com/PrismarineJS/mineflayer/commit/fc95843dac69bc1101dd5ec898a2aaf4dcfbf520) (thanks @u9g)
 123 | * [extra types for enchantments (#3123)](https://github.com/PrismarineJS/mineflayer/commit/b336d2259d1ce0935bf8e10a4edb3c0a9030fb10) (thanks @zisis912)
 124 | * [Add 1.20 to supported versions in readme (#3111)](https://github.com/PrismarineJS/mineflayer/commit/d764706f53dbe7ba16cf49645d66d192a309cc5c) (thanks @litfa)
 125 | * [Handle hand swap entity status (#3097)](https://github.com/PrismarineJS/mineflayer/commit/a80d69a8f1a637ab1a0720ec776fc4f05c38afed) (thanks @PondWader)
 126 | * [Add command gh workflow allowing to use release command in comments (#3116)](https://github.com/PrismarineJS/mineflayer/commit/5a55744ee0dc670f984229ec2629239bdc3e5705) (thanks @rom1504)
 127 | 
 128 | ## 4.10.1
 129 | 
 130 | * Fix attempting to access unloaded chunks (@frej4189)
 131 | 
 132 | ## 4.10.0
 133 | 
 134 | * Fix handling for entities with unknown metadata (@extremeheat)
 135 | * support 1.20 (@PondWader)
 136 | 
 137 | ## 4.9.0
 138 | 
 139 | * Fix bot not updating world height on respawn packet (@frej4189)
 140 | * Persist properties received in player_info packet (@Paulomart)
 141 | * Fix reference error with block updates (@IceTank)
 142 | * Add spectator to gameModes array (@williamd5)
 143 | * Standardize dimensions for all versions (@sefirosweb)
 144 | * Emit inject_allowed after a timeout of 0 (@IceTank)
 145 | * Add window transaction timeout (@firejoust)
 146 | * Made bot auto respawning togglable (@Averagess)
 147 | * support 1.19.4 (@extremeheat)
 148 | 
 149 | ## 4.8.1
 150 | 
 151 | * Fix client crashing when player_remove contains unknown player (@frej4189)
 152 | * Improve look and fix bug slow craft (@sefirosweb)
 153 | * Fix player entity being unset when player is updated (@frej4189)
 154 | * Fix type (@sefirosweb)
 155 | * Improve crafting stacks (@sefirosweb)
 156 | * add example for using the node:readline module (@Jovan-04)
 157 | 
 158 | ## 4.8.0
 159 | 
 160 | * Update chat parsing (@frej4189)
 161 | * Fix message event not including chat position (@frej4189)
 162 | * 1.19.3  (@frej4189)
 163 | 
 164 | ## 4.7.0
 165 | 
 166 | * 1.19.2 support (@frej4189)
 167 | 
 168 | ## 4.6.0
 169 | 
 170 | * Fix unhandled promise rejection in onceWithCleanup (@IceTank) [#2833](https://github.com/PrismarineJS/mineflayer/pull/2833)
 171 | * Extend every window that is opened with mineflayer specific window functions (@IceTank) [#2768][https://github.com/PrismarineJS/mineflayer/pull/2768]
 172 | * Fix example command line usage messages (@maximmasiutin) [#2853](https://github.com/PrismarineJS/mineflayer/pull/2853)
 173 | * Update README_ES.md (@PanIntegralus) [#2803](https://github.com/PrismarineJS/mineflayer/pull/2803)
 174 | * Fix block face position target when digging (@WhoTho) [#2801](https://github.com/PrismarineJS/mineflayer/pull/2801)
 175 | * Add a native mineflayer event for particles (@NyxaYu) [#2813](https://github.com/PrismarineJS/mineflayer/pull/2813)
 176 | * Fix viewDistance type (@Nciklol) [#2824](Fix viewDistance type (#2824) ) 
 177 | * Add French FAQ (@AugustinMauroy) [#2817](https://github.com/PrismarineJS/mineflayer/pull/2817)
 178 | 
 179 | ## 4.5.1
 180 | 
 181 | * Fixed syntax error in TypeScript definitions (@JungleDome) [commit](https://github.com/PrismarineJS/mineflayer/commit/2c6a4036d84bedb5f349ea5a82d743e344c34224)
 182 | 
 183 | ## 4.5.0
 184 | 
 185 | * 1.19 support (@extremeheat @rom1504 @FCKJohni @Shorent)
 186 | * refactoring examples to use bot.registry (@Epirito)
 187 | * Added barrel and coloured shulker boxes to openable windows (@lazydancer)
 188 | * types: Fix return type for openBlock and openEntity (@sefirosweb)
 189 | * Update activateEntity and activateEntityAt types (@amoraschi)
 190 | 
 191 | ## 4.4.0
 192 | 
 193 | * Fix chatterbox example not getting dropped item (@u9g) [commit](https://github.com/PrismarineJS/mineflayer/commit/f860eac01a0418f4a3de749482d8cab681acc48a)
 194 | * Fix 404d link to license (@BalaM314) [#2601](https://github.com/PrismarineJS/mineflayer/pull/2601)
 195 | * Add bot.clickWindow mode disclaimer (@IceTank) [#2595](https://github.com/PrismarineJS/mineflayer/pull/2595)
 196 | * Add spectator to GameMode types (@IceTank) [#2627](https://github.com/PrismarineJS/mineflayer/pull/2627)
 197 | * Update types for isABed (@amoraschi) [#2628](https://github.com/PrismarineJS/mineflayer/pull/2628)
 198 | * Replace openChest with openContainer in docs and examples (@slightly-imperfect) [#2656](https://github.com/PrismarineJS/mineflayer/pull/2656)
 199 | * Add ender chests as a chest type (@RoseChilds) [#2642](https://github.com/PrismarineJS/mineflayer/pull/2642)
 200 | * Added method to wait until sleep function is in reality sleeping (@sefirosweb) [#2617](https://github.com/PrismarineJS/mineflayer/pull/2617)
 201 | * Added type on move event (@sefirosweb) [#2712](https://github.com/PrismarineJS/mineflayer/pull/2712)
 202 | * Added thunderState type (@sefirosweb) [#2711](https://github.com/PrismarineJS/mineflayer/pull/2711)
 203 | * Fix type error on chest open (@IceTank) [#2684](https://github.com/PrismarineJS/mineflayer/pull/2684)
 204 | * Add support for repeating and chain command blocks. (@mirkokral) [#2669](https://github.com/PrismarineJS/mineflayer/pull/2669)
 205 | * Add player object to blockBreakProgressEnd & observed. (@JackCrispy) [#2647](https://github.com/PrismarineJS/mineflayer/pull/2647)
 206 | * Add entity to blockBreakProgress (@JackCrispy ) [#2648](https://github.com/PrismarineJS/mineflayer/pull/2648)
 207 | * Add direction support to activateBlock, openBlock (@IceTank) [#2039](https://github.com/PrismarineJS/mineflayer/pull/2039)
 208 | * Add entityAtCursor function (@O-of) [#2077](https://github.com/PrismarineJS/mineflayer/pull/2077)
 209 | * Fix regex dos (@IceTank) [#2350](https://github.com/PrismarineJS/mineflayer/pull/2350)
 210 | 
 211 | ## 4.3.0
 212 | 
 213 | * Cache 'positionUpdateSentEveryTick' feature lookup (@IceTank)
 214 | * Remove old teams from bot.teamMap (@U9G)
 215 | * mcdata 3.0.0
 216 | 
 217 | ## 4.2.0
 218 | 
 219 | * add missing extraInfos argument to Bot.blockAt function (@dumbasPL)
 220 | * Emit window close event AFTER updating the inventory (@imharvol)
 221 | * Move supportFeature to mcdata (@U9G)
 222 | * Update lib/ and test/ to use prismarine-registry (@extremeheat)
 223 | * only open chests with openContainer (@U9G)
 224 | * Add bot.creative.clearSlot and bot.creative.clearInventory (@U9G)
 225 | * remove transaction warning
 226 | 
 227 | ## 4.1.0
 228 | 
 229 | * 1.18.2 support
 230 | * Add nbt option to withdraw and deposit
 231 | 
 232 | ## 4.0.0
 233 | 
 234 | * useEntity maintains sneak state
 235 | * BREAKING: remove all callbacks in favor of promises
 236 | 
 237 | ## 3.18.0
 238 | 
 239 | * remove callbacks from types and docs
 240 | 
 241 | ## 3.17.0
 242 | 
 243 | * callback are now depreciated with mineflayer. Any use of them will print a warning
 244 | 
 245 | ## 3.16.0
 246 | 
 247 | * Use prismarine-chunk for block entities
 248 | 
 249 | ## 3.15.0
 250 | 
 251 | * Supports 1.18
 252 | 
 253 | ## 3.14.1
 254 | 
 255 | * Fix arm_animation and use_entity (@amorashi)
 256 | 
 257 | ## 3.14.0
 258 | 
 259 | * Make prismarine-entity versioned (@u9g)
 260 | * fix(typings): Added OpenContainer (@SaubereSache)
 261 | 
 262 | ## 3.13.1
 263 | 
 264 | * Fix bug with force lastSentPitch in bot.look (@KadaverBrutalo10)
 265 | * Fix typo harming type safety (@Eagle-Anne)
 266 | 
 267 | ## 3.13.0
 268 | 
 269 | * compute scoreboard displayName dynamically (@U9G)
 270 | * SkinsRestorer fix (@U5B)
 271 | * Fix bot not swinging arm on block place (@IceTank)
 272 | 
 273 | ## 3.12.0
 274 | 
 275 | * Bypass anticheats that detect sensitivity (@mat-1)
 276 | * Fix removing many players at once from tab list (@mat-1)
 277 | * Added blockAtEntityCursor function (@DatArnoGuy)
 278 | * add option to disable default chat patterns (@U5B)
 279 | * Fixed wrong arm swinging (@IceTank)
 280 | * Add pitch speed to look (@IceTank)
 281 | * Console spam fix (@IceTank)
 282 | * Update openVillager function to return a promise (@amoraschi)
 283 | * Send arm_animation before use_entity (@aesthetic0001)
 284 | * Add reason for the end of a mineflayer bot (@U5B)
 285 | * added rejection of invalid transaction packets (anticheat fix) (@U5B)
 286 | 
 287 | ## 3.11.2
 288 | * Remove unnecessary and buggy inventory check in place block (@Karang)
 289 | * Make all events allow async cb typings (@u9g)
 290 | 
 291 | ## 3.11.1
 292 | * Get rid of nowaiting (@nickelpro)
 293 | * update readme (@inthmafr)
 294 | * Fix Typings (@link-discord, @IceTank, @u9g)
 295 | 
 296 | ## 3.11.0
 297 | * better chat, equipping and consuming errors (@u9g)
 298 | * add bot.usingHeldItem (@mat1)
 299 | * 1.17.1 support (mainly work from @nickelpro and @u9g, but also @Archengius @extremeheat @imharvol @willocn and @rom1504)
 300 | 
 301 | ## 3.10.0
 302 | * Add Chinese translations (@Nyaasu66)
 303 | * Fix bot.equip failing with off-hand (@IceTank)
 304 | * window.withdraw no longer will drop items if it takes too many items (@Zn10plays)
 305 | * No longer have to await ready for enchanting (@u9g)
 306 | * Remove polling, recursive calling, rechecks for bot.waitForChunksToLoad (@u9g)
 307 | * Add crystal placing example (@u9g)
 308 | * Fixes physicsEnabled check for knockback (@u9g)
 309 | * Default swingArm to left hand (@u9g)
 310 | * Add support for teams (@builder-247)
 311 | * Add missing bot.transfer documentation (@IceTank)
 312 | 
 313 | ## 3.9.0
 314 | * Fix crash on blocks without registered blockId (@Furry)
 315 | * Move when hit by an explsion (@u9g)
 316 | * Add getExplosionDamages() function (@Karang)
 317 | * doc of get explosion (@link-discord)
 318 | 
 319 | ## 3.8.0
 320 | * Improved index.d.ts (@DrMoraschi)
 321 | * Added resource pack support (@kaffinpx)
 322 | * Fixed bot.dig error (@MoneyMakingTornado)
 323 | * Added timeout to #consume (@SeanmcCord)
 324 | * Added example for resource pack (@u9g)
 325 | * Improved workflow (@u9g)
 326 | * Linted JS in md files (@u9g)
 327 | * Added bot oxygen Level management (@kaffinpx)
 328 | * Improved links (@satyamedh)
 329 | * Improved links (@AwesomestCode)
 330 | * Improved typing (@u9g)
 331 | * Refactored chat.js (@u9g)
 332 | * Expanded placeBlockWith Options to offhand (@aestetic)
 333 | * Added anvil test (@u9g)
 334 | * Added placeEntity() (@u9g)
 335 | * Improved oxygen typings (@DrMoraschi)
 336 | * Improved socket snippet (@iceTank)
 337 | * Improved placeEntity (@u9g)
 338 | * Renamed bot.quit to end (@u9g)
 339 | * Updated Spanish readme (@DrMoraschi)
 340 | * Added French Translations (@creeper09)
 341 | * Corrected java version in gitpod (@rom)
 342 | * Improved readme lint (@rom)
 343 | * Added container and dropper to allowWindowTypes (@IceTank)
 344 | 
 345 | 
 346 | ## 3.7.0
 347 | * Add bot.removeChatPattern() (@BlueBurgersTDD)
 348 | * Add events to typings (@DrMoraschi)
 349 | * Add TR translation (@KaffinPX)
 350 | * Create plugin example (@Zn10plays)
 351 | * Revise readme (@IceTank)
 352 | * Revise chat_parsing example comments (@U5B)
 353 | * Revise raycast example (@IceTank)
 354 | * allow passing nmpclient as an option in createbot (@u9g)
 355 | * Add bot.awaitMessage() (@u9g)
 356 | * Add modular example (@u9g)
 357 | * Fix bug with chat patterns (@u9g)
 358 | * Fix bug with game event (@u9g)
 359 | 
 360 | ## 3.6.0
 361 | * add bot.addChatPattern() & bot.addChatPatternSet() & deprecate bot.chatAddPattern() (@U9G)
 362 | 
 363 | ## 3.5.0
 364 | * Add common errors to FAQ (@U9G)
 365 | * Move mosts of index.js to lib/loader.js (@U9G)
 366 | * Improve packet_info handling (@Karang)
 367 | * Add getControlState function (@Camezza)
 368 | 
 369 | ## 3.4.0
 370 | * fix once leak in placeBlock (@Karang)
 371 | * allow sleeping during rain/thunderstorms (@qrvd)
 372 | * Change transaction apology packet to match vanilla client (@FeldrinH)
 373 | 
 374 | ## 3.3.3
 375 | * fix world switch leak
 376 | 
 377 | ## 3.3.2
 378 | * fix entity names
 379 | 
 380 | ## 3.3.1
 381 | * fix stop digging (@Karang)
 382 | 
 383 | ## 3.3.0
 384 | * trading fix (@validgem)
 385 | * fix enchantments (@goncharovchik)
 386 | * fix newListener and removeListener stacking on world change (@U5B)
 387 | * add a 'messagestr' event (@U9G)
 388 | * Add an option forceLook for place block similar to the digging one (@CyberPatrick)
 389 | * Can see block add intersect match (@sefirosweb)
 390 | * Add ability to use an anvil fully (@U9G)
 391 | 
 392 | ## 3.2.0
 393 | * Fix position in getBlock()
 394 | 
 395 | ## 3.1.0
 396 | * Fix typings of findBlock and findBlocks (@csorfab)
 397 | * place block improvements (@Karang)
 398 | * add face option to dig (@IceTank)
 399 | * trading fixes (@validgem)
 400 | * world events exposed by pworld (@u9g)
 401 | * fix wait for ticks and expose physicsEnabled (@Karang)
 402 | 
 403 | ## 3.0.0
 404 | * added null or undefined check in inventory (@u9g)
 405 | * Removed broken use of "this" in physics.js (@TheDudeFromCI)
 406 | * Promisify testCommon (@ArcticZeroo)
 407 | * Fixed Bot not skipping end credits (@IceTank)
 408 | * BREAKING: Simplify windows API and promisify tests (@Karang) : several methods and events from window API were changed:
 409 |   * Removed Chest, EnchantmentTable, Furnace, Dispenser and Villager classes (they all are Windows now)
 410 |   * Dispensers are now handled by the same code as other containers, hopper too (they were missing)
 411 |   * There is now only 2 events signaling a slot update ("updateSlot" and "updateSlot:slotId" of the Window class) (before there was: "setSlot", "setSlot:windowId", "windowUpdate", "updateSlot", on 3 different eventEmitter (and not all of them were working properly))
 412 |   * All windows (present and future) now have a withdraw and deposit function
 413 | 
 414 | ## 2.41.0
 415 | * Fix Time type definition (@hivivo)
 416 | * Add face for block in sight result (@Karang)
 417 | * Fix skin restorer bug (@TheDudeFromCI)
 418 | * Improve enchantment table info (@Karang)
 419 | * 1.16.5 support (@rom1504)
 420 | 
 421 | ## 2.40.1
 422 | * Fix for not handling negative numbers in time plugin (@Naomi)
 423 | * Fix typescript Bot definition (@rom1504)
 424 | 
 425 | ## 2.40.0
 426 | * fix for dig ignore (@TheDudeFromCI)
 427 | * better calculation of digging range (@goncharovchik)
 428 | * emit death once (@extremeheat)
 429 | * add waitForTicks function (@TheDudeFromCI)
 430 | * add null check for sign text (@u9g)
 431 | 
 432 | ## 2.39.2
 433 | * explicit node 14 support
 434 | 
 435 | ## 2.39.1
 436 | * add null check in bot.dig (@rom1504)
 437 | * Fix deprecation warning for block in sight (@Karang)
 438 | 
 439 | ## 2.39.0
 440 | * Add number support to bot.chat (@BlueBurgersTDD)
 441 | * Fixed && Improved blockFind function with useExtraInfo = true (@magicaltoast)
 442 | * Added option to allow the bot to keep it's head in place when mining. (@TheDudeFromCI)
 443 | 
 444 | ## 2.38.0
 445 | * Add bot.game.serverBrand property (@Karang)
 446 | * set extraInfos to false in blockIsNotEmpty (@mat-1)
 447 | * make the ChatMessage.toAnsi:lang argument optional (@Antonio32A)
 448 | * Fixed message types (@TheDudeFromCI)
 449 | * by default hideErrors is now true (@rom1504)
 450 | 
 451 | ## 2.37.1
 452 | * Optimize lookAt promise behavior (@ph0t0shop)
 453 | 
 454 | ## 2.37.0
 455 | * Promisify villager & Trader (thanks @ph0t0shop)
 456 | * protect against action id going over 32767 (@rom1504)
 457 | * fix incorrect handling of username definition (@rom1504)
 458 | 
 459 | ## 2.36.0
 460 | * all async method now both return promises and take a callback (thanks @ph0t0shop for this great improvement)
 461 | 
 462 | ## 2.35.0
 463 | * Extra position packet after TP
 464 | * Add blockAtCursor
 465 | * Deprecate blockInSight
 466 | * TS typing fixes
 467 | 
 468 | ## 2.34.0
 469 | * 1.16.4 support
 470 | 
 471 | ## 2.33.0
 472 | * block_actions fix (thanks @SpikeThatMike)
 473 | * typescript fixes (thanks @TheDudeFromCI and @NotSugden)
 474 | * add uuid by objectUUID handling (thanks @Rob9315)
 475 | * fix bed packet (thanks @imharvol)
 476 | * better plugin handling (thanks @TheDudeFromCI)
 477 | 
 478 | ## 2.32.0
 479 | * 1.16.3 support (thanks @GroobleDierne and @TheDudeFromCI)
 480 | * fix bug with entity width (thanks @TheDudeFromCI)
 481 | * Add ability to call openChest on shulker boxes (thanks @efunneko)
 482 | 
 483 | ## 2.31.0
 484 | * Fix furnace and add tests (thanks @ImHarvol)
 485 | * Add offhand param to d.ts (thanks @TheDudeFromCI)
 486 | * Add hasAttackCooldown feature (thanks @TheDudeFromCI)
 487 | * Add type validation for bot.chat (thanks @BlueBurgersTDD)
 488 | * Add chat position to message event (thanks @larspapen)
 489 | 
 490 | ## 2.30.0
 491 | * Add support for Barrel (#1344) (thanks @ImHarvol)
 492 | * Fix attack cooldown bug (thanks @TheDudeFromCI)
 493 | * Exposed getDestSlot (thanks @TheDudeFromCI)
 494 | * Simplify setCommandBlock arguments (thanks @ImHarvol)
 495 | * hide unknown transaction warning if hideErrors option is enabled
 496 | 
 497 | ## 2.29.1
 498 | * fix findblock typescript def (thanks @TheDudeFromCI)
 499 | * fix setCommandBlock for recent versions (thanks @ImHarvol)
 500 | 
 501 | ## 2.29.0
 502 | * Add hand parameter to activateItem (thanks @Karang)
 503 | * remove _chunkColumn from the api (bot.world should now be used)
 504 | * Handle MC|AdvCmd misspelling (thanks @ImHarvol)
 505 | 
 506 | ## 2.28.1
 507 | * fix findBlocks (thanks @Karang)
 508 | 
 509 | ## 2.28.0
 510 | * add nearestEntity function (thanks @Karang)
 511 | 
 512 | ## 2.27.0
 513 | * add heldItemChanged
 514 | 
 515 | ## 2.26.0
 516 | * use and expose prismarine-world as bot.world
 517 | * add itemDrop event (thanks @ImHarvol)
 518 | * fix bot.fish callback (thanks @GroobleDierne)
 519 | * parse entity metadata for crouching (thanks @IdanHo)
 520 | * fix bot.time.day (thanks @Naomi-alt)
 521 | * improve find blocks options (thanks @Karang)
 522 | 
 523 | ## 2.25.0
 524 | * emit chestLidMove (thanks @imharvol)
 525 | * add options for main hand selection (thanks @Colten-Covington)
 526 | * fix respawning columns issues (thanks @Karang)
 527 | 
 528 | ## 2.24.0
 529 | * Fix getBlockAt when outside bounds
 530 | * Improve documentation and examples
 531 | * Add ability to change the skin parts of a bot (thanks @Naomi-alt)
 532 | 
 533 | ## 2.23.0
 534 | * 1.16 support
 535 | * fix noteheard (thanks @Naomi-alt)
 536 | 
 537 | ## 2.22.1
 538 | * better typedef (thanks @Konstantin)
 539 | * fix off by 1 error in findBlocks (thanks @Karang)
 540 | * physics.js look fix (thanks @thesourceoferror)
 541 | * fix chat message bracketing (thanks @Nurutomo)
 542 | * use prismarine-physics
 543 | 
 544 | ## 2.22.0
 545 | * Improve digTime computation (thanks @Karang)
 546 | * expose blockEntity.raw (thanks @SiebeDW)
 547 | * improve typedef for find block options (thanks @TheDudeFromCI)
 548 | 
 549 | ## 2.21.0
 550 | * don't log errors if hideErrors is true
 551 | 
 552 | ## 2.20.0
 553 | * add extra infos option in find block
 554 | 
 555 | ## 2.19.2
 556 | * fix ground up for 1.13->1.15
 557 | 
 558 | ## 2.19.1
 559 | * fix find block (thanks @Karang)
 560 | * improve sign parsing (thanks @cookiedragon234)
 561 | 
 562 | ## 2.19.0
 563 | * much faster findBlock (thanks @Karang)
 564 | 
 565 | ## 2.18.0
 566 | * fix bugs in lookAt and setQuickBarSlot
 567 | * add auto_totem example (thanks @AlexProgrammerDE)
 568 | * improve blockAt speed
 569 | 
 570 | ## 2.17.0
 571 | * physics engine refactor (thanks @Karang)
 572 | * mcdata update for better 1.14 and 1.15 support
 573 | 
 574 | ## 2.16.0
 575 | * use protodef compiler (thanks @Karang)
 576 | * off-hand support (thanks @Karang)
 577 | * fix type definitions (thanks @dada513)
 578 | 
 579 | ## 2.15.0
 580 | * fix transfer bugs (thanks @Karang)
 581 | * add typescript definitions (thanks @IdanHo)
 582 | 
 583 | ## 2.14.1
 584 | * fix openVillager
 585 | 
 586 | ## 2.14.0
 587 | * 1.15 support
 588 | * russian translation (thanks @shketov)
 589 | 
 590 | ## 2.13.0
 591 | * 1.14 support : more tests, refactored pwindows, feature flags (thanks @Karang)
 592 | * Look at the center of the face when placing block
 593 | * improve bot.sleep : don't sleep if mob are present (thanks @ImHarvol)
 594 | 
 595 | ## 2.12.0
 596 | * 1.13 support (thanks @Karang, @hornta, @SiebeDW)
 597 | * better fishing support (thanks @hutu13879513663)
 598 | 
 599 | ## 2.11.0
 600 | * Expose columns & blockEntities (thanks @SiebeDW)
 601 | * Create discord.js (thanks @SiebeDW)
 602 | * change amount of slots based on version (thanks @IdanHo)
 603 | * Fix 'respawn' event (thanks @ImHarvol)
 604 | * Add callback to creative set block (thanks @wvffle)
 605 | 
 606 | ## 2.10.0
 607 | Lot of fixes from @wvffle in this release :
 608 | * more checks when digging
 609 | * expose a bot.swingArgm() function
 610 | * better toString to chat message
 611 | * fix handling of empty signs
 612 | * correct handling of entity metadata change
 613 | And some others :
 614 | * new tps plugin by @SiebeDW
 615 | * correct handling of chunk unloading by @IdanHo
 616 | 
 617 | ## 2.9.6
 618 | * fix logErrors option
 619 | 
 620 | ## 2.9.5
 621 | * fix logErrors
 622 | 
 623 | ## 2.9.4
 624 | * enable catching and logging of errors by default
 625 | 
 626 | ## 2.9.3
 627 | * fix typo in variable name actionId
 628 | 
 629 | ## 2.9.2
 630 | * improve pushback (thanks @Vap0r1ze)
 631 | * more robust handling of tablist (thanks @wvffle)
 632 | * ignore (with a warning) transaction without previous click
 633 | 
 634 | ## 2.9.1
 635 | * improve boss bar
 636 | * add checks in scoreboard implementation
 637 | 
 638 | ## 2.9.0
 639 | 
 640 | * add universal chat patterns to support more chat plugins
 641 | 
 642 | ## 2.8.1
 643 | 
 644 | * fix error on scoreboard removal
 645 | 
 646 | ## 2.8.0
 647 | 
 648 | lot of new features from @wvffle :
 649 | 
 650 | * support for block entities
 651 | * improved block bars support
 652 | * add block in sight
 653 | * fix scoreboard support
 654 | * add eating support
 655 | * add tab complete support
 656 | * add fishing support
 657 | * better sign text support
 658 | * repl example
 659 | 
 660 | ## 2.7.5
 661 | 
 662 | * improve basic find block a bit
 663 | 
 664 | ## 2.7.4
 665 | 
 666 | * start the bot alive in all cases
 667 | * correct run speed and use it to limit the speed properly (thanks @CheezBarger)
 668 | * emit error instead of throwing when loading a chunk (thanks @ArcticZeroo)
 669 | 
 670 | ## 2.7.3
 671 | 
 672 | * use docsify for docs
 673 | 
 674 | ## 2.7.2
 675 | 
 676 | * don't do anything if transaction.action < 0 (fix for some non-vanilla plugins)
 677 | 
 678 | ## 2.7.1
 679 | 
 680 | * include fixes from pchunk, protodef and mcdata
 681 | 
 682 | ## 2.7.0
 683 | 
 684 | * fix cannot jump repeatedly
 685 | * fix spaces in chatmessage (thanks @Gjum)
 686 | * add bot.getControlStates (thanks @ArcticZeroo)
 687 | * Support end dimension (thanks @iRath96)
 688 | * Added sneaking option to controll states (thanks @Meldiron)
 689 | * add title event (thanks @yario-o)
 690 | * Update sound.js to include hardcoded sound effects (thanks @jeresuikkila)
 691 | * Support for the new launcher_profiles.json format  (thanks @Amezylst)
 692 | * update api about checkTimeoutInterval
 693 | 
 694 | ## 2.6.1
 695 | 
 696 | * fix chatmessage
 697 | * add plugins to bot options to be able to disable an internal plugin
 698 | 
 699 | ## 2.6.0
 700 | 
 701 | * improve ChatMessage translation functionality (thanks @plexigras)
 702 | * added eslint
 703 | * es6
 704 | * fix autoversion in online mode
 705 | 
 706 | ## 2.5.0
 707 | 
 708 | * don't swing arm when activating an entity
 709 | * new plugin loading api
 710 | 
 711 | ## 2.4.1
 712 | 
 713 | * better 1.12 support
 714 | 
 715 | ## 2.4.0
 716 | 
 717 | * auto version detection (thanks @plexigras)
 718 | 
 719 | ## 2.3.0
 720 | 
 721 | * support version 1.12 (thanks @jonathanperret)
 722 | * add example to use minecraft session file for auth (thanks @plexigras)
 723 | 
 724 | ## 2.2.0
 725 | 
 726 | * added book writing plugin (thanks @plexigras)
 727 | * Make sure bot.time.day is between 0 and 24000 (thanks @roblabla)
 728 | * Pass skyLightSent to Chunk.load (thanks @iRath96)
 729 | 
 730 | ## 2.1.1
 731 | 
 732 | * use protodef aliases to properly define channels
 733 | 
 734 | ## 2.1.0
 735 | 
 736 | * add bot.canSeeBlock (thanks @Nixes)
 737 | * handle unknown entities and entities sent with their internal id
 738 | * add bloodhound to plugin list
 739 | * fix chat hoverEvent for 1.9
 740 | 
 741 | ## 2.0.0
 742 | 
 743 | * added support for minecraft chests (thanks @plexigras)
 744 | * cross version support : 1.8, 1.9, 1.10 and 1.11 now supported
 745 | * [BREAKING] prismarine classes (Block, Entity, Recipe, ...) are now available only by requiring them, not in mineflayer.X. It was required to make cross version possible. minecraft-data is also to be required directly and not available as mineflayer.blocks. The code depending on this should be updated, hence the major version.
 746 | 
 747 | ## 1.8.0
 748 | 
 749 | * add actionBar event (thanks @ArcticZeroo)
 750 | * added support for villager trading (thanks @plexigras)
 751 | 
 752 | ## 1.7.5
 753 | 
 754 | * bump dependencies
 755 | 
 756 | ## 1.7.4
 757 | 
 758 | * update minecraft-data
 759 | 
 760 | ## 1.7.3
 761 | 
 762 | * add callback to activateBlock
 763 | 
 764 | ## 1.7.2
 765 | 
 766 | * update dependencies
 767 | 
 768 | ## 1.7.1
 769 | 
 770 |  * update minecraft-protocol, minecraft-data and protodef
 771 | 
 772 | ## 1.7.0
 773 | 
 774 |  * listen for disconnect in login phase (thanks @deathcap)
 775 |  * fix multi_block_change (thanks @Corgano)
 776 |  * remove chat filter : fix utf8 in chat
 777 |  * add extra tolerance for malformed sign packets (thanks @G07cha)
 778 |  * adapt to new minecraft data entities format
 779 |  * update minecraft-protocol to 0.17.2
 780 | 
 781 | 
 782 | ## 1.6.0
 783 | 
 784 |  * add functionalities to use scoreboard (thanks @jakibaki)
 785 |  * update to minecraft-data 0.16.3
 786 |  * 50 -> 20 tps for physics
 787 |  * Remove requireindex, for browserify support
 788 |  * add bot.setCommandBlock
 789 | 
 790 | ## 1.5.3
 791 | 
 792 |  * fix entity_status
 793 | 
 794 | ## 1.5.2
 795 | 
 796 |  * use prismarine-recipe and prismarine-windows
 797 |  * use require-self to be able to do require('mineflayer') in the examples
 798 |  * fix viewDistance sending
 799 | 
 800 | ## 1.5.1
 801 | 
 802 |  * add checkTimeoutInterval to createBot
 803 | 
 804 | ## 1.5.0
 805 | 
 806 |  * fix achievements parsing in toString()
 807 |  * update to nmp 0.16
 808 |  * use prismarine-item
 809 |  * add example to run multiple bots
 810 |  * uuid is now a dashed string
 811 |  * remove digging interruption : this doesn't happen in 1.8 servers (and caused problem in some spigot servers)
 812 | 
 813 | ## 1.4.0
 814 | 
 815 |  * improve placeBlock : now use lookAt before placing and has a callback
 816 |  * fix soulsand speed
 817 |  * use new multi-version version of (node-)minecraft-data
 818 | 
 819 | ## 1.3.0
 820 | 
 821 |  * swing arm on placing a block, look at center of block when activating a block (thanks gipsy-king)
 822 |  * refactor examples (thanks Pietro210)
 823 |  * add clickWindow support to ContainerWindow (thanks Gnomesley)
 824 |  * fix skylight in the nether
 825 |  * update node-mojangson to display unparsed text in case of error
 826 | 
 827 | ## 1.2.1
 828 | 
 829 |  * Prevent crash when an unknown entity is spawned
 830 |  * add createBot to api.md
 831 | 
 832 | ## 1.2.0
 833 | 
 834 |  * update minecraft-protocol to 0.14.0 : several fixes (error are now catchable, packets are in-order, packets fixes, etc.)
 835 |  * add ContainerWindow to support non-Vanilla plugins and add /invsee example (thanks Pietro210)
 836 |  * add a callback to bot.look and bot.lookAt
 837 |  * when receiving a remove effect packet : if the corresponding effect doesn't exist yet, emit an event with just the id of the effect (thanks Pietro210)
 838 |  * swing arm immediately when digging (thanks gipsy-king)
 839 |  * now updates bot.entity.heldItem when bot.heldItem is updated
 840 |  * fix cli args in examples
 841 |  * add forcedMove event
 842 |  * fix equipment api
 843 |  * new minecraft data version : better metadata handling
 844 | 
 845 | ## 1.1.2
 846 | 
 847 |  * a small fix in chat.js
 848 |  * add a licence file
 849 | 
 850 | ## 1.1.1
 851 | 
 852 |  * bot.transfer is faster
 853 |  * fix arm_animation
 854 |  * using mojangson parser for chat hoverevent
 855 |  * add chat patterns for unidentified chat messages
 856 |  * fix player leaving
 857 | 
 858 | ## 1.1.0
 859 | 
 860 | Lot of fixes and improvements in this version in order to support mineflayer 1.8.3, including :
 861 | 
 862 |  * minecraft 1.8.3 support
 863 |  * update minecraft protocol to 0.13.4
 864 |  * move enums data to minecraft-data
 865 |  * add automatic testing with a vanilla minecraft server on circle ci
 866 |  * add argv arguments to examples
 867 |  * refactor inventory.js
 868 |  * use new recipe format handling metadata better
 869 |  * fix lot of things to support 1.8.3 including :
 870 |   * block format change
 871 |   * position change : y is now always at the feet of the bot
 872 | 
 873 | ## 1.0.0
 874 | 
 875 |  * updated minecraft protocol to 0.11 (Minecraft 1.6.2 support).
 876 |  * small changes in the arguments of some events: `chat`, `whisper` and `message`. See [doc/api.md](https://github.com/andrewrk/mineflayer/blob/master/doc/api.md).
 877 | 
 878 | ## 0.1.1
 879 | 
 880 |  * updated minecraft protocol to 0.10 (Minecraft 1.5.2 support).
 881 | 
 882 | ## 0.1.0
 883 | 
 884 | Huge thanks to [zuazo](https://github.com/zuazo) for debugging and
 885 | eliminating the problems with 1.5.1 protocol update and node 0.10 update!
 886 | 
 887 |  * update minecraft-protocol to 0.9.0 - includes many fixes
 888 |  * blocks: fix buffer length assertion error (thanks zuazo)
 889 |  * physics: fix assertion error (thanks zuazo)
 890 | 
 891 | ## 0.0.35
 892 | 
 893 |  * inventory: window clicking waits a bit if you have just dug
 894 |    fixes a rejected transaction race condition.
 895 | 
 896 | ## 0.0.34
 897 | 
 898 |  * inventory: equipping makes the quick bar a basic LRU cache.
 899 |    This can alleviate some race conditions when trying to equip a
 900 |    different tool immediately after digging.
 901 | 
 902 | ## 0.0.33
 903 | 
 904 |  * crafting: fix shapeless recipe support
 905 |  * inventory: fix several instances which could cause transaction rejected
 906 |  * add missing recipes (thanks rom1504)
 907 |  * `recipe.delta` data structure changed.
 908 | 
 909 | ## 0.0.32
 910 | 
 911 |  * digging: fix crash when not holding a tool
 912 | 
 913 | ## 0.0.31
 914 | 
 915 |  * only stationary water has a negative effect on digging
 916 |  * digging: if you dig while already digging, instead of crashing,
 917 |    mineflayer will cancel the in progress dig and start the new one.
 918 |  * digging: in creative mode dig time is 0
 919 |  * digging interruption error has a code so you can check for it
 920 | 
 921 | ## 0.0.30
 922 | 
 923 |  * expose the materials enum as `mineflayer.materials`
 924 | 
 925 | ## 0.0.29
 926 | 
 927 |  * digging is faster and has less bugs
 928 |  * you can stop digging with `bot.stopDigging()`.
 929 |  * `bot.dig(block, [timeout], [callback])` changed to `bot.dig(block, [callback])`.
 930 |  * add `bot.digTime(block)`
 931 |  * add `block.material`
 932 |  * add `block.harvestTools`
 933 |  * add `window.emptySlotCount()`
 934 |  * block and item enums are cleaned up. Every block and item has an
 935 |    unambiguous `name` and `displayName`.
 936 | 
 937 | ## 0.0.28
 938 | 
 939 |  * add missing recipe for wooden planks
 940 |  * fix various crafting and inventory bugs
 941 |  * unequip works with hand as a destination
 942 | 
 943 | ## 0.0.27
 944 | 
 945 |  * add `mineflayer.Location` which can help you locate chunk boundaries
 946 |  * `entity.metadata` is formatted as an object instead of an array for
 947 |    easier access
 948 |  * `canDigBlock` returns `false` if `block` is `null` instead of crashing.
 949 | 
 950 | ## 0.0.26
 951 | 
 952 |  * fix `bot.heldItem` being wrong sometimes
 953 |  * water and lava are not solid
 954 | 
 955 | ## 0.0.25
 956 | 
 957 |  * `bot.equip` - wait at least a tick before calling callback
 958 | 
 959 | ## 0.0.24
 960 | 
 961 |  * fix digging leaves not calling callback.
 962 | 
 963 | ## 0.0.23
 964 | 
 965 |  * add enchantment table support. See `examples/chest.js` for an example.
 966 |  * rename `bot.tell` to `bot.whisper` to be consistent with 'whisper' event.
 967 |    (thanks Darthfett)
 968 | 
 969 | ## 0.0.22
 970 | 
 971 |  * update vec3 to 0.1.3
 972 |  * add "whisper" chat event
 973 | 
 974 | ## 0.0.21
 975 | 
 976 | This release is feature-complete with the old
 977 | [C++/Qt based version of mineflayer](https://github.com/andrewrk/mineflayer/blob/cpp-qt-end).
 978 | 
 979 |  * add `bot.activateItem()`
 980 |  * add `bot.deactivateItem()`
 981 |  * add `bot.useOn(targetEntity)`
 982 | 
 983 | ## 0.0.20
 984 | 
 985 |  * add dispenser support
 986 |    - add `mineflayer.Dispenser`
 987 |    - add `bot.openDispenser(dispenserBlock)`
 988 | 
 989 | ## 0.0.19
 990 | 
 991 |  * add furnace support
 992 |    - add `mineflayer.Furnace`
 993 |    - add `bot.openFurnace(furnaceBlock)`
 994 |  * `mineflayer.Chest`: "update" event renamed to "updateSlot"
 995 |  * `bot.equip(itemType, destination, [callback])` changed to
 996 |    `bot.equip(item, destination, [callback])`. Use `bot.inventory.items()`
 997 |    to get a list of what items you can choose from to equip.
 998 |  * fix `bot.openChest` not working for ender chests
 999 |  * fix incorrectly scaled fuel percentage
1000 |  * upgrade to minecraft-protocol 0.7.0
1001 |    - `mineflayer.createBot` no longer takes a `email` argument.
1002 |    - The `username` and `password` arguments are used to authenticate with the
1003 |      official minecraft servers and determine the case-correct username. If
1004 |      you have migrated your user account to a mojang login, `username` looks
1005 |      like an email address.
1006 |    - If you leave out the `password` argument, `username` is used to connect
1007 |      directly to the server. In this case you will get kicked if the server is
1008 |      in online mode.
1009 | 
1010 | ## 0.0.18
1011 | 
1012 |  * fix crash for some block updates
1013 | 
1014 | ## 0.0.17
1015 | 
1016 | recalled
1017 | 
1018 | ## 0.0.16
1019 | 
1020 |  * add chest support
1021 |    - add `mineflayer.Chest`
1022 |    - add `bot.openChest(chestBlock)`
1023 |  * `block.meta` renamed to `block.metadata`
1024 |  * `item.meta` renamed to `item.metadata`
1025 |  * fix crash when player causes entityGone message
1026 |  * update to minecraft-protocol 0.6.6
1027 | 
1028 | ## 0.0.15
1029 | 
1030 |  * fix `bot.sleep` not working at all
1031 |  * add `bot.isSleeping`
1032 |  * add "sleep" event
1033 |  * add "wake" event
1034 |  * `bot.sleep(bedPoint)` changed to `bot.sleep(bedBlock)`
1035 |  * fix `mineflayer.Recipe` not exposed
1036 | 
1037 | ## 0.0.14
1038 | 
1039 |  * add crafting support
1040 |    - add `mineflayer.windows`
1041 |    - add `mineflayer.Recipe`
1042 |    - `bot.inventory` is now an instance of `InventoryWindow`
1043 |    - `bot.inventory.count` is no longer a map of id to count.
1044 |      `Window` instances have a `count(itemType, [metadata])` method.
1045 |    - `bot.inventory.quickBarSlot` moved to `bot.quickBarSlot`.
1046 |    - add `'windowOpen' (window)` event
1047 |    - add `'windowClose' (window)` event
1048 |    - add `bot.craft(recipe, count, craftingTable, [callback])`
1049 |    - add `bot.recipesFor(itemType, metadata, minResultCount, craftingTable)`
1050 |  * `block.pos` renamed to `block.position`.
1051 |  * `'blockUpdate' (point)` event signature changed to
1052 |    `'blockUpdate' (oldBlock, newBlock)`
1053 |  * `'blockUpdate:(x, y, z)'` event signature changed to
1054 |    `'blockUpdate:(x, y, z)' (oldBlock, newBlock)`
1055 |  * add `'diggingAborted' (block)` event
1056 |  * add `bot.unequip(destination, [callback])`
1057 |  * add `bot.toss(itemType, metadata, count, [callback])`
1058 |  * `bot.startDigging(block)` changed to `bot.dig(block, [timeout], [callback])`.
1059 |  * add `bot.activateBlock(block)`
1060 | 
1061 | ## 0.0.13
1062 | 
1063 |  * fix `bot.equip` when already equipping the item
1064 |  * fix some incorrect block physics
1065 |  * add `mineflayer.recipes` enum
1066 |  * fix crash when digging at a high elevation
1067 | 
1068 | ## 0.0.12
1069 | 
1070 |  * add inventory support
1071 |    - add `Item` class which is exposed on `mineflayer`
1072 |    - add `bot.inventory` (see docs for more details)
1073 |    - add `bot.equip(itemType, destination, [callback])`
1074 |    - add `bot.tossStack(item, [callback])`
1075 |  * add digging support
1076 |    - add `bot.startDigging(block)`
1077 |    - add `bot.canDigBlock(block)`
1078 |  * blocks: add `blockUpdate:(x, y, z)` event.
1079 |  * add building support
1080 |    - add `bot.placeBlock(referenceBlock, faceVector)`
1081 |  * add `block.painting`
1082 |  * add `Painting` class which is exposed on `mineflayer`
1083 |  * add experience orb support
1084 |    - `entity.type` can be `orb` now
1085 |    - `entity.count` is how much experience you get for collecting it
1086 | 
1087 | ## 0.0.11
1088 | 
1089 |  * physics: skip frames instead of glitching out
1090 |  * default bot name to Player - `createBot` can take no arguments now.
1091 | 
1092 | ## 0.0.10
1093 | 
1094 |  * physics: fix bug: walking too slowly on Z axis
1095 | 
1096 | ## 0.0.9
1097 | 
1098 |  * ability to sprint (thanks ruan942)
1099 |  * fix color code stripping (thanks rom1504)
1100 |  * event "onNonSpokenChat" deleted
1101 |  * new event "message" which fires for all messages
1102 |  * `bot.chat` no longer checks for "/tell" at the beginning
1103 |  * add `bot.tell(username, message)` method
1104 |  * fix crash when an entity effect occurs
1105 | 
1106 | ## 0.0.8
1107 | 
1108 |  * chat: no longer suppress "chat" events for your own chat (thanks Darthfett).
1109 |  * ability to mount / dismount vehicles and attack
1110 |  * physics: fix tall grass and dead bushes treated as solid
1111 |  * fix "respawn" event firing twice sometimes
1112 |  * remove `bot.spawn()` and `autoSpawn` option. auto spawn is now mandatory.
1113 |  * fix sending spawn packet twice on init
1114 |  * fix bots spawning with their heads on backwards
1115 |  * fix bots jumping when they get hit
1116 |  * update player heights when they crouch
1117 |  * add support for signs: `block.signText` and `bot.updateSign(block, text)`
1118 | 
1119 | ## 0.0.7
1120 | 
1121 |  * add `bot.time.day` and `bot.time.age` and "time" event
1122 |  * add `bot.entities` which is a map of the entities around you
1123 |  * add `bot.look(yaw, pitch, force)` and `bot.lookAt(point, force)`
1124 | 
1125 | ## 0.0.6
1126 | 
1127 |  * add a physics engine which understands gravity
1128 |  * add jumper example, jumps whenever you chat
1129 |  * add `respawn` event which fires when you die or change dimensions
1130 |  * Block instances have a `boundingBox` property, which is currently either
1131 |    `solid` or `empty`.
1132 |  * fix `game` event to fire correctly
1133 |  * `bot.game.spawnPoint` moved to `bot.spawnPoint`.
1134 |  * `bot.game.players` moved to `bot.players`.
1135 |  * `bot.quit` has a default reason of "disconnect.quitting" (thanks Darthfett)
1136 | 
1137 | ## 0.0.5
1138 | 
1139 |  * unload chunks when changing dimensions
1140 |  * blocks: handle all forms of block changing so that `blockAt` is always
1141 |    accurate.
1142 | 
1143 | ## 0.0.4
1144 | 
1145 |  * expose Block, Biome, and Entity
1146 | 
1147 | ## 0.0.3
1148 | 
1149 |  * add `bot.blockAt(point)` which returns a `Block`
1150 |  * add `mineflayer.blocks`, `mineflayer.biomes`, and `mineflayer.items`
1151 |  * add bot `chunk` event
1152 |  * fix `spawn` event and `settings.showCape`
1153 |  * added chatterbox example
1154 |  * changed `entityDetach` event to have a vehicle argument
1155 |  * changed `entityEffectEnd` event to have an effect argument
1156 |    instead of `effectId`
1157 |  * fix prefixes in pseudos in chat. (thanks rom1504)
1158 |  * update vec3 to 0.1.0 which uses euclidean modulus
1159 | 
1160 | ## 0.0.2
1161 | 
1162 |  * add bot.game.spawnPoint
1163 |  * add spawn support
1164 |  * add rain support
1165 |  * add support for getting kicked
1166 |  * add settings support
1167 |  * add experience support
1168 |  * add bed support
1169 |  * health status knowledge
1170 |  * add entity tracking API
1171 | 


--------------------------------------------------------------------------------
/docs/index.html:
--------------------------------------------------------------------------------
 1 | <!DOCTYPE html>
 2 | <html lang="en">
 3 | <head>
 4 |   <meta charset="UTF-8">
 5 |   <title>mineflayer - create minecraft bots with a stable, high level API</title>
 6 |   <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
 7 |   <meta name="description" content="create minecraft bots with a stable, high level API">
 8 |   <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
 9 |   <link rel="stylesheet" href="//unpkg.com/docsify/lib/themes/vue.css">
10 |     <style>
11 |         .markdown-section {
12 |             max-width:1400px;
13 |         }
14 |     </style>
15 |     <!-- Global site tag (gtag.js) - Google Analytics -->
16 |     <script async src="https://www.googletagmanager.com/gtag/js?id=UA-128628977-3"></script>
17 |     <script>
18 |       window.dataLayer = window.dataLayer || [];
19 |       function gtag(){dataLayer.push(arguments);}
20 |       gtag('js', new Date());
21 | 
22 |       gtag('config', 'UA-128628977-3');
23 |     </script>
24 | </head>
25 | <body>
26 |   <div id="app"></div>
27 |   <script>
28 |     window.$docsify = {
29 |       name: 'mineflayer',
30 |       repo: 'https://github.com/PrismarineJS/mineflayer',
31 |       loadSidebar: true,
32 |       subMaxLevel: 2,
33 |       auto2top: true
34 |     }
35 |   </script>
36 |   <script src="//unpkg.com/docsify/lib/docsify.min.js"></script>
37 | </body>
38 | </html>
39 | 


--------------------------------------------------------------------------------
/docs/mineflayer.ipynb:
--------------------------------------------------------------------------------
  1 | {
  2 |   "nbformat": 4,
  3 |   "nbformat_minor": 0,
  4 |   "metadata": {
  5 |     "colab": {
  6 |       "name": "mineflayer.ipynb",
  7 |       "provenance": [],
  8 |       "collapsed_sections": [],
  9 |       "authorship_tag": "ABX9TyO3/6T3HTMoRxL7FoQ4bWrl",
 10 |       "include_colab_link": true
 11 |     },
 12 |     "kernelspec": {
 13 |       "name": "python3",
 14 |       "display_name": "Python 3"
 15 |     },
 16 |     "language_info": {
 17 |       "name": "python"
 18 |     }
 19 |   },
 20 |   "cells": [
 21 |     {
 22 |       "cell_type": "markdown",
 23 |       "metadata": {
 24 |         "id": "view-in-github",
 25 |         "colab_type": "text"
 26 |       },
 27 |       "source": [
 28 |         "<a href=\"https://colab.research.google.com/github/PrismarineJS/mineflayer/blob/master/docs/mineflayer.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
 29 |       ]
 30 |     },
 31 |     {
 32 |       "cell_type": "markdown",
 33 |       "metadata": {
 34 |         "id": "2BAYqsdOgKNJ"
 35 |       },
 36 |       "source": [
 37 |         "# Using mineflayer in Python\n",
 38 |         "\n",
 39 |         "This is a tutorial on how to use mineflayer in Python. This example will connect you to the PrismarineJS test server. You can join it with prismarine-viewer or your Minecraft client at server IP **pjs.deptofcraft.com:25565**.\n",
 40 |         "\n",
 41 |         "If you're new to Jupyter Notebooks, you can press the \"Play\" button at the left of each code block to run it. Make sure that you run the blocks in a correct order."
 42 |       ]
 43 |     },
 44 |     {
 45 |       "cell_type": "markdown",
 46 |       "metadata": {
 47 |         "id": "qM2rVyxGf2Yv"
 48 |       },
 49 |       "source": [
 50 |         "## Setup"
 51 |       ]
 52 |     },
 53 |     {
 54 |       "cell_type": "markdown",
 55 |       "metadata": {
 56 |         "id": "K2ol06QOhL6s"
 57 |       },
 58 |       "source": [
 59 |         "First, make sure you have Python version 3.10 and Node.js version 18 or newer installed. You can get Node.js 18 it from https://nodejs.org/en/download or use [Node.js version managers](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm#using-a-node-version-manager-to-install-nodejs-and-npm) like [`nvm`](https://github.com/creationix/nvm) or [`n`](https://github.com/tj/n) to install via the command line. Here we'll use `n` to install Node.js v18, then check our Node and Python versions:"
 60 |       ]
 61 |     },
 62 |     {
 63 |       "cell_type": "code",
 64 |       "execution_count": 1,
 65 |       "metadata": {
 66 |         "colab": {
 67 |           "base_uri": "https://localhost:8080/"
 68 |         },
 69 |         "id": "8zCSpx8Bif5m",
 70 |         "outputId": "90ebac14-fc75-4136-f81d-34c5b2033da0"
 71 |       },
 72 |       "outputs": [
 73 |         {
 74 |           "name": "stdout",
 75 |           "output_type": "stream",
 76 |           "text": [
 77 |             "v18.17.1\n",
 78 |             "Python 3.10.12\n"
 79 |           ]
 80 |         }
 81 |       ],
 82 |       "source": [
 83 |         "# Use `n` to install nodejs 18, if it's not already installed:\n",
 84 |         "!curl -fsSL https://raw.githubusercontent.com/tj/n/master/bin/n | bash -s lts > /dev/null\n",
 85 |         "# Now write the Node.js and Python version to the console\n",
 86 |         "!node --version\n",
 87 |         "!python --version"
 88 |       ]
 89 |     },
 90 |     {
 91 |       "cell_type": "markdown",
 92 |       "metadata": {
 93 |         "id": "C7omnDs3lNaV"
 94 |       },
 95 |       "source": [
 96 |         "Now, we can use pip to install the `javascript` Python package to access Node.js libraries from Python."
 97 |       ]
 98 |     },
 99 |     {
100 |       "cell_type": "code",
101 |       "metadata": {
102 |         "id": "DKnwzSZQ8Taf"
103 |       },
104 |       "source": [
105 |         " !pip install javascript"
106 |       ],
107 |       "execution_count": null,
108 |       "outputs": []
109 |     },
110 |     {
111 |       "cell_type": "markdown",
112 |       "metadata": {
113 |         "id": "_RAKlcScgKtV"
114 |       },
115 |       "source": [
116 |         "## Usage"
117 |       ]
118 |     },
119 |     {
120 |       "cell_type": "markdown",
121 |       "metadata": {
122 |         "id": "bxAdFbBfmdCd"
123 |       },
124 |       "source": [
125 |         "If all is well, we can import the `javascript` library. We can then import the `require` function which works similarly to the `require` function in Node.js, but does the dependency management for us.\n",
126 |         "\n",
127 |         "You may notice the extra imports : On, Once, off and AsyncTask. These will be discussed later on.\n",
128 |         "\n",
129 |         "\n"
130 |       ]
131 |     },
132 |     {
133 |       "cell_type": "code",
134 |       "metadata": {
135 |         "id": "54Lnq3aH4Tee"
136 |       },
137 |       "source": [
138 |         "from javascript import require, On, Once, AsyncTask, once, off"
139 |       ],
140 |       "execution_count": null,
141 |       "outputs": []
142 |     },
143 |     {
144 |       "cell_type": "markdown",
145 |       "metadata": {
146 |         "id": "cy7-0cWxdhU8"
147 |       },
148 |       "source": [
149 |         "We can now import Mineflayer"
150 |       ]
151 |     },
152 |     {
153 |       "cell_type": "code",
154 |       "metadata": {
155 |         "id": "8jgkTVniDPUZ"
156 |       },
157 |       "source": [
158 |         "mineflayer = require('mineflayer')"
159 |       ],
160 |       "execution_count": null,
161 |       "outputs": []
162 |     },
163 |     {
164 |       "cell_type": "markdown",
165 |       "metadata": {
166 |         "id": "WBAj5rSkgjKX"
167 |       },
168 |       "source": [
169 |         "Once we've done that, we can create a new `bot` instance, through the `createBot` function. You can see the docs for this function [here](https://github.com/PrismarineJS/mineflayer/blob/master/docs/api.md#bot). In the line below we specify a hostname and a port for the server, but do not pass any `auth` or `password` options, so it will connect to the server in offline mode.\n",
170 |         "\n",
171 |         "Below that, we also a call to the `once` function, which pauses the thread until an event has been triggered, then returns the output. Here, we print out  \"I spawned\" after the `login` event has been triggered on `bot`."
172 |       ]
173 |     },
174 |     {
175 |       "cell_type": "code",
176 |       "execution_count": null,
177 |       "metadata": {
178 |         "id": "1gfZSAUCDVMg"
179 |       },
180 |       "outputs": [],
181 |       "source": [
182 |         "random_number = id([]) % 1000 # Give us a random number upto 1000\n",
183 |         "BOT_USERNAME = f'colab_{random_number}'\n",
184 |         "\n",
185 |         "bot = mineflayer.createBot({ 'host': 'pjs.deptofcraft.com', 'port': 25565, 'username': BOT_USERNAME, 'hideErrors': False })\n",
186 |         "\n",
187 |         "# The spawn event\n",
188 |         "once(bot, 'login')\n",
189 |         "bot.chat('I spawned')"
190 |       ]
191 |     },
192 |     {
193 |       "cell_type": "markdown",
194 |       "metadata": {
195 |         "id": "yvYZYbi0k8Za"
196 |       },
197 |       "source": [
198 |         "If your bot spawned, we can now take a look at the bot's position"
199 |       ]
200 |     },
201 |     {
202 |       "cell_type": "code",
203 |       "metadata": {
204 |         "id": "swMd1VvXYuKn"
205 |       },
206 |       "source": [
207 |         "bot.entity.position"
208 |       ],
209 |       "execution_count": null,
210 |       "outputs": []
211 |     },
212 |     {
213 |       "cell_type": "markdown",
214 |       "metadata": {
215 |         "id": "EdSjlgmilZ3O"
216 |       },
217 |       "source": [
218 |         "### Listening to events"
219 |       ]
220 |     },
221 |     {
222 |       "cell_type": "markdown",
223 |       "metadata": {
224 |         "id": "23FTp0XrioMg"
225 |       },
226 |       "source": [
227 |         "You can register an event handler with the `@On` or `@Once` decorator. This decorator takes two arguments, first it's the **Event Emitter** (the object that is sending events) and the second is the **event name**, what event you want to listen to. *Do not use the .on or .once methods on bot, use the decorators instead.*\n",
228 |         "\n",
229 |         "A decorator always has a function under it which is being decorated, which can have any name. The first parameter to any event emitter callback is the `this` argument. \n",
230 |         "\n",
231 |         "In the code below, we create an event emitter on `bot` that listens to `playerJoin` events, then print that out."
232 |       ]
233 |     },
234 |     {
235 |       "cell_type": "code",
236 |       "metadata": {
237 |         "id": "s8QGmC4nHjnH"
238 |       },
239 |       "source": [
240 |         "@On(bot, 'playerJoin')\n",
241 |         "def end(this, player):\n",
242 |         "  bot.chat('Someone joined!')"
243 |       ],
244 |       "execution_count": null,
245 |       "outputs": []
246 |     },
247 |     {
248 |       "cell_type": "markdown",
249 |       "metadata": {
250 |         "id": "Onkn-TDsne9P"
251 |       },
252 |       "source": [
253 |         "In Python, you cannot leave any arguments for an event handler callback blank like in JavaScript. Instead, you can use the asterisk (`*`) operator in Python to capture all remaining arguments to the right, much like the `...` rest/spread operator in JavaScript. The parameter with the asterisk will be a tuple containing the captured arguments.\n",
254 |         "\n",
255 |         "You can stop listening for events through an event handler by using the imported `off` function. It takes three parameters: the emitter, event name, and a reference to the Python function.\n"
256 |       ]
257 |     },
258 |     {
259 |       "cell_type": "code",
260 |       "metadata": {
261 |         "id": "S4y9qAe6oh8H"
262 |       },
263 |       "source": [
264 |         "@On(bot, 'chat')\n",
265 |         "def onChat(this, user, message, *rest):\n",
266 |         "  print(f'{user} said \"{message}\"')\n",
267 |         "\n",
268 |         "  # If the message contains stop, remove the event listener and stop logging.\n",
269 |         "  if 'stop' in message:\n",
270 |         "    off(bot, 'chat', onChat)"
271 |       ],
272 |       "execution_count": null,
273 |       "outputs": []
274 |     },
275 |     {
276 |       "cell_type": "markdown",
277 |       "metadata": {
278 |         "id": "OybQNxGAq4P2"
279 |       },
280 |       "source": [
281 |         "You need to `off` all the event listeners you listen to with `@On`, else the Python process won't exit until all of the active event emitters have been off'ed. If you only need to listen once, you can use the `@Once` decroator like in the example above."
282 |       ]
283 |     },
284 |     {
285 |       "cell_type": "markdown",
286 |       "metadata": {
287 |         "id": "iOzZeWfHozeX"
288 |       },
289 |       "source": [
290 |         "## Asynchronous tasks\n",
291 |         "\n",
292 |         "By default, all the operations you do run on the main thread. This means you can only do one thing at a time. To multitask, you can use the `@AsyncTask` decroator to run a function in a new thread, while not obstructing the main thread."
293 |       ]
294 |     },
295 |     {
296 |       "cell_type": "markdown",
297 |       "metadata": {
298 |         "id": "xJUk8b21pOzg"
299 |       },
300 |       "source": [
301 |         "### Block breaking\n",
302 |         "\n",
303 |         "Take a look at the example below. Here we listen for a \"break\" trigger in a chat message, then we start digging the block underneath, while simultaneously sending a message that the bot has \"started digging\"."
304 |       ]
305 |     },
306 |     {
307 |       "cell_type": "code",
308 |       "metadata": {
309 |         "id": "yhoAlhAhpSTL"
310 |       },
311 |       "source": [
312 |         "@On(bot, 'chat')\n",
313 |         "def breakListener(this, sender, message, *args):\n",
314 |         "  if sender and (sender != BOT_USERNAME):\n",
315 |         "    if 'break' in message:\n",
316 |         "      pos = bot.entity.position.offset(0, -1, 0)\n",
317 |         "      blockUnder = bot.blockAt(pos)\n",
318 |         "      if bot.canDigBlock(blockUnder):\n",
319 |         "        bot.chat(f\"I'm breaking the '{blockUnder.name}' block underneath\")\n",
320 |         "        # The start=True parameter means to immediately invoke the function underneath\n",
321 |         "        # If left blank, you can start it with the `start()` function later on.\n",
322 |         "        try:\n",
323 |         "          @AsyncTask(start=True)\n",
324 |         "          def break_block(task):\n",
325 |         "            bot.dig(blockUnder)\n",
326 |         "          bot.chat('I started digging!')\n",
327 |         "        except Exception as e:\n",
328 |         "          bot.chat(f\"I had an error {e}\")\n",
329 |         "      else:\n",
330 |         "        bot.chat(f\"I can't break the '{blockUnder.name}' block underneath\")\n",
331 |         "    if 'stop' in message:\n",
332 |         "      off(bot, 'chat', breakListener)"
333 |       ],
334 |       "execution_count": null,
335 |       "outputs": []
336 |     },
337 |     {
338 |       "cell_type": "markdown",
339 |       "metadata": {
340 |         "id": "JMgoMA-MriAt"
341 |       },
342 |       "source": [
343 |         "## Using mineflayer plugins\n",
344 |         "\n",
345 |         "Pick the plugin you want from the list [here](https://github.com/PrismarineJS/mineflayer#third-party-plugins), then `require()` it and register it to the bot. Some plugins have different ways to register to the bot, look at the plugin's README for usage steps."
346 |       ]
347 |     },
348 |     {
349 |       "cell_type": "markdown",
350 |       "metadata": {
351 |         "id": "OVAJCyxcsfig"
352 |       },
353 |       "source": [
354 |         "### mineflayer-pathfinder\n",
355 |         "\n",
356 |         "`mineflayer-pathfinder` is a essential plugin that helps your bot move between places through A* pathfinding. Let's import it:"
357 |       ]
358 |     },
359 |     {
360 |       "cell_type": "code",
361 |       "metadata": {
362 |         "id": "mH6eXm8TtTKh"
363 |       },
364 |       "source": [
365 |         "pathfinder = require('mineflayer-pathfinder')\n",
366 |         "bot.loadPlugin(pathfinder.pathfinder)\n",
367 |         "# Create a new minecraft-data instance with the bot's version\n",
368 |         "mcData = require('minecraft-data')(bot.version)\n",
369 |         "# Create a new movements class\n",
370 |         "movements = pathfinder.Movements(bot, mcData)\n",
371 |         "# How far to be from the goal\n",
372 |         "RANGE_GOAL = 1"
373 |       ],
374 |       "execution_count": null,
375 |       "outputs": []
376 |     },
377 |     {
378 |       "cell_type": "markdown",
379 |       "metadata": {
380 |         "id": "Ju8MPkSauTBb"
381 |       },
382 |       "source": [
383 |         "Now let's have create a goal for the bot to move to where another player wants, based on a chat message."
384 |       ]
385 |     },
386 |     {
387 |       "cell_type": "code",
388 |       "metadata": {
389 |         "id": "8jIp8bxnudDK"
390 |       },
391 |       "source": [
392 |         "bot.removeAllListeners('chat')\n",
393 |         "@On(bot, 'chat')\n",
394 |         "def handleMsg(this, sender, message, *args):\n",
395 |         "  if sender and (sender != BOT_USERNAME):\n",
396 |         "    bot.chat('Hi, you said ' + message)\n",
397 |         "    if 'come' in message:\n",
398 |         "      player = bot.players[sender]\n",
399 |         "      target = player.entity\n",
400 |         "      if not target:\n",
401 |         "        bot.chat(\"I don't see you !\")\n",
402 |         "        return\n",
403 |         "      pos = target.position\n",
404 |         "      bot.pathfinder.setMovements(movements)\n",
405 |         "      bot.pathfinder.setGoal(pathfinder.goals.GoalNear(pos.x, pos.y, pos.z, RANGE_GOAL))\n",
406 |         "    if 'stop' in message:\n",
407 |         "      off(bot, 'chat', handleMsg)"
408 |       ],
409 |       "execution_count": null,
410 |       "outputs": []
411 |     },
412 |     {
413 |       "cell_type": "markdown",
414 |       "metadata": {
415 |         "id": "K36XDP09k1aH"
416 |       },
417 |       "source": [
418 |         "## Analyzing the world"
419 |       ]
420 |     },
421 |     {
422 |       "cell_type": "markdown",
423 |       "metadata": {
424 |         "id": "xK1Ww1ACmLZl"
425 |       },
426 |       "source": [
427 |         "You can also interact with mineflayer through any other Python package."
428 |       ]
429 |     },
430 |     {
431 |       "cell_type": "markdown",
432 |       "metadata": {
433 |         "id": "5QatUqxeW6b_"
434 |       },
435 |       "source": [
436 |         "Let's analyze some block frequencies..."
437 |       ]
438 |     },
439 |     {
440 |       "cell_type": "code",
441 |       "metadata": {
442 |         "colab": {
443 |           "base_uri": "https://localhost:8080/",
444 |           "height": 417
445 |         },
446 |         "id": "k2XyRgzi8otw",
447 |         "outputId": "a4de38b7-ec53-4e38-df0c-8b7f1067965e"
448 |       },
449 |       "source": [
450 |         "import matplotlib.pyplot as plt\n",
451 |         "figure = plt.figure()\n",
452 |         "axes = figure.add_axes([0,0,1,1])\n",
453 |         "Vec3 = require('vec3').Vec3\n",
454 |         "\n",
455 |         "columns = bot.world.getColumns()\n",
456 |         "block_freqs = {}\n",
457 |         "for c in range(0, 3): # iterate through some of the loaded chunk columns\n",
458 |         "  cc = columns[c].column\n",
459 |         "  for y in range(1, 40):\n",
460 |         "    for x in range(1, 16):\n",
461 |         "      for z in range(1, 16):\n",
462 |         "        block = cc.getBlock(Vec3(x, y, z))\n",
463 |         "        if block.name in block_freqs:\n",
464 |         "          block_freqs[block.name] += 1\n",
465 |         "        else:\n",
466 |         "          block_freqs[block.name] = 1\n",
467 |         "\n",
468 |         "print(block_freqs)\n",
469 |         "axes.bar(block_freqs.keys(), block_freqs.values())\n",
470 |         "plt.xticks(rotation=45)\n",
471 |         "plt.show()"
472 |       ],
473 |       "execution_count": null,
474 |       "outputs": [
475 |         {
476 |           "output_type": "stream",
477 |           "text": [
478 |             "{'bedrock': 1321, 'stone': 19258, 'diorite': 1123, 'lava': 64, 'granite': 1704, 'andesite': 1459, 'redstone_ore': 68, 'iron_ore': 156, 'coal_ore': 282, 'gold_ore': 26, 'lapis_ore': 5, 'dirt': 570, 'emerald_ore': 3, 'diamond_ore': 9, 'gravel': 66, 'air': 211}\n"
479 |           ],
480 |           "name": "stdout"
481 |         },
482 |         {
483 |           "output_type": "display_data",
484 |           "data": {
485 |             "image/png": "\n",
486 |             "text/plain": [
487 |               "<Figure size 432x288 with 1 Axes>"
488 |             ]
489 |           },
490 |           "metadata": {
491 |             "tags": [],
492 |             "needs_background": "light"
493 |           }
494 |         }
495 |       ]
496 |     },
497 |     {
498 |       "cell_type": "markdown",
499 |       "metadata": {
500 |         "id": "q2IkKpXZzRiP"
501 |       },
502 |       "source": [
503 |         "## Exiting the bot\n",
504 |         "\n",
505 |         "Once you're done, you can call `bot.quit()` or `bot.end()` to disconnect and stop the bot."
506 |       ]
507 |     },
508 |     {
509 |       "cell_type": "code",
510 |       "metadata": {
511 |         "id": "1-NxvPk1YuGw"
512 |       },
513 |       "source": [
514 |         "bot.quit()"
515 |       ],
516 |       "execution_count": null,
517 |       "outputs": []
518 |     },
519 |     {
520 |       "cell_type": "markdown",
521 |       "metadata": {
522 |         "id": "SpwlmlCBc90Q"
523 |       },
524 |       "source": [
525 |         "## Read more\n",
526 |         "\n",
527 |         "* **API** - https://github.com/PrismarineJS/mineflayer/blob/master/docs/api.md\n",
528 |         "* **Type Definitions** - https://github.com/PrismarineJS/mineflayer/blob/master/index.d.ts\n",
529 |         "* FAQ - https://github.com/PrismarineJS/mineflayer/blob/master/docs/FAQ.md\n",
530 |         "* JS tutorial - https://github.com/PrismarineJS/mineflayer/blob/master/docs/tutorial.md\n"
531 |       ]
532 |     }
533 |   ]
534 | }
535 | 


--------------------------------------------------------------------------------
/docs/ru/CONTRIBUTING_RU.md:
--------------------------------------------------------------------------------
 1 | # Вклад в проект
 2 | 
 3 | Изначально Mineflayer создал [andrewrk](http://github.com/andrewrk), но с тех пор проект был улучшен и исправлен многими [помощниками](https://github.com/andrewrk/mineflayer/graphs/contributors).
 4 | Это то, почему важно знать, как внести свой вклад в mineflayer.
 5 | 
 6 | ## Организация проблем
 7 | 
 8 | У нас есть метки трёх стадий для организаций проблем:
 9 | 
10 | * Стадия 1: созданы каким-либо новичком, мы не знаем, нуждается ли это в реализации или исправлении
11 | * Стадия 2: многообещающая идея, но требует дополнительного обдумывания перед реализацией
12 | * Стадия 3: идея точно задана, осталось только сделать код
13 | 
14 | Ссылки по типу https://github.com/PrismarineJS/mineflayer/issues?q=is%3Aopen+is%3Aissue+-label%3AStage1 могут использоваться для показа только с меток первой стадии, если вы хотите развить какую-либо тему.
15 | 
16 | ## Создание тестов
17 | Mineflayer имеет 2 вида тестов :
18 | 
19 |  * [Внутренние тесты](../../test/internalTest.js) : Тесты, которые выполняются на простом сервере, созданном с помощью node-minecraft-protocol.
20 |  * [Внешние тесты](../../test/externalTests/) : Тесты, который выполняются на ванильном сервере.
21 |  
22 | Цель этих тестов - автоматически определить, что работает, а что нет в mineflayer, чтобы было проще заставить mineflayer работать.
23 | 
24 | ### Создание внешних тестов
25 | 
26 | Для внешних тестов вам просто нужно создать файл в [test/externalTests](../../test/externalTests)
27 | 
28 | Например : [test/externalTests/digAndBuild.js](https://github.com/PrismarineJS/mineflayer/blob/master/test/externalTests/digAndBuild.js)
29 | 
30 | Этот файл должен экспортировать функцию, возвращающую функцию или массив функций, принимающих в качестве параметра объект бота и выполненный обратный вызов,  
31 | он должен содержать утверждения для проверки, если тестируемая функциональность не сработала.
32 | 
33 | 
34 | ## Создание стороннего плагина
35 | Mineflayer поддерживает плагины; любой желающий может создать плагин, который добавляет API еще более высокого уровня поверх Mineflayer.
36 | 
37 | Несколько сторонних плагинов, которые уже были сделаны вы можете найти [здесь](https://github.com/andrewrk/mineflayer#third-party-plugins).
38 | 
39 | Для того чтобы создать новый плагин, вам необходимо :
40 | 
41 | 1. Создать новый репозиторий
42 | 2. В вашем файле index.js, экспортировать функцию init, которая будет принимать mineflayer в качестве аргумента. ([Пример](https://github.com/andrewrk/mineflayer-navigate/blob/e24cb6a868ce64ae43bea2d035832c15ed01d301/index.js#L18))
43 | 3. Эта функция возвращает функцию inject, которая принимает объект бота. ([Пример](https://github.com/andrewrk/mineflayer-navigate/blob/e24cb6a868ce64ae43bea2d035832c15ed01d301/index.js#L23))
44 | 4. С помощью этой inject функции можно добавить функционал объекту бота. ([Пример](https://github.com/andrewrk/mineflayer-navigate/blob/e24cb6a868ce64ae43bea2d035832c15ed01d301/index.js#L32))
45 | 
46 | Поскольку объект mineflayer передается в параметре, этот новый пакет не должен зависеть от mineflayer (в package.json не должно быть зависимости mineflayer)
47 | 
48 | Смотрите [полный пример здесь](https://github.com/andrewrk/mineflayer-navigate/tree/e24cb6a868ce64ae43bea2d035832c15ed01d301).
49 | 
50 | ## Сообщения об ошибках
51 | Mineflayer хорошо работает в большинстве случаев, но иногда в нем все еще есть ошибки.
52 | 
53 | При обнаружении ошибки лучше всего сообщить о проблеме, предоставив следующую информацию :
54 | 
55 | * что вы хотите сделать (цель на английском языке)
56 | * что вы делаете (ваш код)
57 | * что происходит
58 | * что вы ожидали увидеть
59 | 
60 | ## Код Mineflayer
61 | Некоторые вещи, о которых следует подумать при отправке Pull Request или commit :
62 | 
63 | ### Обработка ошибок
64 | В большинстве случаев mineflayer не должен выводить бота из строя. Даже если что-то не сработает, бот может воспользоваться альтернативным маршрутом, чтобы добраться до своей цели.
65 | 
66 | Это означает, что мы не должны использовать `throw(new Error("error"))`, а вместо этого использовать соглашение node.js о передаче ошибки в обратном вызове.
67 | +
68 | Пример : 
69 | 
70 | ```js
71 | function myfunction (param1, callback) {
72 |   // что-то делаем
73 |   let toDo = 1
74 |   toDo = 2
75 |   if (toDo === 2) { // всё работает
76 |     callback()
77 |   } else {
78 |     callback(new Error('что-то не так'))
79 |   }
80 | }
81 | ```
82 | 
83 | Вы можете посмотреть другие примеры в [коде mineflayer](https://github.com/andrewrk/mineflayer/blob/a8736c4ea473cf1a609c5a29046c0cdad006d429/lib/plugins/bed.js#L10)
84 | 
85 | ### Обновление документации
86 | Список содержимого документации docs/api.md is made with doctoc. After updating that file, you should run doctoc docs/api.md to update the table of content.
87 | 


--------------------------------------------------------------------------------
/docs/ru/FAQ_RU.md:
--------------------------------------------------------------------------------
  1 | ## FAQ
  2 | 
  3 | Это документ с часто задаваемыми вопросами, предназначен для помощи людям в самых распространенных вещах.
  4 | 
  5 | ### Выдаёт ошибку при попытке войти в систему через аккаунт Microsoft.
  6 | 
  7 | Убедитесь, что адрес электронной почты, который вы ввели в поле username в createBot, можно использовать для входа на `minecraft.net` используя кнопку «Войти с помощью Microsoft».
  8 | Убедитесь, что у вас прописана опция `auth: 'microsoft'` в настройках вашего createBot.
  9 | 
 10 | Когда вы получите сообщение об ошибке, в котором говорится что-то о недопустимых учетных данных или «Владеет ли эта учетная запись Minecraft?», попробуйте удалить поле пароля в параметрах `createBot` и повторите попытку.
 11 | 
 12 | ### Как скрыть ошибки?
 13 | 
 14 | Используйте `hideErrors: true` в параметрах createBot. 
 15 | Вы также можете добавить эти слушатели:
 16 | ```js
 17 | client.on('error', () => {})
 18 | client.on('end', () => {})
 19 | ```
 20 | 
 21 | ### Я не получаю событие чата на сервере, как я могу это решить?
 22 | 
 23 | Сервера Spigot, в частности некоторые плагины, используют разные форматы чата, вам необходимо проанализировать его с помощью регулярного выражения/парсера.
 24 | Посмотрите и измените скрипт [chat_parsing.js](https://github.com/PrismarineJS/mineflayer/blob/master/examples/chat_parsing.js), чтобы он работал для вашего плагина на чат, также прочтите http://prismarinejs.github.io/mineflayer/#/tutorial?id=custom-chat
 25 | 
 26 | ### Как я могу собрать информацию из плагина в чате?
 27 | 
 28 | Большинство майнкрафт серверов поддерживают плагины, и многие из этих плагинов выводят что-то в чат, когда что-то происходит. Если это всего лишь одно сообщение, лучше использовать решение, описанное выше, но когда эти сообщения разбиты на множество небольших сообщений, другим вариантом является использование события `"messagestr"`, поскольку оно позволяет легко анализировать многострочные сообщения.
 29 | 
 30 | **Пример:**
 31 | 
 32 | Сообщение в чате выглядит следующим образом:
 33 | ```
 34 | (!) U9G выйграл в /jackpot и получил
 35 | $26,418,402,450! Он купил 2,350,000 (76.32%) билета(ов) из
 36 | 3,079,185 проданных билета(ов)!
 37 | ```
 38 | ```js
 39 | const regex = {
 40 |   first: /\(!\) (.+) выйграл в \/jackpot и получил +/,
 41 |   second: /\$(.+)! Он купил (.+) \((.+)%\) билета\(ов\) из /,
 42 |   third: /(.+) проданных билета\(ов\)!/
 43 | }
 44 | 
 45 | let jackpot = {}
 46 | bot.on('messagestr', msg => {
 47 |   if (regex.first.test(msg)) {
 48 |     const username = msg.match(regex.first)[1]
 49 |     jackpot.username = username
 50 |   } else if (regex.second.test(msg)) {
 51 |     const [, moneyWon, boughtTickets, winPercent] = msg.match(regex.second)
 52 |     jackpot.moneyWon = parseInt(moneyWon.replace(/,/g, ''))
 53 |     jackpot.boughtTickets = parseInt(boughtTickets.replace(/,/g, ''))
 54 |     jackpot.winPercent = parseFloat(winPercent)
 55 |   } else if (regex.third.test(msg)) {
 56 |     const totalTickets = msg.match(regex.third)[1]
 57 |     jackpot.totalTickets = parseInt(totalTickets.replace(/,/g, ''))
 58 |     onDone(jackpot)
 59 |     jackpot = {}
 60 |   }
 61 | })
 62 | ```
 63 | ### Как я могу отправлять команды?
 64 | 
 65 | Используйте `bot.chat()`.
 66 | 
 67 | Пример:
 68 | 
 69 | ```js
 70 | bot.chat('/give @p diamond')
 71 | ```
 72 | 
 73 | ### Можно ли войти в несколько учетных записей с помощью bot = mineflayer.createbot, контролируя их все по отдельности?
 74 | 
 75 | Создавайте разные экземпляры ботов, вызывая createBot, затем выполняйте разные действия для каждого. [Пример](https://github.com/PrismarineJS/mineflayer/blob/master/examples/multiple.js).
 76 | 
 77 | ### Как заставить бота выбросить все вещи их инвентаря?
 78 | 
 79 | `bot.inventory.items()` возвращает массив предметов в инвентаре бота. Вы можете использовать рекурсивную функцию, чтобы перебрать их и выбросить каждый элемент используя `bot.toss()`. Нажмите [здесь](https://gist.github.com/dada513/3d88f772be4224b40f9e5d1787bd63e9), чтобы посмотреть пример
 80 | 
 81 | ### Как проверить отправленные/полученные пакеты?
 82 | 
 83 | Включите отладку https://github.com/PrismarineJS/mineflayer#debug
 84 | 
 85 | ### Я хочу избежать отключения бота от сервера даже в случае задержки сервера, как мне этого добиться?
 86 | 
 87 | Один из способов - увеличить параметр [checkTimeoutInterval](https://github.com/PrismarineJS/node-minecraft-protocol/blob/master/docs/API.md#mccreateclientoptions) (передаваемый в createBot) к более высокому значению (Например `300*1000`, что составляет 5 минут вместо обычных 30 сек.). Если вы всё ещё сталкиваетесь с данной проблемой, вы можете автоматически переподключиться, используя что-то вроде этого примера https://github.com/PrismarineJS/mineflayer/blob/master/examples/reconnector.js
 88 | 
 89 | ### Как получить описание/текст предмета?
 90 | 
 91 | Вы можете использовать свойство `item.nbt`. Также рекомендуем использовать библиотеку `prismarine-nbt`. Метод `nbt.simplify()` может быть полезен.
 92 | 
 93 | **Пример:**
 94 | ```js
 95 | function getLore (item) {
 96 |   let message = ''
 97 |   if (item.nbt == null) return message
 98 | 
 99 |   const nbt = require('prismarine-nbt')
100 |   const ChatMessage = require('prismarine-chat')(bot.version)
101 | 
102 |   const data = nbt.simplify(item.nbt)
103 |   const display = data.display
104 |   if (display == null) return message
105 | 
106 |   const lore = display.Lore
107 |   if (lore == null) return message
108 |   for (const line of lore) {
109 |     message += new ChatMessage(line).toString()
110 |     message += '\n'
111 |   }
112 | 
113 |   return message
114 | }
115 | ```
116 | 
117 | ### Как я могу отправить сообщение из консоли на сервер?
118 | 
119 | Вы можете использовать библиотеку, такую как `repl`, чтобы прочитать ввод консоли и использовать `bot.chat()` для его отправки. Вы можете найти пример [здесь](https://github.com/PrismarineJS/mineflayer/blob/master/examples/repl.js).
120 | 
121 | ### Как я могу использовать другой плагин в качестве зависимости при создании своего плагина?
122 | 
123 | В функции `inject()` вашего плагина вы можете безопасно вызвать `bot.loadPlugin(anotherPlugin)`, чтобы убедиться, что плагин загружен. Если плагин уже был загружен ранее, ничего не произойдет.
124 | 
125 | Обратите внимание, что порядок в котором загружаются плагины является динамическим, поэтому вы никогда не должны вызывать другой плагин в своей функции `inject()`.
126 | 
127 | ### Как я могу использовать прокси socks5?
128 | 
129 | В объекте с настройками для `mineflayer.createBot(options)` удалите опцию `host`, объявите переменные `PROXY_IP, PROXY_PORT, PROXY_USERNAME, PROXY_PASSWORD, MC_SERVER_ADDRESS, MC_SERVER_PORT`, затем добавьте это в свой объект с настройками:
130 | ```js
131 | connect: (client) => {
132 |     socks.createConnection({
133 |       proxy: {
134 |         host: PROXY_IP,
135 |         port: PROXY_PORT,
136 |         type: 5,
137 |         userId: PROXY_USERNAME,
138 |         password: PROXY_PASSWORD
139 |       },
140 |       command: 'connect',
141 |       destination: {
142 |         host: MC_SERVER_ADDRESS,
143 |         port: MC_SERVER_PORT
144 |       }
145 |     }, (err, info) => {
146 |       if (err) {
147 |         console.log(err)
148 |         return
149 |       }
150 |       client.setSocket(info.socket)
151 |       client.emit('connect')
152 |     })
153 |   }
154 |   ```
155 |   `socks` объявляется с помощью `const socks = require('socks').SocksClient` и использует [эту](https://www.npmjs.com/package/socks) библиотеку.
156 |   Некоторые серверы могут отклонить соединение. Если это произойдет, попробуйте добавить `fakeHost: MC_SERVER_ADDRESS` в настройки.
157 |   
158 | # Частые ошибки
159 | 
160 | ### `UnhandledPromiseRejectionWarning: Error: Failed to read asymmetric key`
161 | 
162 | Эта ошибка означает, что вы ввели неправильную версию сервера, либо mineflayer обнаруживает её неправильно.
163 | 
164 | ### `TypeError: Cannot read property '?' of undefined`
165 | 
166 | Возможно, вы пытаетесь использовать что-то в объекте бота, чего еще нет, попробуйте вызвать инструкцию после события `spawn`
167 | 
168 | ### `SyntaxError: Unexpected token '?'`
169 | 
170 | Обновите node.js
171 | 
172 | ### Бот не может ломать/ставить блоки или открывать сундуки
173 | 
174 | Убедитесь, что защита спавна не мешает боту
175 | 
176 | 


--------------------------------------------------------------------------------
/docs/ru/README_RU.md:
--------------------------------------------------------------------------------
  1 | # Mineflayer
  2 | 
  3 | [![Версия NPM](https://img.shields.io/npm/v/mineflayer.svg?color=success&label=npm%20package&logo=npm)](https://www.npmjs.com/package/mineflayer)
  4 | [![Последние изменения](https://img.shields.io/github/actions/workflow/status/PrismarineJS/mineflayer/ci.yml.svg?label=CI&logo=github&logoColor=lightgrey)](https://github.com/PrismarineJS/mineflayer/actions?query=workflow%3A%22CI%22)
  5 | [![Попробуйте на gitpod](https://img.shields.io/static/v1.svg?label=try&message=on%20gitpod&color=brightgreen&logo=gitpod)](https://gitpod.io/#https://github.com/PrismarineJS/mineflayer)
  6 | [![Открыть в Colab](https://img.shields.io/static/v1.svg?label=open&message=on%20colab&color=blue&logo=google-colab)](https://colab.research.google.com/github/PrismarineJS/mineflayer/blob/master/docs/mineflayer.ipynb)
  7 | [![Спонсоры GitHub](https://img.shields.io/github/sponsors/PrismarineJS)](https://github.com/sponsors/PrismarineJS)
  8 | 
  9 | [![Официальный дискорд](https://img.shields.io/static/v1.svg?label=OFFICIAL&message=DISCORD&color=blue&logo=discord&style=for-the-badge)](https://discord.gg/GsEFRM8)
 10 | 
 11 | | <sub>EN</sub> [English](../README.md) | <sub>RU</sub> [русский](../ru/README_RU.md) | <sub>ES</sub> [Español](../es/README_ES.md) | <sub>FR</sub> [Français](../fr/README_FR.md) | <sub>TR</sub> [Türkçe](../tr/README_TR.md) | <sub>ZH</sub> [中文](../zh/README_ZH_CN.md) | <sub>BR</sub> [Portuguese](../br/README_BR.md) |
 12 | |-------------------------|----------------------------|----------------------------|----------------------------|----------------------------|----------------------------|----------------------------|
 13 | 
 14 | Создавайте ботов Minecraft с помощью мощного, стабильного и высокоуровневого JavaScript [API](api_ru.md), также можете использовать Python.
 15 | 
 16 | Первый раз используете Node.js? Начните с [этого](tutorial_ru.md). Знаете Python? Посмотрите [примеры на Python](https://github.com/PrismarineJS/mineflayer/tree/master/examples/python) и попробуйте [Mineflayer в Google Colab](https://colab.research.google.com/github/PrismarineJS/mineflayer/blob/master/docs/mineflayer.ipynb).
 17 | 
 18 | ## Возможности
 19 | 
 20 |  * Поддержка 1.8, 1.9, 1.10, 1.11, 1.12, 1.13, 1.14, 1.15, 1.16, 1.17, 1.18, 1.19 и 1.20.
 21 |  * Поддержка энтити и их отслеживание.
 22 |  * Вы можете полностью взаимодействовать с миром. Миллисекунды на поиск любого блока.
 23 |  * Физика и управление.
 24 |  * Атака энтити и использование транспортных средств.
 25 |  * Взаимодействие с инвентарем.
 26 |  * Взаимодействие с крафтом, сундуками, раздатчиками и чаровальными столами.
 27 |  * Вы можете копать и строить.
 28 |  * Мелкие функции, такие как отслеживание здоровья и погоды.
 29 |  * Активация блоков и использование предметов.
 30 |  * Взаимодействие с чатом.
 31 | 
 32 | ### Наши цели
 33 | 
 34 | Узнайте про наши текущие [задачи](https://github.com/PrismarineJS/mineflayer/wiki/Big-Prismarine-projects). 
 35 |  
 36 | ## Установка
 37 | 
 38 | Сначала установите Node.js >= 18 из [nodejs.org](https://nodejs.org/), затем выполните:
 39 | 
 40 | `npm install mineflayer`
 41 | 
 42 | Чтобы обновить пакет mineflayer (или любой Node.js) и его зависимости, используйте `npm update --depth 9999`
 43 | 
 44 | ## Документация
 45 | 
 46 | | Ссылка                                                                     | Описание                              |
 47 | | -------------------------------------------------------------------------- | ------------------------------------- |
 48 | | [Обучение](tutorial_ru.md)                                                 | Знакомство с Node.js и Mineflayer     |
 49 | | [ЧАВО](FAQ_RU.md)                                                          | Появился вопрос? Найдите ответ здесь. |
 50 | | **[api_ru.md](api_ru.md)** <br/>[unstable_api.md](unstable_api_ru.md)      | Полное описание API                   |
 51 | | [Обновления](../history.md)                                                | Список изменений в обновлениях        |
 52 | | [Примеры](https://github.com/PrismarineJS/mineflayer/tree/master/examples) | Примеры использования Mineflayer      |
 53 | 
 54 | 
 55 | ## Сделать вклад в развитие Mineflayer
 56 | 
 57 | Прочитайте [CONTRIBUTING_RU.md](CONTRIBUTING_RU.md) и [prismarine-contribute](https://github.com/PrismarineJS/prismarine-contribute)
 58 | 
 59 | ## Использование
 60 | 
 61 | **Видео**
 62 | 
 63 | Обучающее видео, объясняющее базовый процесс настройки бота, можно найти [здесь](https://www.youtube.com/watch?v=ltWosy4Z0Kw)
 64 | 
 65 | Если Вы хотите узнать больше, посмотрите другие видео [здесь](https://www.youtube.com/playlist?list=PLh_alXmxHmzGy3FKbo95AkPp5D8849PEV), а также посмотреть [исходный код ботов](https://github.com/TheDudeFromCI/Mineflayer-Youtube-Tutorials)
 66 | 
 67 | [<img src="https://img.youtube.com/vi/ltWosy4Z0Kw/0.jpg" alt="tutorial 1" width="200">](https://www.youtube.com/watch?v=ltWosy4Z0Kw)
 68 | [<img src="https://img.youtube.com/vi/UWGSf08wQSc/0.jpg" alt="tutorial 2" width="200">](https://www.youtube.com/watch?v=UWGSf08wQSc)
 69 | [<img src="https://img.youtube.com/vi/ssWE0kXDGJE/0.jpg" alt="tutorial 3" width="200">](https://www.youtube.com/watch?v=ssWE0kXDGJE)
 70 | [<img src="https://img.youtube.com/vi/walbRk20KYU/0.jpg" alt="tutorial 4" width="200">](https://www.youtube.com/watch?v=walbRk20KYU)
 71 | 
 72 | **Перед запуском**
 73 | 
 74 | Если версия не указана, она будет выбрана автоматически, исходя из поддерживаемых сервером версии.
 75 | Без указания `auth` будет выбран вход через mojang.
 76 | 
 77 | ### Простой пример
 78 | ```js
 79 | const mineflayer = require('mineflayer')
 80 | 
 81 | const bot = mineflayer.createBot({
 82 |   host: 'localhost', // айпи майнкрафт сервера
 83 |   username: 'email@example.com', // ник бота
 84 |   auth: 'microsoft' // для пираток нужно заменить на 'offline'
 85 |   // port: 25565,                // прописывайте, если порт не 25565
 86 |   // version: false,             // прописывайте, если нужна конкретная версия или снапшот (например: "1.8.9" или "1.16.5"), иначе версия будет выбрана автоматически
 87 |   // password: '12345678'        // прописывайте, если хотите использовать аутентификацию через пароль (может быть ненадёжно)
 88 | })
 89 | 
 90 | bot.on('chat', (username, message) => {
 91 |   if (username === bot.username) return
 92 |   bot.chat(message)
 93 | })
 94 | 
 95 | // Логирование ошибок и причин отключения от сервера:
 96 | bot.on('kicked', console.log)
 97 | bot.on('error', console.log)
 98 | ```
 99 | 
100 | ### Смотрите, что делает бот
101 | 
102 | Спасибо репозиторию [prismarine-viewer](https://github.com/PrismarineJS/prismarine-viewer), с помощью которого можно через браузер увидеть, что делает бот.
103 | Установите его через `npm install prismarine-viewer` и добавьте это в код:
104 | ```js
105 | const { mineflayer: mineflayerViewer } = require('prismarine-viewer')
106 | bot.once('spawn', () => {
107 |   mineflayerViewer(bot, { port: 3007, firstPerson: true }) // port - это порт сервера майнкрафт, если значение firstPerson: false, вы получите вид с высоты птичьего полета
108 | })
109 | ```
110 | После запуска, вы в прямом эфире сможете наблюдать за происходящим:
111 | 
112 | [<img src="https://prismarinejs.github.io/prismarine-viewer/test_1.16.1.png" alt="viewer" width="500">](https://prismarinejs.github.io/prismarine-viewer/)
113 | 
114 | #### Больше примеров
115 | 
116 | | Пример                                                                                                      | Описание                                                                                  |
117 | | ----------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- |
118 | | [viewer](https://github.com/PrismarineJS/mineflayer/tree/master/examples/viewer)                            | Отобразить через браузер вид от лица бота                                                 |
119 | | [pathfinder](https://github.com/PrismarineJS/mineflayer/tree/master/examples/pathfinder)                    | Передвижение бота по координатам и не только                                              |
120 | | [chest](https://github.com/PrismarineJS/mineflayer/blob/master/examples/chest.js)                           | Использование сундуков, печек, раздатчиков и чаровальных столов                           |
121 | | [digger](https://github.com/PrismarineJS/mineflayer/blob/master/examples/digger.js)                         | Пример для создания бота-шахтёра                                                          |
122 | | [discord](https://github.com/PrismarineJS/mineflayer/blob/master/examples/discord.js)                       | Создайте Discord бота                                                                     |
123 | | [jumper](https://github.com/PrismarineJS/mineflayer/blob/master/examples/jumper.js)                         | Научите бота передвигатся, прыгать, использовать средства пережвижения, а также атаковать |
124 | | [ansi](https://github.com/PrismarineJS/mineflayer/blob/master/examples/ansi.js)                             | Отобразите чат вашего бота со всеми цветами, отображаемыми в вашем терминале              |
125 | | [guard](https://github.com/PrismarineJS/mineflayer/blob/master/examples/guard.js)                           | Заставьте бота охранять определенную область от мобов                                     |
126 | | [multiple-from-file](https://github.com/PrismarineJS/mineflayer/blob/master/examples/multiple_from_file.js) | Добавьте текстовый файл с аккаунтами для запуска нескольких ботов                         |
127 | 
128 | Множество других примеров в [данной папке](https://github.com/PrismarineJS/mineflayer/tree/master/examples)
129 | 
130 | ### Модули
131 | 
132 | Большая часть разработки происходит внутри небольших пакетов npm, которые используются mineflayer.
133 | 
134 | Модули, из которых состоит Mineflayer:
135 | 
136 | | Модуль                                                                        | Описание                                                                                |
137 | | ----------------------------------------------------------------------------- |---------------------------------------------------------------------------------------- |
138 | | [minecraft-protocol](https://github.com/PrismarineJS/node-minecraft-protocol) | Парсинг пакетов Minecraft, аутентификация и шифрование                                  |
139 | | [minecraft-data](https://github.com/PrismarineJS/minecraft-data)              | Независимый от языка модуль, предоставляющий данные Minecraft для клиента и сервера     |
140 | | [prismarine-physics](https://github.com/PrismarineJS/prismarine-physics)      | Взаимодействие с физикой                                                                |
141 | | [prismarine-chunk](https://github.com/PrismarineJS/prismarine-chunk)          | Хранение чанков Minecraft                                                               |
142 | | [node-vec3](https://github.com/PrismarineJS/node-vec3)                        | Векторная обработка координат                                                           |
143 | | [prismarine-block](https://github.com/PrismarineJS/prismarine-block)          | Взаимодействие с блоками и их данными                                                   |
144 | | [prismarine-chat](https://github.com/PrismarineJS/prismarine-chat)            | Парсер чата Minecraft (вырезано из Mineflayer)                                          |
145 | | [node-yggdrasil](https://github.com/PrismarineJS/node-yggdrasil)              | Библиотека для взаимодействия с системой аутентификации Mojang, известная как Yggdrasil |
146 | | [prismarine-world](https://github.com/PrismarineJS/prismarine-world)          | Реализация миров для prismarine                                                         |
147 | | [prismarine-windows](https://github.com/PrismarineJS/prismarine-windows)      | Взаимодействие с GUI                                                                    |
148 | | [prismarine-item](https://github.com/PrismarineJS/prismarine-item)            | Взаимодействие с предметами и их данными                                                |
149 | | [prismarine-nbt](https://github.com/PrismarineJS/prismarine-nbt)              | Парсер NBT для node-minecraft-protocol                                                  |
150 | | [prismarine-recipe](https://github.com/PrismarineJS/prismarine-recipe)        | Взаимодействие с рецептами крафта                                                       |
151 | | [prismarine-biome](https://github.com/PrismarineJS/prismarine-biome)          | Взаимодействие с биомами                                                                |
152 | | [prismarine-entity](https://github.com/PrismarineJS/prismarine-entity)        | Взаимодействие с сущностями                                                             |
153 | 
154 | 
155 | ### Дебаг
156 | 
157 | Вы можете отлавливать ошибки с помощью переменной окружения `DEBUG`:
158 | 
159 | ```bash
160 | DEBUG="minecraft-protocol" node [...]
161 | ```
162 | 
163 | В Windows:
164 | ```
165 | set DEBUG=minecraft-protocol
166 | node your_script.js
167 | ```
168 | 
169 | ## Cторонние плагины:
170 | 
171 | Mineflayer поддерживает сторонние плагины. Любой желающий может создать плагин, который добавляет API ещё более высокого уровня поверх Mineflayer.
172 | 
173 | Наиболее обновлённые и полезные:
174 | 
175 |  * [pathfinder](https://github.com/Karang/mineflayer-pathfinder) - Продвинутый A* поиск пути с множеством настраиваемых функций
176 |  * [prismarine-viewer](https://github.com/PrismarineJS/prismarine-viewer) - Простой web клиент для просмотра чанков
177 |  * [web-inventory](https://github.com/ImHarvol/mineflayer-web-inventory) - Веб клиент для взаимодействия с инвентарём
178 |  * [statemachine](https://github.com/PrismarineJS/mineflayer-statemachine) - API для более сложного поведения бота
179 |  * [Armor Manager](https://github.com/G07cha/MineflayerArmorManager) - Автоматическое взаимодействие с бронёй
180 |  * [Dashboard](https://github.com/wvffle/mineflayer-dashboard) - Панель управления для бота
181 |  * [PVP](https://github.com/PrismarineJS/mineflayer-pvp) - Простой API для базовых PVP и PVE сражений
182 |  * [Auto Eat](https://github.com/link-discord/mineflayer-auto-eat) - Автоматическое поедание пищи
183 |  * [Auto Crystal](https://github.com/link-discord/mineflayer-autocrystal) - Автоматическое размещение и взрыв кристалов края
184 |  * [Tool](https://github.com/TheDudeFromCI/mineflayer-tool) - Утилита для автоматического выбора инструмента/оружия с высокоуровневым API
185 |  * [Hawkeye](https://github.com/sefirosweb/minecraftHawkEye) - Утилита для использования автоматического прицеливания из луков
186 |  * [GUI](https://github.com/firejoust/mineflayer-GUI) - Взаимодействие с окнами по типу инвентаря, используя async/await
187 |  * [Projectile](https://github.com/firejoust/mineflayer-projectile) - Получение необходимого угола запуска снарядов
188 |  * [Movement](https://github.com/firejoust/mineflayer-movement) - Плавные и реалистичные движения игрока, лучше всего подходящие для PvP
189 |  * [Collect Block](https://github.com/PrismarineJS/mineflayer-collectblock) - API для простого способа для подбора блоков
190 | 
191 | 
192 | Вы также можете изучить:
193 | 
194 |  * [radar](https://github.com/andrewrk/mineflayer-radar/) - Веб радар, созданный с помощью
195 |  * [auto-auth](https://github.com/G07cha/MineflayerAutoAuth) - Аутентификация на пиратских серверах
196 |  * [Bloodhound](https://github.com/Nixes/mineflayer-bloodhound) - Отслеживание получаемого урона в пределах видимости
197 |  * [tps](https://github.com/SiebeDW/mineflayer-tps) - Получение TPS сервера
198 |  * [panorama](https://github.com/IceTank/mineflayer-panorama) - Создание панорамных снимков вашего мира
199 |  * [player-death-event](https://github.com/tuanzisama/mineflayer-death-event) - Создание события смерти игрока в Mineflayer.
200 | 
201 | ## Проекты, созданные с помощью Mineflayer
202 | 
203 |  * [Voyager](https://github.com/MineDojo/Voyager) - Открытый агент с большими языковыми моделями
204 |  * [rom1504/rbot](https://github.com/rom1504/rbot)
205 |    - [YouTube - постройка спиральной лестницы](https://www.youtube.com/watch?v=UM1ZV5200S0)
206 |    - [YouTube - дублирование постройки](https://www.youtube.com/watch?v=0cQxg9uDnzA)
207 |  * [Darthfett/Helperbot](https://github.com/Darthfett/Helperbot)
208 |  * [vogonistic/voxel](https://github.com/vogonistic/mineflayer-voxel) - Визуализация от первого лица бота, созданная с помощью voxel.js
209 |  * [JonnyD/Skynet](https://github.com/JonnyD/Skynet) - Логирование активности игрока в онлайн-API
210 |  * [MinecraftChat](https://github.com/rom1504/MinecraftChat) (последняя версия с открытым исходным кодом, созданная AlexKvazos) - Веб чат майнкрафт сервера
211 |  * [Cheese Bot](https://github.com/Minecheesecraft/Cheese-Bot) - Плагин с чистым GUI. Создан с помощью Node-Webkit. http://bot.ezcha.net/
212 |  * [Chaoscraft](https://github.com/schematical/chaoscraft) - Бот Minecraft, использующий генетические алгоритмы, посмотрите [эти видео](https://www.youtube.com/playlist?list=PLLkpLgU9B5xJ7Qy4kOyBJl5J6zsDIMceH)
213 |  * [hexatester/minetelegram](https://github.com/hexatester/minetelegram) - Мост между Minecraft и Telegram, созданный при помощи Mineflayer & Telegraf
214 |   * [PrismarineJS/mineflayer-builder](https://github.com/PrismarineJS/mineflayer-builder) - Строит схемы в режиме выживания, сохраняя направление
215 |   * [и многие другие](https://github.com/PrismarineJS/mineflayer/network/dependents) - Все проекты, обнаруженные GitHub, в которых используется Mineflayer
216 | 
217 | 
218 | ## Тестирование
219 | 
220 | ### Тестирование всего
221 | 
222 | Просто запустите:
223 | 
224 | ```bash
225 | npm test
226 | ```
227 | 
228 | ### Тестирование определённой версии
229 | Запустите
230 | 
231 | ```bash
232 | npm run mocha_test -- -g <version>
233 | ```
234 | 
235 | где `<version>` означает версию, таких как `1.12`, `1.15.2`...
236 | 
237 | ### Тестирование определённой функции
238 | 
239 | Запустите
240 | 
241 | ```bash
242 | npm run mocha_test -- -g <test_name>
243 | ```
244 | 
245 | где `<test_name>` означает название проверки, таких как `bed`, `useChests`, `rayTrace`...
246 | 
247 | ### Пример
248 | 
249 | ```bash
250 | npm run mocha_test -- -g "1.18.1.*BlockFinder"
251 | ```
252 | 
253 | запустит тест BlockFinder на версии 1.18.1
254 | 
255 | ## Лицензия
256 | 
257 | [MIT](../../LICENSE)
258 | 


--------------------------------------------------------------------------------
/docs/ru/_sidebar.md:
--------------------------------------------------------------------------------
 1 | - Первые шаги
 2 |   - [Вступление](ru/README_RU.md)
 3 |   - [API](ru/api_ru.md)
 4 |   - [ЧаВо](ru/FAQ_RU.md)
 5 |   - [Примеры](ru/demos_ru.md)
 6 |   - [Туториал](ru/tutorial_ru.md)
 7 |   - [Нестабильное API](ru/unstable_api_ru.md)
 8 |   - [Помочь](ru/CONTRIBUTING_RU.md)
 9 |   - [История](history.md)
10 | 


--------------------------------------------------------------------------------
/docs/ru/api_ru.md:
--------------------------------------------------------------------------------
   1 | <!-- START doctoc generated TOC please keep comment here to allow auto update -->
   2 | <!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
   3 | **Содержание**  *сгенерировано с помощью [DocToc](https://github.com/thlorenz/doctoc)*
   4 | 
   5 | - [API](#api)
   6 |   - [Enums](#enums)
   7 |     - [minecraft-data](#minecraft-data)
   8 |     - [mcdata.blocks](#mcdatablocks)
   9 |     - [mcdata.items](#mcdataitems)
  10 |     - [mcdata.materials](#mcdatamaterials)
  11 |     - [mcdata.recipes](#mcdatarecipes)
  12 |     - [mcdata.instruments](#mcdatainstruments)
  13 |     - [mcdata.biomes](#mcdatabiomes)
  14 |     - [mcdata.entities](#mcdataentities)
  15 |   - [Classes](#classes)
  16 |     - [vec3](#vec3)
  17 |     - [mineflayer.Location](#mineflayerlocation)
  18 |     - [Entity](#entity)
  19 |       - [Player Skin Data](#player-skin-data)
  20 |     - [Block](#block)
  21 |     - [Biome](#biome)
  22 |     - [Item](#item)
  23 |     - [windows.Window (base class)](#windowswindow-base-class)
  24 |       - [window.deposit(itemType, metadata, count, nbt)](#windowdeposititemtype-metadata-count-nbt)
  25 |       - [window.withdraw(itemType, metadata, count, nbt)](#windowwithdrawitemtype-metadata-count-nbt)
  26 |       - [window.close()](#windowclose)
  27 |     - [Recipe](#recipe)
  28 |     - [mineflayer.Container](#mineflayercontainer)
  29 |     - [mineflayer.Furnace](#mineflayerfurnace)
  30 |       - [furnace "update"](#furnace-update)
  31 |       - [furnace.takeInput()](#furnacetakeinput)
  32 |       - [furnace.takeFuel()](#furnacetakefuel)
  33 |       - [furnace.takeOutput()](#furnacetakeoutput)
  34 |       - [furnace.putInput(itemType, metadata, count)](#furnaceputinputitemtype-metadata-count)
  35 |       - [furnace.putFuel(itemType, metadata, count)](#furnaceputfuelitemtype-metadata-count)
  36 |       - [furnace.inputItem()](#furnaceinputitem)
  37 |       - [furnace.fuelItem()](#furnacefuelitem)
  38 |       - [furnace.outputItem()](#furnaceoutputitem)
  39 |       - [furnace.fuel](#furnacefuel)
  40 |       - [furnace.progress](#furnaceprogress)
  41 |     - [mineflayer.EnchantmentTable](#mineflayerenchantmenttable)
  42 |       - [enchantmentTable "ready"](#enchantmenttable-ready)
  43 |       - [enchantmentTable.targetItem()](#enchantmenttabletargetitem)
  44 |       - [enchantmentTable.xpseed](#enchantmenttablexpseed)
  45 |       - [enchantmentTable.enchantments](#enchantmenttableenchantments)
  46 |       - [enchantmentTable.enchant(choice)](#enchantmenttableenchantchoice)
  47 |       - [enchantmentTable.takeTargetItem()](#enchantmenttabletaketargetitem)
  48 |       - [enchantmentTable.putTargetItem(item)](#enchantmenttableputtargetitemitem)
  49 |       - [enchantmentTable.putLapis(item)](#enchantmenttableputlapisitem)
  50 |     - [mineflayer.anvil](#mineflayeranvil)
  51 |       - [anvil.combine(itemOne, itemTwo[, name])](#anvilcombineitemone-itemtwo-name)
  52 |       - [anvil.combine(item[, name])](#anvilcombineitem-name)
  53 |       - [villager "ready"](#villager-ready)
  54 |       - [villager.trades](#villagertrades)
  55 |       - [villager.trade(tradeIndex, [times])](#villagertradetradeindex-times)
  56 |     - [mineflayer.ScoreBoard](#mineflayerscoreboard)
  57 |       - [ScoreBoard.name](#scoreboardname)
  58 |       - [ScoreBoard.title](#scoreboardtitle)
  59 |       - [ScoreBoard.itemsMap](#scoreboarditemsmap)
  60 |       - [ScoreBoard.items](#scoreboarditems)
  61 |     - [mineflayer.Team](#mineflayerteam)
  62 |       - [Team.name](#teamname)
  63 |       - [Team.friendlyFire](#teamfriendlyfire)
  64 |       - [Team.nameTagVisibility](#teamnametagvisibility)
  65 |       - [Team.collisionRule](#teamcollisionrule)
  66 |       - [Team.color](#teamcolor)
  67 |       - [Team.prefix](#teamprefix)
  68 |       - [Team.suffix](#teamsuffix)
  69 |       - [Team.members](#teammembers)
  70 |     - [mineflayer.BossBar](#mineflayerbossbar)
  71 |       - [BossBar.title](#bossbartitle)
  72 |       - [BossBar.health](#bossbarhealth)
  73 |       - [BossBar.dividers](#bossbardividers)
  74 |       - [BossBar.entityUUID](#bossbarentityuuid)
  75 |       - [BossBar.shouldDarkenSky](#bossbarshoulddarkensky)
  76 |       - [BossBar.isDragonBar](#bossbarisdragonbar)
  77 |       - [BossBar.createFog](#bossbarcreatefog)
  78 |       - [BossBar.color](#bossbarcolor)
  79 |     - [mineflayer.Particle](#mineflayerparticle)
  80 |       - [Particle.id](#particleid)
  81 |       - [Particle.name](#particlename)
  82 |       - [Particle.position](#particleposition)
  83 |       - [Particle.offset](#particleoffset)
  84 |       - [Particle.longDistanceRender](#particlelongdistancerender)
  85 |       - [Particle.count](#particlecount)
  86 |       - [Particle.movementSpeed](#particlemovementspeed)
  87 |   - [Bot](#bot)
  88 |     - [mineflayer.createBot(options)](#mineflayercreatebotoptions)
  89 |     - [Properties](#properties)
  90 |       - [bot.registry](#botregistry)
  91 |       - [bot.world](#botworld)
  92 |         - [world "blockUpdate" (oldBlock, newBlock)](#world-blockupdate-oldblock-newblock)
  93 |         - [world "blockUpdate:(x, y, z)" (oldBlock, newBlock)](#world-blockupdatex-y-z-oldblock-newblock)
  94 |       - [bot.entity](#botentity)
  95 |       - [bot.entities](#botentities)
  96 |       - [bot.username](#botusername)
  97 |       - [bot.spawnPoint](#botspawnpoint)
  98 |       - [bot.heldItem](#bothelditem)
  99 |       - [bot.usingHeldItem](#botusinghelditem)
 100 |       - [bot.game.levelType](#botgameleveltype)
 101 |       - [bot.game.dimension](#botgamedimension)
 102 |       - [bot.game.difficulty](#botgamedifficulty)
 103 |       - [bot.game.gameMode](#botgamegamemode)
 104 |       - [bot.game.hardcore](#botgamehardcore)
 105 |       - [bot.game.maxPlayers](#botgamemaxplayers)
 106 |       - [bot.game.serverBrand](#botgameserverbrand)
 107 |       - [bot.game.minY](#botgameminy)
 108 |       - [bot.game.height](#botgameheight)
 109 |       - [bot.physicsEnabled](#botphysicsenabled)
 110 |       - [bot.player](#botplayer)
 111 |       - [bot.players](#botplayers)
 112 |       - [bot.tablist](#bottablist)
 113 |       - [bot.isRaining](#botisraining)
 114 |       - [bot.rainState](#botrainstate)
 115 |       - [bot.thunderState](#botthunderstate)
 116 |       - [bot.chatPatterns](#botchatpatterns)
 117 |       - [bot.settings.chat](#botsettingschat)
 118 |       - [bot.settings.colorsEnabled](#botsettingscolorsenabled)
 119 |       - [bot.settings.viewDistance](#botsettingsviewdistance)
 120 |       - [bot.settings.difficulty](#botsettingsdifficulty)
 121 |       - [bot.settings.skinParts](#botsettingsskinparts)
 122 |         - [bot.settings.skinParts.showCape - boolean](#botsettingsskinpartsshowcape---boolean)
 123 |         - [bot.settings.skinParts.showJacket - boolean](#botsettingsskinpartsshowjacket---boolean)
 124 |         - [bot.settings.skinParts.showLeftSleeve - boolean](#botsettingsskinpartsshowleftsleeve---boolean)
 125 |         - [bot.settings.skinParts.showRightSleeve - boolean](#botsettingsskinpartsshowrightsleeve---boolean)
 126 |         - [bot.settings.skinParts.showLeftPants - boolean](#botsettingsskinpartsshowleftpants---boolean)
 127 |         - [bot.settings.skinParts.showRightPants - boolean](#botsettingsskinpartsshowrightpants---boolean)
 128 |         - [bot.settings.skinParts.showHat - boolean](#botsettingsskinpartsshowhat---boolean)
 129 |       - [bot.settings.enableTextFiltering - boolean](#botsettingsenabletextfiltering---boolean)
 130 |       - [bot.settings.enableServerListing - boolean](#botsettingsenableserverlisting---boolean)
 131 |       - [bot.experience.level](#botexperiencelevel)
 132 |       - [bot.experience.points](#botexperiencepoints)
 133 |       - [bot.experience.progress](#botexperienceprogress)
 134 |       - [bot.health](#bothealth)
 135 |       - [bot.food](#botfood)
 136 |       - [bot.foodSaturation](#botfoodsaturation)
 137 |       - [bot.oxygenLevel](#botoxygenlevel)
 138 |       - [bot.physics](#botphysics)
 139 |       - [bot.fireworkRocketDuration](#botfireworkrocketduration)
 140 |       - [bot.simpleClick.leftMouse (slot)](#botsimpleclickleftmouse-slot)
 141 |       - [bot.simpleClick.rightMouse (slot)](#botsimpleclickrightmouse-slot)
 142 |       - [bot.time.doDaylightCycle](#bottimedodaylightcycle)
 143 |       - [bot.time.bigTime](#bottimebigtime)
 144 |       - [bot.time.time](#bottimetime)
 145 |       - [bot.time.timeOfDay](#bottimetimeofday)
 146 |       - [bot.time.day](#bottimeday)
 147 |       - [bot.time.isDay](#bottimeisday)
 148 |       - [bot.time.moonPhase](#bottimemoonphase)
 149 |       - [bot.time.bigAge](#bottimebigage)
 150 |       - [bot.time.age](#bottimeage)
 151 |       - [bot.quickBarSlot](#botquickbarslot)
 152 |       - [bot.inventory](#botinventory)
 153 |       - [bot.targetDigBlock](#bottargetdigblock)
 154 |       - [bot.isSleeping](#botissleeping)
 155 |       - [bot.scoreboards](#botscoreboards)
 156 |       - [bot.scoreboard](#botscoreboard)
 157 |       - [bot.teams](#botteams)
 158 |       - [bot.teamMap](#botteammap)
 159 |       - [bot.controlState](#botcontrolstate)
 160 |     - [Events](#events)
 161 |       - ["chat" (username, message, translate, jsonMsg, matches)](#chat-username-message-translate-jsonmsg-matches)
 162 |       - ["whisper" (username, message, translate, jsonMsg, matches)](#whisper-username-message-translate-jsonmsg-matches)
 163 |       - ["actionBar" (jsonMsg, verified)](#actionbar-jsonmsg-verified)
 164 |       - ["message" (jsonMsg, position, sender, verified)](#message-jsonmsg-position-sender-verified)
 165 |       - ["messagestr" (message, messagePosition, jsonMsg, sender, verified)](#messagestr-message-messageposition-jsonmsg-sender-verified)
 166 |       - ["inject_allowed"](#inject_allowed)
 167 |       - ["login"](#login)
 168 |       - ["spawn"](#spawn)
 169 |       - ["respawn"](#respawn)
 170 |       - ["game"](#game)
 171 |       - ["resourcePack" (url, hash)](#resourcepack-url-hash)
 172 |       - ["title" (title, type)](#title-title-type)
 173 |       - ["rain"](#rain)
 174 |       - ["weatherUpdate"](#weatherupdate)
 175 |       - ["time"](#time)
 176 |       - ["kicked" (reason, loggedIn)](#kicked-reason-loggedin)
 177 |       - ["end" (reason)](#end-reason)
 178 |       - ["error" (err)](#error-err)
 179 |       - ["spawnReset"](#spawnreset)
 180 |       - ["death"](#death)
 181 |       - ["health"](#health)
 182 |       - ["breath"](#breath)
 183 |       - ["entityAttributes" (entity)](#entityattributes-entity)
 184 |       - ["entitySwingArm" (entity)](#entityswingarm-entity)
 185 |       - ["entityHurt" (entity)](#entityhurt-entity)
 186 |       - ["entityDead" (entity)](#entitydead-entity)
 187 |       - ["entityTaming" (entity)](#entitytaming-entity)
 188 |       - ["entityTamed" (entity)](#entitytamed-entity)
 189 |       - ["entityShakingOffWater" (entity)](#entityshakingoffwater-entity)
 190 |       - ["entityEatingGrass" (entity)](#entityeatinggrass-entity)
 191 |       - ["entityHandSwap" (entity)](#entityhandswap-entity)
 192 |       - ["entityWake" (entity)](#entitywake-entity)
 193 |       - ["entityEat" (entity)](#entityeat-entity)
 194 |       - ["entityCriticalEffect" (entity)](#entitycriticaleffect-entity)
 195 |       - ["entityMagicCriticalEffect" (entity)](#entitymagiccriticaleffect-entity)
 196 |       - ["entityCrouch" (entity)](#entitycrouch-entity)
 197 |       - ["entityUncrouch" (entity)](#entityuncrouch-entity)
 198 |       - ["entityEquip" (entity)](#entityequip-entity)
 199 |       - ["entitySleep" (entity)](#entitysleep-entity)
 200 |       - ["entitySpawn" (entity)](#entityspawn-entity)
 201 |       - ["entityElytraFlew" (entity)](#entityelytraflew-entity)
 202 |       - ["itemDrop" (entity)](#itemdrop-entity)
 203 |       - ["playerCollect" (collector, collected)](#playercollect-collector-collected)
 204 |       - ["entityGone" (entity)](#entitygone-entity)
 205 |       - ["entityMoved" (entity)](#entitymoved-entity)
 206 |       - ["entityDetach" (entity, vehicle)](#entitydetach-entity-vehicle)
 207 |       - ["entityAttach" (entity, vehicle)](#entityattach-entity-vehicle)
 208 |       - ["entityUpdate" (entity)](#entityupdate-entity)
 209 |       - ["entityEffect" (entity, effect)](#entityeffect-entity-effect)
 210 |       - ["entityEffectEnd" (entity, effect)](#entityeffectend-entity-effect)
 211 |       - ["playerJoined" (player)](#playerjoined-player)
 212 |       - ["playerUpdated" (player)](#playerupdated-player)
 213 |       - ["playerLeft" (player)](#playerleft-player)
 214 |       - ["blockUpdate" (oldBlock, newBlock)](#blockupdate-oldblock-newblock)
 215 |       - ["blockUpdate:(x, y, z)" (oldBlock, newBlock)](#blockupdatex-y-z-oldblock-newblock)
 216 |       - ["blockPlaced" (oldBlock, newBlock)](#blockplaced-oldblock-newblock)
 217 |       - ["chunkColumnLoad" (point)](#chunkcolumnload-point)
 218 |       - ["chunkColumnUnload" (point)](#chunkcolumnunload-point)
 219 |       - ["soundEffectHeard" (soundName, position, volume, pitch)](#soundeffectheard-soundname-position-volume-pitch)
 220 |       - ["hardcodedSoundEffectHeard" (soundId, soundCategory, position, volume, pitch)](#hardcodedsoundeffectheard-soundid-soundcategory-position-volume-pitch)
 221 |       - ["noteHeard" (block, instrument, pitch)](#noteheard-block-instrument-pitch)
 222 |       - ["pistonMove" (block, isPulling, direction)](#pistonmove-block-ispulling-direction)
 223 |       - ["chestLidMove" (block, isOpen, block2)](#chestlidmove-block-isopen-block2)
 224 |       - ["blockBreakProgressObserved" (block, destroyStage, entity)](#blockbreakprogressobserved-block-destroystage-entity)
 225 |       - ["blockBreakProgressEnd" (block, entity)](#blockbreakprogressend-block-entity)
 226 |       - ["diggingCompleted" (block)](#diggingcompleted-block)
 227 |       - ["diggingAborted" (block)](#diggingaborted-block)
 228 |       - ["usedFirework"](#usedfirework)
 229 |       - ["move"](#move)
 230 |       - ["forcedMove"](#forcedmove)
 231 |       - ["mount"](#mount)
 232 |       - ["dismount" (vehicle)](#dismount-vehicle)
 233 |       - ["windowOpen" (window)](#windowopen-window)
 234 |       - ["windowClose" (window)](#windowclose-window)
 235 |       - ["sleep"](#sleep)
 236 |       - ["wake"](#wake)
 237 |       - ["experience"](#experience)
 238 |       - ["scoreboardCreated" (scoreboard)](#scoreboardcreated-scoreboard)
 239 |       - ["scoreboardDeleted" (scoreboard)](#scoreboarddeleted-scoreboard)
 240 |       - ["scoreboardTitleChanged" (scoreboard)](#scoreboardtitlechanged-scoreboard)
 241 |       - ["scoreUpdated" (scoreboard, item)](#scoreupdated-scoreboard-item)
 242 |       - ["scoreRemoved" (scoreboard, item)](#scoreremoved-scoreboard-item)
 243 |       - ["scoreboardPosition" (position, scoreboard)](#scoreboardposition-position-scoreboard)
 244 |       - ["teamCreated" (team)](#teamcreated-team)
 245 |       - ["teamRemoved" (team)](#teamremoved-team)
 246 |       - ["teamUpdated" (team)](#teamupdated-team)
 247 |       - ["teamMemberAdded" (team)](#teammemberadded-team)
 248 |       - ["teamMemberRemoved" (team)](#teammemberremoved-team)
 249 |       - ["bossBarCreated" (bossBar)](#bossbarcreated-bossbar)
 250 |       - ["bossBarDeleted" (bossBar)](#bossbardeleted-bossbar)
 251 |       - ["bossBarUpdated" (bossBar)](#bossbarupdated-bossbar)
 252 |       - ["heldItemChanged" (heldItem)](#helditemchanged-helditem)
 253 |       - ["physicsTick" ()](#physicstick-)
 254 |       - ["chat:name" (matches)](#chatname-matches)
 255 |       - ["particle"](#particle)
 256 |     - [Functions](#functions)
 257 |       - [bot.blockAt(point, extraInfos=true)](#botblockatpoint-extrainfostrue)
 258 |       - [bot.waitForChunksToLoad()](#botwaitforchunkstoload)
 259 |       - [bot.blockInSight(maxSteps, vectorLength)](#botblockinsightmaxsteps-vectorlength)
 260 |       - [bot.blockAtCursor(maxDistance=256)](#botblockatcursormaxdistance256)
 261 |       - [bot.entityAtCursor(maxDistance=3.5)](#botentityatcursormaxdistance35)
 262 |       - [bot.blockAtEntityCursor(entity=bot.entity, maxDistance=256)](#botblockatentitycursorentitybotentity-maxdistance256)
 263 |       - [bot.canSeeBlock(block)](#botcanseeblockblock)
 264 |       - [bot.findBlocks(options)](#botfindblocksoptions)
 265 |       - [bot.findBlock(options)](#botfindblockoptions)
 266 |       - [bot.canDigBlock(block)](#botcandigblockblock)
 267 |       - [bot.recipesFor(itemType, metadata, minResultCount, craftingTable)](#botrecipesforitemtype-metadata-minresultcount-craftingtable)
 268 |       - [bot.recipesAll(itemType, metadata, craftingTable)](#botrecipesallitemtype-metadata-craftingtable)
 269 |       - [bot.nearestEntity(match = (entity) => { return true })](#botnearestentitymatch--entity---return-true-)
 270 |     - [Methods](#methods)
 271 |       - [bot.end(reason)](#botendreason)
 272 |       - [bot.quit(reason)](#botquitreason)
 273 |       - [bot.tabComplete(str, [assumeCommand], [sendBlockInSight])](#bottabcompletestr-assumecommand-sendblockinsight)
 274 |       - [bot.chat(message)](#botchatmessage)
 275 |       - [bot.whisper(username, message)](#botwhisperusername-message)
 276 |       - [bot.chatAddPattern(pattern, chatType, description)](#botchataddpatternpattern-chattype-description)
 277 |       - [bot.addChatPattern(name, pattern, chatPatternOptions)](#botaddchatpatternname-pattern-chatpatternoptions)
 278 |       - [bot.addChatPatternSet(name, patterns, chatPatternOptions)](#botaddchatpatternsetname-patterns-chatpatternoptions)
 279 |       - [bot.removeChatPattern(name)](#botremovechatpatternname)
 280 |       - [bot.awaitMessage(...args)](#botawaitmessageargs)
 281 |       - [bot.setSettings(options)](#botsetsettingsoptions)
 282 |       - [bot.loadPlugin(plugin)](#botloadpluginplugin)
 283 |       - [bot.loadPlugins(plugins)](#botloadpluginsplugins)
 284 |       - [bot.hasPlugin(plugin)](#bothaspluginplugin)
 285 |       - [bot.sleep(bedBlock)](#botsleepbedblock)
 286 |       - [bot.isABed(bedBlock)](#botisabedbedblock)
 287 |       - [bot.wake()](#botwake)
 288 |       - [bot.setControlState(control, state)](#botsetcontrolstatecontrol-state)
 289 |       - [bot.getControlState(control)](#botgetcontrolstatecontrol)
 290 |       - [bot.clearControlStates()](#botclearcontrolstates)
 291 |       - [bot.getExplosionDamages(entity, position, radius, [rawDamages])](#botgetexplosiondamagesentity-position-radius-rawdamages)
 292 |       - [bot.lookAt(point, [force])](#botlookatpoint-force)
 293 |       - [bot.look(yaw, pitch, [force])](#botlookyaw-pitch-force)
 294 |       - [bot.updateSign(block, text, back = false)](#botupdatesignblock-text)
 295 |       - [bot.equip(item, destination)](#botequipitem-destination)
 296 |       - [bot.unequip(destination)](#botunequipdestination)
 297 |       - [bot.tossStack(item)](#bottossstackitem)
 298 |       - [bot.toss(itemType, metadata, count)](#bottossitemtype-metadata-count)
 299 |       - [bot.elytraFly()](#botelytrafly)
 300 |       - [bot.dig(block, [forceLook = true], [digFace])](#botdigblock-forcelook--true-digface)
 301 |       - [bot.stopDigging()](#botstopdigging)
 302 |       - [bot.digTime(block)](#botdigtimeblock)
 303 |       - [bot.acceptResourcePack()](#botacceptresourcepack)
 304 |       - [bot.denyResourcePack()](#botdenyresourcepack)
 305 |       - [bot.placeBlock(referenceBlock, faceVector)](#botplaceblockreferenceblock-facevector)
 306 |       - [bot.placeEntity(referenceBlock, faceVector)](#botplaceentityreferenceblock-facevector)
 307 |       - [bot.activateBlock(block, direction?: Vec3, cursorPos?: Vec3)](#botactivateblockblock-direction-vec3-cursorpos-vec3)
 308 |       - [bot.activateEntity(entity)](#botactivateentityentity)
 309 |       - [bot.activateEntityAt(entity, position)](#botactivateentityatentity-position)
 310 |       - [bot.consume()](#botconsume)
 311 |       - [bot.fish()](#botfish)
 312 |       - [bot.activateItem(offHand=false)](#botactivateitemoffhandfalse)
 313 |       - [bot.deactivateItem()](#botdeactivateitem)
 314 |       - [bot.useOn(targetEntity)](#botuseontargetentity)
 315 |       - [bot.attack(entity, swing = true)](#botattackentity-swing--true)
 316 |       - [bot.swingArm([hand], showHand)](#botswingarmhand-showhand)
 317 |       - [bot.mount(entity)](#botmountentity)
 318 |       - [bot.dismount()](#botdismount)
 319 |       - [bot.moveVehicle(left,forward)](#botmovevehicleleftforward)
 320 |       - [bot.setQuickBarSlot(slot)](#botsetquickbarslotslot)
 321 |       - [bot.craft(recipe, count, craftingTable)](#botcraftrecipe-count-craftingtable)
 322 |       - [bot.writeBook(slot, pages)](#botwritebookslot-pages)
 323 |       - [bot.openContainer(containerBlock or containerEntity, direction?, cursorPos?)](#botopencontainercontainerblock-or-containerentity-direction-cursorpos)
 324 |       - [bot.openChest(chestBlock or minecartchestEntity, direction?, cursorPos?)](#botopenchestchestblock-or-minecartchestentity-direction-cursorpos)
 325 |       - [bot.openFurnace(furnaceBlock)](#botopenfurnacefurnaceblock)
 326 |       - [bot.openDispenser(dispenserBlock)](#botopendispenserdispenserblock)
 327 |       - [bot.openEnchantmentTable(enchantmentTableBlock)](#botopenenchantmenttableenchantmenttableblock)
 328 |       - [bot.openAnvil(anvilBlock)](#botopenanvilanvilblock)
 329 |       - [bot.openVillager(villagerEntity)](#botopenvillagervillagerentity)
 330 |       - [bot.trade(villagerInstance, tradeIndex, [times])](#bottradevillagerinstance-tradeindex-times)
 331 |       - [bot.setCommandBlock(pos, command, [options])](#botsetcommandblockpos-command-options)
 332 |       - [bot.supportFeature(name)](#botsupportfeaturename)
 333 |       - [bot.waitForTicks(ticks)](#botwaitforticksticks)
 334 |     - [Lower level inventory methods](#lower-level-inventory-methods)
 335 |       - [bot.clickWindow(slot, mouseButton, mode)](#botclickwindowslot-mousebutton-mode)
 336 |       - [bot.putSelectedItemRange(start, end, window, slot)](#botputselecteditemrangestart-end-window-slot)
 337 |       - [bot.putAway(slot)](#botputawayslot)
 338 |       - [bot.closeWindow(window)](#botclosewindowwindow)
 339 |       - [bot.transfer(options)](#bottransferoptions)
 340 |       - [bot.openBlock(block, direction?: Vec3, cursorPos?: Vec3)](#botopenblockblock-direction-vec3-cursorpos-vec3)
 341 |       - [bot.openEntity(entity)](#botopenentityentity)
 342 |       - [bot.moveSlotItem(sourceSlot, destSlot)](#botmoveslotitemsourceslot-destslot)
 343 |       - [bot.updateHeldItem()](#botupdatehelditem)
 344 |       - [bot.getEquipmentDestSlot(destination)](#botgetequipmentdestslotdestination)
 345 |     - [bot.creative](#botcreative)
 346 |       - [bot.creative.setInventorySlot(slot, item)](#botcreativesetinventoryslotslot-item)
 347 |       - [bot.creative.clearSlot(slot)](#botcreativeclearslotslot)
 348 |       - [bot.creative.clearInventory()](#botcreativeclearinventory)
 349 |       - [bot.creative.flyTo(destination)](#botcreativeflytodestination)
 350 |       - [bot.creative.startFlying()](#botcreativestartflying)
 351 |       - [bot.creative.stopFlying()](#botcreativestopflying)
 352 | 
 353 | <!-- END doctoc generated TOC please keep comment here to allow auto update -->
 354 | 
 355 | # API
 356 | 
 357 | ## Enums
 358 | 
 359 | Эти данные хранятся независимо от проекта [minecraft-data](https://github.com/PrismarineJS/minecraft-data),
 360 |  и доступны через [node-minecraft-data](https://github.com/PrismarineJS/node-minecraft-data).
 361 | 
 362 | ### minecraft-data
 363 | 
 364 | Данные доступны в модуле [node-minecraft-data](https://github.com/PrismarineJS/node-minecraft-data).
 365 | 
 366 | Используйте `require('minecraft-data')(bot.version)`.
 367 | 
 368 | ### mcdata.blocks
 369 | 
 370 | Идентификация блоков по ID.
 371 | 
 372 | ### mcdata.items
 373 | 
 374 | Идентификация предметов по ID.
 375 | 
 376 | ### mcdata.materials
 377 | 
 378 | Название материала и объект, который содержит информацию об инструментах и их эффективности разрушения..
 379 | 
 380 | ### mcdata.recipes
 381 | 
 382 | Идентификация крафтов по ID.
 383 | 
 384 | ### mcdata.instruments
 385 | 
 386 | Идентификация инструментов по ID.
 387 | 
 388 | ### mcdata.biomes
 389 | 
 390 | Идентификация биомов по ID.
 391 | 
 392 | ### mcdata.entities
 393 | 
 394 | Идентификация существ по ID.
 395 | 
 396 | ## Classes
 397 | 
 398 | ### vec3
 399 | 
 400 | Смотрите [andrewrk/node-vec3](https://github.com/andrewrk/node-vec3).
 401 | 
 402 | Все координаты библиотеки Mineflayer используют данный класс.
 403 | 
 404 |  * `x` - Юг.
 405 |  * `y` - Вверх.
 406 |  * `z` - Запад.
 407 | 
 408 | Функции и методы, требующие точного аргумента позиции, как правило, используют `Vec3`,
 409 | а также массив с тремя значениями и объект с `x`, `y`, `z`.
 410 | 
 411 | ### mineflayer.Location
 412 | 
 413 | ### Entity
 414 | 
 415 | Энтити (существо) - это игроки, мобы и объекты. Вы также можете получить доступ
 416 | к своему существу, используя `bot.entity`.
 417 | Смотрите [prismarine-entity](https://github.com/PrismarineJS/prismarine-entity).
 418 | 
 419 | #### Player Skin Data
 420 | 
 421 | Данные скина хранятся в свойстве `skinData` объекта игрока, если имеются.
 422 | 
 423 | ```js
 424 | // player.skinData
 425 | {
 426 |   url: 'http://textures.minecraft.net/texture/...',
 427 |   model: 'slim' // или 'classic'
 428 | }
 429 | ```
 430 | 
 431 | ### Block
 432 | 
 433 | Смотрите [prismarine-block](https://github.com/PrismarineJS/prismarine-block).
 434 | 
 435 | `block.blockEntity` является дополнительным полем с данными блок-существ в виде `Object`.
 436 | ```js
 437 | // sign.blockEntity
 438 | {
 439 |   x: -53,
 440 |   y: 88,
 441 |   z: 66,
 442 |   id: 'minecraft:sign', // 'Sign' в 1.10
 443 |   Text1: { toString: Function }, // ChatMessage object
 444 |   Text2: { toString: Function }, // ChatMessage object
 445 |   Text3: { toString: Function }, // ChatMessage object
 446 |   Text4: { toString: Function } // ChatMessage object
 447 | }
 448 | ```
 449 | 
 450 | ### Biome
 451 | 
 452 | Смотрите [prismarine-biome](https://github.com/PrismarineJS/prismarine-biome).
 453 | 
 454 | ### Item
 455 | 
 456 | Смотрите [prismarine-item](https://github.com/PrismarineJS/prismarine-item).
 457 | 
 458 | ### windows.Window (base class)
 459 | 
 460 | Смотрите [prismarine-windows](https://github.com/PrismarineJS/prismarine-windows).
 461 | 
 462 | #### window.deposit(itemType, metadata, count, nbt)
 463 | 
 464 | Эта функция возвращает `Promise` с `void` в качестве аргумента при завершении.
 465 | 
 466 |  * `itemType` - Числовой ID предмета.
 467 |  * `metadata` - Числовое значение мета-данных. `null` означает любой вид.
 468 |  * `count` - Сколько предметов класть. `null` будет равно `1`.
 469 |  * `nbt` - Совпадение по нбт. `null` отключает это.
 470 | 
 471 | #### window.withdraw(itemType, metadata, count, nbt)
 472 | 
 473 | Эта функция возвращает `Promise` с `void` в качестве аргумента при завершении. Выдаёт ошибку, если нет места в инвентаре.
 474 | 
 475 |  * `itemType` - Числовой ID предмета.
 476 |  * `metadata` - Числовое значение мета-данных. `null` означает любой вид.
 477 |  * `count` - Сколько предметов брать. `null` будет равно `1`.
 478 |  * `nbt` - Совпадение по нбт. `null` отключает это.
 479 | 
 480 | #### window.close()
 481 | 
 482 | Закрывает окно.
 483 | 
 484 | ### Recipe
 485 | 
 486 | Смотрите [prismarine-recipe](https://github.com/PrismarineJS/prismarine-recipe).
 487 | 
 488 | ### mineflayer.Container
 489 | 
 490 | Дополнение к `windows.Window` для сундуков, раздатчиков и прочих.
 491 | Смотрите `bot.openContainer(chestBlock или minecartchestEntity)`.
 492 | 
 493 | ### mineflayer.Furnace
 494 | 
 495 | Дополнение к `windows.Window` для печки, плавильни и прочих.
 496 | Смотрите `bot.openFurnace(furnaceBlock)`.
 497 | 
 498 | #### furnace "update"
 499 | 
 500 | Срабатывает при обновлении `furnace.fuel` и/или `furnace.progress`.
 501 | 
 502 | #### furnace "updateSlot" (oldItem, newItem)
 503 | 
 504 | Срабатывает, когда в печи обновляется слот для плавки.
 505 | 
 506 | #### furnace.takeInput()
 507 | 
 508 | Эта функция возвращает `Promise` с `item` в качестве аргумента при завершении.
 509 | 
 510 | 
 511 | #### furnace.takeFuel()
 512 | 
 513 | Эта функция возвращает `Promise` с `item` в качестве аргумента при завершении.
 514 | 
 515 | 
 516 | #### furnace.takeOutput()
 517 | 
 518 | Эта функция возвращает `Promise` с `item` в качестве аргумента при завершении.
 519 | 
 520 | 
 521 | #### furnace.putInput(itemType, metadata, count)
 522 | 
 523 | Эта функция возвращает `Promise` с `void` в качестве аргумента при завершении.
 524 | 
 525 | #### furnace.putFuel(itemType, metadata, count)
 526 | 
 527 | Эта функция возвращает `Promise` с `void` в качестве аргумента при завершении.
 528 | 
 529 | #### furnace.inputItem()
 530 | 
 531 | Возвращает предмет, который плавится, в виде `Item`.
 532 | 
 533 | #### furnace.fuelItem()
 534 | 
 535 | Возвращает топливо в виде `Item`.
 536 | 
 537 | #### furnace.outputItem()
 538 | 
 539 | Возвращает результат плавки в виде `Item`.
 540 | 
 541 | #### furnace.fuel
 542 | 
 543 | Возвращает количество оставшегося топлива от `0` до `1`.
 544 | 
 545 | #### furnace.progress
 546 | 
 547 | Возвращает прогресс плавки предмета от `0` до `1`.
 548 | 
 549 | ### mineflayer.EnchantmentTable
 550 | 
 551 | Дополнение к `windows.Window` для стола зачарований.
 552 | Смотрите `bot.openEnchantmentTable(enchantmentTableBlock)`.
 553 | 
 554 | #### enchantmentTable "ready"
 555 | 
 556 | Срабатывает, когда `enchantmentTable.enchantments` полностью заполнен, и вы
 557 | можете сделать выбор, вызвав `enchantmentTable.enchant(choice)`.
 558 | 
 559 | #### enchantmentTable.targetItem()
 560 | 
 561 | Возвращает текущий предмет в столе зачарования. Этот метод может использоваться, чтобы положить или забрать предмет.
 562 | 
 563 | #### enchantmentTable.xpseed
 564 | 
 565 | 16-битный xpseed, отправленный сервером.
 566 | 
 567 | #### enchantmentTable.enchantments
 568 | 
 569 | Возвращает массив из трёх зачарований, доступных для выбора.
 570 | `level` может быть `-1`, если сервер ещё не отправил данные.
 571 | 
 572 | Пример:
 573 | 
 574 | ```js
 575 | [
 576 |   {
 577 |     level: 3
 578 |   },
 579 |   {
 580 |     level: 4
 581 |   },
 582 |   {
 583 |     level: 9
 584 |   }
 585 | ]
 586 | ```
 587 | 
 588 | #### enchantmentTable.enchant(choice)
 589 | 
 590 | Возращает `Promise` с `item` в качестве аргумента после зачарования.
 591 | 
 592 |  * `choice` - [0-2], индекс зачарования, которое вы выбираете.
 593 | 
 594 | #### enchantmentTable.takeTargetItem()
 595 | 
 596 | Возращает `Promise` с `item` в качестве аргумента при завершении.
 597 | 
 598 | 
 599 | #### enchantmentTable.putTargetItem(item)
 600 | 
 601 | Возращает `Promise` с `void` в качестве аргумента при завершении.
 602 | 
 603 | 
 604 | #### enchantmentTable.putLapis(item)
 605 | 
 606 | Возращает `Promise` с `void` в качестве аргумента при завершении.
 607 | 
 608 | 
 609 | ### mineflayer.anvil
 610 | 
 611 | Дополнение к `windows.Window` для наковальни.
 612 | Смотрите `bot.openAnvil(anvilBlock)`.
 613 | 
 614 | #### anvil.combine(itemOne, itemTwo[, name])
 615 | 
 616 | Возращает `Promise` с `void` в качестве аргумента при завершении.
 617 | 
 618 | #### anvil.combine(item[, name])
 619 | 
 620 | Возращает `Promise` с `void` в качестве аргумента при завершении.
 621 | 
 622 | 
 623 | #### villager "ready"
 624 | 
 625 | Срабатывает, когда `villager.trades` был загружен.
 626 | 
 627 | #### villager.trades
 628 | 
 629 | Массив с вариантами торговли.
 630 | 
 631 | Пример:
 632 | 
 633 | ```js
 634 | [
 635 |   {
 636 |     firstInput: Item,
 637 |     output: Item,
 638 |     hasSecondItem: false,
 639 |     secondaryInput: null,
 640 |     disabled: false,
 641 |     tooluses: 0,
 642 |     maxTradeuses: 7
 643 |   },
 644 |   {
 645 |     firstInput: Item,
 646 |     output: Item,
 647 |     hasSecondItem: false,
 648 |     secondaryInput: null,
 649 |     disabled: false,
 650 |     tooluses: 0,
 651 |     maxTradeuses: 7
 652 |   },
 653 |   {
 654 |     firstInput: Item,
 655 |     output: Item,
 656 |     hasSecondItem: true,
 657 |     secondaryInput: Item,
 658 |     disabled: false,
 659 |     tooluses: 0,
 660 |     maxTradeuses: 7
 661 |   }
 662 | ]
 663 | ```
 664 | 
 665 | #### villager.trade(tradeIndex, [times])
 666 | Подобно [bot.trade(villagerInstance, tradeIndex, [times])](#bottradevillagerinstance-tradeindex-times)
 667 | 
 668 | ### mineflayer.ScoreBoard
 669 | 
 670 | #### ScoreBoard.name
 671 | 
 672 | Имя скорборда.
 673 | 
 674 | #### ScoreBoard.title
 675 | 
 676 | Заголовок скорборда (может не совпадать с именем).
 677 | 
 678 | #### ScoreBoard.itemsMap
 679 | 
 680 | Объект со всеми элементами скорборда.
 681 | 
 682 | Пример:
 683 | 
 684 | ```js
 685 | {
 686 |   wvffle: { name: 'wvffle', value: 3 },
 687 |   dzikoysk: { name: 'dzikoysk', value: 6 }
 688 | }
 689 | ```
 690 | 
 691 | #### ScoreBoard.items
 692 | 
 693 | Массив со всеми отсортированными элементами скорборда.
 694 | 
 695 | Пример:
 696 | 
 697 | ```js
 698 | [
 699 |   { name: 'dzikoysk', value: 6 },
 700 |   { name: 'wvffle', value: 3 }
 701 | ]
 702 | ```
 703 | 
 704 | ### mineflayer.Team
 705 | 
 706 | #### Team.name
 707 | 
 708 | Название команды.
 709 | 
 710 | #### Team.friendlyFire
 711 | 
 712 | Определяет, включен ли огонь по своим.
 713 | 
 714 | #### Team.nameTagVisibility
 715 | 
 716 | Может быть `always`, `hideForOtherTeams`, `hideForOwnTeam`.
 717 | 
 718 | #### Team.collisionRule
 719 | 
 720 | Может быть `always`, `pushOtherTeams`, `pushOwnTeam`.
 721 | 
 722 | #### Team.color
 723 | 
 724 | Цвет (или форматирование) названия команды, например `dark_green`, `red`, `underlined`.
 725 | 
 726 | #### Team.prefix
 727 | 
 728 | Компонент чата, содержащий префикс команды.
 729 | 
 730 | #### Team.suffix
 731 | 
 732 | Компонент чата, содержащий суффикс команды.
 733 | 
 734 | #### Team.members
 735 | 
 736 | Массив с участниками команды. Ники игроков и UUID существ.
 737 | 
 738 | ### mineflayer.BossBar
 739 | 
 740 | #### BossBar.title
 741 | 
 742 | Название боссбара, передается в `ChatMessage`.
 743 | 
 744 | #### BossBar.health
 745 | 
 746 | Количество здоровья от `0` до `1`.
 747 | 
 748 | #### BossBar.dividers
 749 | 
 750 | Количество ячеек, может быть `0`, `6`, `10`, `12`, `20`.
 751 | 
 752 | #### BossBar.entityUUID
 753 | 
 754 | UUID существа, который определяется боссом.
 755 | 
 756 | #### BossBar.shouldDarkenSky
 757 | 
 758 | Определяет, стоит ли затемнять небо.
 759 | 
 760 | #### BossBar.isDragonBar
 761 | 
 762 | Определяет, является ли боссбар - боссбаром Дракона Края.
 763 | 
 764 | #### BossBar.createFog
 765 | 
 766 | Определяет, стоит ли создават туман.
 767 | 
 768 | #### BossBar.color
 769 | 
 770 | Определяет цвет боссбара. Может быть `pink`, `blue`, `red`, `green`, `yellow`, `purple`, `white`.
 771 | 
 772 | ### mineflayer.Particle
 773 | 
 774 | #### Particle.id
 775 | 
 776 | Идентификатор частицы, который прописан в [протоколе](https://wiki.vg/Protocol#Particle).
 777 | 
 778 | #### Particle.name
 779 | 
 780 | Название частицы, которое прописано в [протоколе](https://wiki.vg/Protocol#Particle).
 781 | 
 782 | #### Particle.position
 783 | 
 784 | Расположение частицы в Vec3.
 785 | 
 786 | #### Particle.offset
 787 | 
 788 | Смещение частицы в Vec3.
 789 | 
 790 | #### Particle.longDistanceRender
 791 | 
 792 | Определяет, следует ли принудительно отображать частицу, несмотря на настройки частиц клиента, и увеличивает максимальную дальность прорисовки с 256 до 65536.
 793 | 
 794 | #### Particle.count
 795 | 
 796 | Количество созданных частиц.
 797 | 
 798 | #### Particle.movementSpeed
 799 | 
 800 | Скорость частиц в случайном направлении.
 801 | 
 802 | ## Bot
 803 | 
 804 | ### mineflayer.createBot(options)
 805 | 
 806 | Создаёт и возвращает экземпляр класса бота.
 807 | `options` - это объект, который содержит в себе :
 808 |  * `username` : Ник игрока, по умолчанию `"Player"`.
 809 |  * `port` : Порт сервера, по умолчанию `25565`.
 810 |  * `password` : Пароль может быть пропущен, если подключение осуществляется к пиратскому серверу.
 811 |  * `host` : Айпи сервера, по умолчанию `"localhost"`.
 812 |  * `version` : По умолчанию версия сервера определяется автоматически. Пример использования : `"1.12.2"`.
 813 |  * `auth` : Вид аутентификации, по умолчанию `"mojang"`, может быть `"microsoft"`.
 814 |  * `clientToken` : Генерируется, если задан пароль.
 815 |  * `accessToken` : Генерируется, если задан пароль.
 816 |  * `logErrors` : По умолчанию включено, используется для отлова и логирования ошибок.
 817 |  * `hideErrors` : По умолчанию включено, не логирует ошибки (даже если включен `logErrors`).
 818 |  * `keepAlive` : Отправка пакета активности, по умолчанию включено.
 819 |  * `checkTimeoutInterval` : По умолчанию `30*1000` (30 сек.), проверяет, получен ли пакет активности, иначе отключается.
 820 |  * `loadInternalPlugins` : Загрузка плагинов, по умолчанию включено.
 821 |  * `storageBuilder` : Необязательная функция, принимающая в качестве аргумента версию и название мира (`worldName`) и возвращающая экземпляр чего-либо с тем же API, что и `prismarine-provider-anvil`. Будет использовано для сохранения мира.
 822 |  * `client` : Экземпляр `node-minecraft-protocol`, если не указан, mineflayer создает свой собственный клиент. Это может быть нужно для использования mineflayer через прокси многих клиентов или ванильного клиента и mineflayer клиента.
 823 |  * `brand` : Название версии, которое будет использовать клиент. По умолчанию `vanilla`. Может использоваться для имитации пользовательских клиентов для серверов, которым это требуется.
 824 |  * `respawn` : Отвечает за автоматическое возрождение бота, по умолчанию включено.
 825 |  * `plugins` : Объект : По умолчанию `{}`
 826 |    - `pluginName` : `false` : Не загружать плагин с заданным именем `pluginName`.
 827 |    - `pluginName` : `true` : Загрузить плагин с заданным именем `pluginName`, даже если `loadInternalplugins` отключен.
 828 |    - `pluginName` : Функция ввода внешнего плагина : загружает сторонний плагин, переопределяет внутренний плагин с заданным именем `pluginName`.
 829 |  * `physicsEnabled` : По умолчанию включено. Должна ли физика влиять на бота? Можно изменить с помощью `bot.physicsEnabled`.
 830 |  * [chat](#bot.settings.chat)
 831 |  * [colorsEnabled](#bot.settings.colorsEnabled)
 832 |  * [viewDistance](#bot.settings.viewDistance)
 833 |  * [difficulty](#bot.settings.difficulty)
 834 |  * [skinParts](#bot.settings.skinParts)
 835 |  * [enableTextFiltering](#bot.settings.enableTextFiltering)
 836 |  * [enableServerListing](#bot.settings.enableServerListing)
 837 |  * `chatLengthLimit` : Максимальное количество символов, отправляемое в чат. Если не установлено, будет установлено следующее: 100 в < 1.11 и 256 в >= 1.11.
 838 |  * `defaultChatPatterns`: По умолчанию включено, добавляет шаблоны, такие как общий чат и личные сообщения.
 839 | 
 840 | ### Properties
 841 | 
 842 | #### bot.registry
 843 | 
 844 | Экземпляр `minecraft-data` используемый ботом. Передайте это конструкторам, которые ожидают `minecraft-data`, таким как `prismarine-block`.
 845 | 
 846 | #### bot.world
 847 | 
 848 | Синхронное представление мира. Смотрите [prismarine-world](http://github.com/PrismarineJS/prismarine-world).
 849 | 
 850 | ##### world "blockUpdate" (oldBlock, newBlock)
 851 | 
 852 | Срабатывает при обновлении блока. `oldBlock` и `newBlock` предоставляются для сравнения.
 853 | `oldBlock` может быть `null` при обычном обновлении блока.
 854 | 
 855 | ##### world "blockUpdate:(x, y, z)" (oldBlock, newBlock)
 856 | 
 857 | Срабатывает в определенной точке. `oldBlock` и `newBlock` предоставляются для сравнения. Все слушатели получают `null` для `oldBlock` и `newBlock` и автоматически удаляются при выгрузке мира.
 858 | `oldBlock` может быть `null` при обычном обновлении блока.
 859 | 
 860 | #### bot.entity
 861 | 
 862 | Ваше собственное существо. Смотрите `Entity`.
 863 | 
 864 | #### bot.entities
 865 | 
 866 | Все близлежащие существа. Этот объект представляет собой сопоставление `entityId` с `entity`.
 867 | 
 868 | #### bot.username
 869 | 
 870 | Используйте это, чтобы узнать имя бота.
 871 | 
 872 | #### bot.spawnPoint
 873 | 
 874 | Показывает координаты спавна бота, на которые указывает компас.
 875 | 
 876 | #### bot.heldItem
 877 | 
 878 | Предмет, который держит бот. Представляет экземпляр [prismarine-item](https://github.com/PrismarineJS/prismarine-item), основанный на мета-данных, нбт-данных и т.д.
 879 | 
 880 | #### bot.usingHeldItem
 881 | 
 882 | Использует ли бот предмет, который он держит в руках, например, ест пищу или использует щит.
 883 | 
 884 | #### bot.game.levelType
 885 | 
 886 | Тип генерации.
 887 | 
 888 | #### bot.game.dimension
 889 | 
 890 | Текущее измерение бота, может быть `overworld`, `the_end` или `the_nether`.
 891 | 
 892 | #### bot.game.difficulty
 893 | 
 894 | Сложность на сервере.
 895 | 
 896 | #### bot.game.gameMode
 897 | 
 898 | Игровой режим.
 899 | 
 900 | #### bot.game.hardcore
 901 | 
 902 | Включен ли режим хардкода.
 903 | 
 904 | #### bot.game.maxPlayers
 905 | 
 906 | #### bot.game.serverBrand
 907 | 
 908 | Ядро сервера.
 909 | 
 910 | #### bot.game.minY
 911 | 
 912 | Минимальная высота Y в мире.
 913 | 
 914 | #### bot.game.height
 915 | 
 916 | Максимальная высота мира.
 917 | 
 918 | #### bot.physicsEnabled
 919 | 
 920 | Включает физику бота, по умолчанию `true`.
 921 | 
 922 | ### bot.player
 923 | 
 924 | Объект игрока.
 925 | 
 926 | Пример:
 927 | ```js
 928 | {
 929 |   username: 'player',
 930 |   displayName: { toString: Function }, // Объект ChatMessage.
 931 |   gamemode: 0,
 932 |   ping: 28,
 933 |   entity: entity // null, если Вы находитесь слишком далеко
 934 | }
 935 | ```
 936 | 
 937 | Пинг игрока изначально равен `0`, нужно подождать, пока сервер отправит его пинг.
 938 | 
 939 | #### bot.players
 940 | 
 941 | Показывает всех игроков, которые находятся на сервере.
 942 | 
 943 | #### bot.tablist
 944 | 
 945 | Объект таблиста бота, содержит `header` и `footer`.
 946 | 
 947 | Пример:
 948 | ```js
 949 | {
 950 |   header: { toString: Function }, // Объект ChatMessage.
 951 |   footer: { toString: Function } // Объект ChatMessage.
 952 | }
 953 | ```
 954 | 
 955 | #### bot.isRaining
 956 | 
 957 | Определяет, идёт ли дождь.
 958 | 
 959 | #### bot.rainState
 960 | 
 961 | Число, указывающее текущий уровень дождя. Когда дождя нет, значение будет равно 0. Когда начнется дождь, значение будет постепенно увеличиваться до 1. Когда дождь прекращается, значение постепенно возвращается к 0.
 962 | 
 963 | Каждый раз, когда изменяется `bot.rainState`, срабатывает событие `"weatherUpdate"`.
 964 | 
 965 | #### bot.thunderState
 966 | 
 967 | Число, указывающее текущий уровень грозы. Когда грозы нет, значение будет равно 0. Когда начнется гроза, значение будет постепенно увеличиваться до 1. Когда гроза прекращается, значение постепенно возвращается к 0.
 968 | 
 969 | Каждый раз, когда изменяется `bot.thunderState`, срабатывает событие `"weatherUpdate"`.
 970 | 
 971 | Это то же самое, что и `bot.rainState`, но для грозы.
 972 | Во время грозы изменяются значения `bot.rainState` и `bot.thunderState`.
 973 | 
 974 | #### bot.chatPatterns
 975 | 
 976 | Массив шаблонов следующего формата: [/regex/, "chattype", "description"]
 977 | 
 978 |  * `/regex/` - Шаблон регулярного выражения, который должен иметь как минимум две группы.
 979 |  * `'chattype'` - Тип чата, который может является "chat" или "whisper".
 980 |  * `'description'` - Описание шаблона, необязательно.
 981 | 
 982 | #### bot.settings.chat
 983 | 
 984 | Выбор:
 985 | 
 986 |  * `enabled` - Включен (по умолчанию).
 987 |  * `commandsOnly` - Только команды.
 988 |  * `disabled` - Выключен.
 989 | 
 990 | #### bot.settings.colorsEnabled
 991 | 
 992 | По умолчанию активно, используется для отображения цветов в чате.
 993 | 
 994 | #### bot.settings.viewDistance
 995 | 
 996 | Выбор прорисовки:
 997 |  * `far` - Дальняя (по умолчанию).
 998 |  * `normal` - Нормальная.
 999 |  * `short` - Малая.
1000 |  * `tiny` - Минимальная.
1001 | 
1002 | #### bot.settings.difficulty
1003 | 
1004 | Сложность. Вернет то же, что и в `server.properties`.
1005 | 
1006 | #### bot.settings.skinParts
1007 | 
1008 | Должны ли отображаться дополнительные детали скинов игроков.
1009 | 
1010 | #### bot.settings.skinParts.showCape - boolean
1011 | 
1012 | Отображение плаща.
1013 | 
1014 | ##### bot.settings.skinParts.showJacket - boolean
1015 | 
1016 | Отображение куртки.
1017 | 
1018 | ##### bot.settings.skinParts.showLeftSleeve - boolean
1019 | 
1020 | Отображение левого рукава.
1021 | 
1022 | ##### bot.settings.skinParts.showRightSleeve - boolean
1023 | 
1024 | Отображение правого рукава.
1025 | 
1026 | ##### bot.settings.skinParts.showLeftPants - boolean
1027 | 
1028 | Отображение левой штанины.
1029 | 
1030 | ##### bot.settings.skinParts.showRightPants - boolean
1031 | 
1032 | Отображение правой штанины.
1033 | 
1034 | ##### bot.settings.skinParts.showHat - boolean
1035 | 
1036 | Отображение головного убора.
1037 | 
1038 | #### bot.settings.enableTextFiltering - boolean
1039 | 
1040 | Не используется. По умолчанию выключен в ванильном клиенте.
1041 | 
1042 | #### bot.settings.enableServerListing - boolean
1043 | 
1044 | Этот параметр отправляется на сервер, чтобы определить, должен ли игрок отображаться в списке серверов.
1045 | 
1046 | #### bot.experience.level
1047 | 
1048 | Уровень опыта.
1049 | 
1050 | #### bot.experience.points
1051 | 
1052 | Общее количество очков опыта.
1053 | 
1054 | #### bot.experience.progress
1055 | 
1056 | Значение от `0` до `1` - число для перехода на следующий уровень.
1057 | 
1058 | #### bot.health
1059 | 
1060 | Число от `0` до `20`. Каждое число является половиной ячейки здоровья в игре.
1061 | 
1062 | #### bot.food
1063 | 
1064 | Число от `0` до `20`. Каждое число является половиной ячейки голода в игре.
1065 | 
1066 | #### bot.foodSaturation
1067 | 
1068 | Показывает насыщенность. Голод не уменьшается, если насыщенность больше нуля. Игроки, зашедшие на сервер, автоматически получают насыщенность `5,0`. Еда увеличивает как насыщенность, так и голод.
1069 | 
1070 | #### bot.oxygenLevel
1071 | 
1072 | Число от `0` до `20`. Каждое число отображает количество значков воды, известных как уровень кислорода.
1073 | 
1074 | #### bot.physics
1075 | 
1076 | Изменение значений скорости, отдачи, скорости прыжка и т.д.
1077 | Изменяйте на свой страх и риск!
1078 | 
1079 | #### bot.fireworkRocketDuration
1080 | 
1081 | Сколько физических тиков осталось до окончания ускорения от фейерверка.
1082 | 
1083 | #### bot.simpleClick.leftMouse (slot)
1084 | 
1085 | То же, что и `bot.clickWindow(slot, 0, 0)`.
1086 | 
1087 | #### bot.simpleClick.rightMouse (slot)
1088 | 
1089 | То же, что и `bot.clickWindow(slot, 1, 0)`.
1090 | 
1091 | #### bot.time.doDaylightCycle
1092 | 
1093 | Отображает включено ли игровое правило `doDaylightCycle`.
1094 | 
1095 | #### bot.time.bigTime
1096 | 
1097 | Количество тиков с нулевого дня в мире.
1098 | 
1099 | Это значение имеет тип `BigInt` и является точным даже при очень больших значениях (более 2^51 - 1 тиков).
1100 | 
1101 | #### bot.time.time
1102 | 
1103 | Количество тиков с нулевого дня в мире.
1104 | 
1105 | Поскольку ограничение `Number` в Javascript составляет 2^51 - 1, значение `bot.time.time` становится неточным при превышении этого ограничения, рекомендуется использовать `bot.time.bigTime`.
1106 | Вероятно вам никогда не понадобится `bot.time.bigTime`, так как 2^51 - 1 тиков это примерно 14280821 настоящих лет.
1107 | 
1108 | #### bot.time.timeOfDay
1109 | 
1110 | Время суток в тиках.
1111 | 
1112 | Время основано на тиках, где каждую секунду происходит 20 тиков. 24000 тиков - 1 игровой день, или же 20 реальных минут.
1113 | 
1114 | Время суток основано на тиках. `0` - восход, `6000` - полдень, `12000` - закат, а `18000` - полночь.
1115 | 
1116 | #### bot.time.day
1117 | 
1118 | Отображает, какой день в мире.
1119 | 
1120 | #### bot.time.isDay
1121 | 
1122 | Определяет, сейчас день (`true`) или ночь (`false`).
1123 | 
1124 | Основано на времени между `13000` и `23000` тиками.
1125 | 
1126 | #### bot.time.moonPhase
1127 | 
1128 | Фаза луны.
1129 | 
1130 | Значение от `0` до `7`, где `0` - полнолуние.
1131 | 
1132 | #### bot.time.bigAge
1133 | 
1134 | Возраст мира в тиках.
1135 | 
1136 | Это значение имеет тип `BigInt` и является точным даже при очень больших значениях. (более 2^51 - 1 тиков)
1137 | 
1138 | #### bot.time.age
1139 | 
1140 | Возраст мира в тиках.
1141 | 
1142 | Поскольку ограничение `Number` в Javascript составляет 2^51 - 1, значение `bot.time.age` становится неточным при превышении этого ограничения, рекомендуется использовать `bot.time.bigAge`.
1143 | Вероятно вам никогда не понадобится `bot.time.bigAge`, так как 2^51 - 1 тиков это примерно 14280821 настоящих лет.
1144 | 
1145 | #### bot.quickBarSlot
1146 | 
1147 | Показывает, какой слот сейчас выбран (0-8).
1148 | 
1149 | #### bot.inventory
1150 | 
1151 | Экземпляр [`Window`](https://github.com/PrismarineJS/prismarine-windows#windowswindow-base-class), который представляет ваш инвентарь.
1152 | 
1153 | #### bot.targetDigBlock
1154 | 
1155 | Показывает блок, который вы сейчас копаете, или же `null`.
1156 | 
1157 | #### bot.isSleeping
1158 | 
1159 | Возвращает `true` или `false`, в зависимости от того,
1160 | лежите вы в кровати или нет.
1161 | 
1162 | #### bot.scoreboards
1163 | 
1164 | Показывает все скорборды в виде объекта: `name -> scoreboard`.
1165 | 
1166 | #### bot.scoreboard
1167 | 
1168 | Показывает все скорборды в виде объекта: `scoreboard displaySlot -> scoreboard`.
1169 | 
1170 |  * `belowName` - Cкорборд размещен снизу никнейма.
1171 |  * `sidebar` - Cкорборд размещен на боковой панели.
1172 |  * `list` - Cкорборд помещен в список игроков.
1173 |  * `0-18` - Cлоты, определённые в [протоколе](https://wiki.vg/Protocol#Display_Scoreboard).
1174 | 
1175 | #### bot.teams
1176 | 
1177 | Все команды (Подобно `/team list`).
1178 | 
1179 | #### bot.teamMap
1180 | 
1181 | Список участников команды. Использует никнеймы для игроков и UUID для существ.
1182 | 
1183 | #### bot.controlState
1184 | 
1185 | Объект, состоящий из основных элементов управления: ['forward', 'back', 'left', 'right', 'jump', 'sprint', 'sneak'].
1186 | 
1187 | Установка значения для этого объекта вызовет [bot.setControlState](#botsetcontrolstatecontrol-state).
1188 | 
1189 | ### Events
1190 | 
1191 | #### "chat" (username, message, translate, jsonMsg, matches)
1192 | 
1193 | При получении сообщения в чате от игрока.
1194 | 
1195 |  * `username` - Имя отправителя (сравните с `bot.username`, если вы не хотите видеть собственные сообщения).
1196 |  * `message` - Сообщение, очищенное от всех цветовых кодов.
1197 |  * `translate` - Тип сообщения. В большинстве случаев является `null`.
1198 |  * `jsonMsg` - Сообщение в формате JSON.
1199 |  * `matches` - Массив совпадений в регулярных выражениях. Может являться `null`.
1200 | 
1201 | #### "whisper" (username, message, translate, jsonMsg, matches)
1202 | 
1203 | При получении сообщения в личных сообщениях от игрока.
1204 | 
1205 |  * `username` - И отправителя.
1206 |  * `message` - Сообщение, очищенное от всех цветовых кодов.
1207 |  * `translate` - Тип сообщения. В большинстве является `null`.
1208 |  * `jsonMsg` - Сообщение в формате JSON.
1209 |  * `matches` - Массив совпадений в регулярных выражениях. Может являться `null`.
1210 | 
1211 | #### "actionBar" (jsonMsg, verified)
1212 | 
1213 | При появлении сообщения от сервера над хотбаром.
1214 | 
1215 |  * `jsonMsg` - Сообщение в формате JSON.
1216 |  * `verified` - Если не подтверждено - `null`, если подтверждено и правильно - `true`, если подтверждено, но не правильно - `false`.
1217 | 
1218 | #### "message" (jsonMsg, position, sender, verified)
1219 | 
1220 | При появлении любого серверного сообщения, включая чаты.
1221 | 
1222 |  * `jsonMsg` - Объект [ChatMessage](https://github.com/PrismarineJS/prismarine-chat) содержащий форматированное сообщение. Дополнительно может обладать следующими свойствами:
1223 |    * unsigned - Неподтверждённый объект `ChatMessage`. Только для версий 1.19.2+, когда сервер разрешает "небезопасный" чат или сервер изменяет сообщения без подписи игрока.
1224 |  * `position` - (> = 1.8.1): Положение сообщения в чате может быть
1225 |    * `chat`
1226 |    * `system`
1227 |    * `game_info`
1228 |  * `sender` - UUID отправителя, если известно (1.16+), иначе `null`.
1229 |  * `verified` - Если не подтверждено - `null`, если подтверждено и правильно - `true`, если подтверждено, но не правильно - `false`.
1230 | 
1231 | #### "messagestr" (message, messagePosition, jsonMsg, sender, verified)
1232 | 
1233 | То же самое, что и `"message"`, но вызывает `.toString()` в объекте `prismarine-message`, чтобы сразу получить сообщение.
1234 | 
1235 |  * `sender` - UUID отправителя, если известно (1.16+), иначе `null`.
1236 |  * `verified` - Если не подтверждено - `null`, если подтверждено и правильно - `true`, если подтверждено, но не правильно - `false`.
1237 | 
1238 | #### "inject_allowed"
1239 | 
1240 | Срабатывает, когда главный файл загружен, здесь вы можете загрузить `mcData` и плагины, но лучше подождать событие `"spawn"`.
1241 | 
1242 | #### "login"
1243 | 
1244 | Срабатывает при успешном подключении к серверу.
1245 | Возможно, вам потребуется дождаться события `"spawn"`, прежде чем что-либо делать на сервере.
1246 | 
1247 | #### "spawn"
1248 | 
1249 | Срабатывает один раз после того, как вы вошли на сервер и появились в мире, а также срабатывает при респавне после смерти.
1250 | 
1251 | В большинстве случаев это событие, которое вы хотите прослушать, прежде чем что-либо делать на сервере.
1252 | 
1253 | 
1254 | #### "respawn"
1255 | 
1256 | Срабатывает при смене миров и после появления в мире.
1257 | В большинстве случаев вам нужно сначала дождаться события `"spawn"` вместо этого.
1258 | 
1259 | #### "game"
1260 | 
1261 | Срабатывает, если сервер меняет свойства в `server.properties`.
1262 | 
1263 | #### "resourcePack" (url, hash)
1264 | 
1265 | Срабатывает, когда сервер отправляет ресурспак.
1266 | 
1267 | #### "title" (title, type)
1268 | 
1269 | Срабатывает, когда сервер отправляет текст по центру экрана.
1270 | 
1271 |  * `title` - Текст на экране.
1272 |  * `type` - Тип текста "subtitle" или "title"
1273 | 
1274 | #### "rain"
1275 | 
1276 | Срабатывает, когда начинается или прекращается дождь. Если вы присоединитесь к
1277 | серверу, на котором уже идет дождь, это событие также сработает.
1278 | 
1279 | #### "weatherUpdate"
1280 | 
1281 | Срабатывает, когда `bot.thunderState` или `bot.rainState` изменяются.
1282 | Если вы присоединитесь к серверу, на котором уже идет дождь, это событие также сработает.
1283 | 
1284 | #### "time"
1285 | 
1286 | Срабатывает, когда сервер отправляет время. Смотрите `bot.time`.
1287 | 
1288 | #### "kicked" (reason, loggedIn)
1289 | 
1290 | Срабатывает при кике с сервера.
1291 | 
1292 |  * `reason` - Причина отключения.
1293 |  * `loggedIn` - `true`, если вы были кикнуты после успешного входа на сервер, или `false`, если отключение произошло во время подключения.
1294 | 
1295 | #### "end" (reason)
1296 | 
1297 | Срабатывает, когда вы отключены от сервера.
1298 | 
1299 |  * `reason` - причина отключения. (обычно `'socketClosed'`)
1300 | 
1301 | #### "error" (err)
1302 | 
1303 | Срабатывает, когда происходит какая-либо ошибка.
1304 | 
1305 | #### "spawnReset"
1306 | 
1307 | Срабатывает, когда вы не можете заспавниться у своей кровати, и ваша точка появления сбрасывается.
1308 | 
1309 | #### "death"
1310 | 
1311 | Срабатывает, когда вы умираете.
1312 | 
1313 | #### "health"
1314 | 
1315 | Срабатывает, когда значения здоровья или голода изменяются.
1316 | 
1317 | #### "breath"
1318 | 
1319 | Срабатывает, когда значение запаса воздуха изменяется.
1320 | 
1321 | #### "entityAttributes" (entity)
1322 | 
1323 | Срабатывает при изменении атрибутов (свойств) существа.
1324 | 
1325 | 
1326 | #### "entitySwingArm" (entity)
1327 | #### "entityHurt" (entity)
1328 | #### "entityDead" (entity)
1329 | #### "entityTaming" (entity)
1330 | #### "entityTamed" (entity)
1331 | #### "entityShakingOffWater" (entity)
1332 | #### "entityEatingGrass" (entity)
1333 | #### "entityHandSwap" (entity)
1334 | #### "entityWake" (entity)
1335 | #### "entityEat" (entity)
1336 | #### "entityCriticalEffect" (entity)
1337 | #### "entityMagicCriticalEffect" (entity)
1338 | #### "entityCrouch" (entity)
1339 | #### "entityUncrouch" (entity)
1340 | #### "entityEquip" (entity)
1341 | #### "entitySleep" (entity)
1342 | #### "entitySpawn" (entity)
1343 | #### "entityElytraFlew" (entity)
1344 | 
1345 | Если существо начало летать на элитрах.
1346 | 
1347 | #### "itemDrop" (entity)
1348 | #### "playerCollect" (collector, collected)
1349 | 
1350 | Если существо подняло предмет.
1351 | 
1352 |  * `collector` - Существо, поднявшее предмет.
1353 |  * `collected` - Существо, которое являлось поднятым предметом.
1354 | 
1355 | #### "entityGone" (entity)
1356 | #### "entityMoved" (entity)
1357 | #### "entityDetach" (entity, vehicle)
1358 | #### "entityAttach" (entity, vehicle)
1359 | 
1360 | Если существо сидит в транспортном средстве, таком как лодка или вагонетка.
1361 | 
1362 |  * `entity` - Существо, которое сидит в транспортном средстве.
1363 |  * `vehicle` - Существо, которое является транспортным средством.
1364 | 
1365 | #### "entityUpdate" (entity)
1366 | #### "entityEffect" (entity, effect)
1367 | #### "entityEffectEnd" (entity, effect)
1368 | #### "playerJoined" (player)
1369 | #### "playerUpdated" (player)
1370 | #### "playerLeft" (player)
1371 | 
1372 | #### "blockUpdate" (oldBlock, newBlock)
1373 | 
1374 | (Лучше использовать это событие от `bot.world`, чем напрямую от бота)
1375 | Срабатывает при обновлении блока. `oldBlock` и `newBlock` можно сравнить.
1376 | 
1377 | Стоит заметить, что `oldBlock` может быть `null`.
1378 | 
1379 | #### "blockUpdate:(x, y, z)" (oldBlock, newBlock)
1380 | 
1381 | (Лучше использовать это событие от `bot.world`, чем напрямую от бота)
1382 | Срабатывает при обновлении блока в определенном месте. `oldBlock` и `newBlock` можно сравнить.
1383 | 
1384 | Стоит заметить, что `oldBlock` может быть `null`.
1385 | 
1386 | #### "blockPlaced" (oldBlock, newBlock)
1387 | 
1388 | Срабатывает при установке блока. `oldBlock` и `newBlock` можно сравнить.
1389 | 
1390 | Стоит заметить, что `oldBlock` может быть `null`.
1391 | 
1392 | #### "chunkColumnLoad" (point)
1393 | #### "chunkColumnUnload" (point)
1394 | 
1395 | Срабатывает при обновлении чанка. `point` является координатами угла чанка с наименьшими значениями `x`, `y`, и `z`.
1396 | 
1397 | #### "soundEffectHeard" (soundName, position, volume, pitch)
1398 | 
1399 | Срабатывает, когда вы слышите звуковой эффект.
1400 | 
1401 |  * `soundName` - Имя звукового эффекта.
1402 |  * `position` - Координаты в виде `Vec3`, где был проигран звук.
1403 |  * `volume` - Уровень звука в виде `float`, `1.0` является 100%.
1404 |  * `pitch` - Искажение звука в виде `integer`, `63` является 100%.
1405 | 
1406 | #### "hardcodedSoundEffectHeard" (soundId, soundCategory, position, volume, pitch)
1407 | 
1408 | Срабатывает, когда вы слышите нестандартный звуковой эффект.
1409 | 
1410 |  * `soundId` - ID звукового эффекта.
1411 |  * `soundCategory` - Категория звукового эффекта.
1412 |  * `position` - Координаты в виде `Vec3`, где был проигран звук.
1413 |  * `volume` - Уровень звука в виде `float`, `1.0` является 100%.
1414 |  * `pitch` - Искажение звука в виде `integer`, `63` является 100%.
1415 | 
1416 | #### "noteHeard" (block, instrument, pitch)
1417 | 
1418 | Срабатывает, когда был проигран звук нотного блока.
1419 | 
1420 |  * `block` - Блок, который проиграл звук.
1421 |  * `instrument`: Объект
1422 |    - `id` : ID в виде `integer`.
1423 |    - `name` : Один из видов звука.
1424 |  * `pitch` - Высота ноты (от 0 до 24 включительно, где 0 - это самая низкая, а 24 - самая высокая). Больше информации об этом можно найти на [оффициальной Minecraft википедии](http://minecraft.wiki/w/Note_Block).
1425 | 
1426 | #### "pistonMove" (block, isPulling, direction)
1427 | 
1428 | #### "chestLidMove" (block, isOpen, block2)
1429 | * `block` - Блок, который был открыт. Если это двойной сундук - то отмечается правый блок.
1430 | * `isOpen` - Число игроков, открывших сундук. 0, если он закрыт.
1431 | * `block2`: Второй блок, который является частью двойного сундук. `null`, если это не двойной сундук.
1432 | 
1433 | #### "blockBreakProgressObserved" (block, destroyStage, entity)
1434 | 
1435 | Срабатывает, когда вы наблюдаете процесс разрушения блока
1436 | 
1437 |  * `block` - Блок, который ломают.
1438 |  * `destroyStage` - Уровень прогресса (0-9).
1439 |  * `entity` - Существо, которое ломает блок.
1440 | 
1441 | #### "blockBreakProgressEnd" (block, entity)
1442 | 
1443 | Срабатывает, когда процесс разрушения блока прекращен.
1444 | Происходит при прекращении разрушения блока или после его полного разрушения.
1445 | 
1446 |  * `block` - Блок, который перестали ломать.
1447 |  * `entity` - Существо, которое перестало ломать блок.
1448 | 
1449 | #### "diggingCompleted" (block)
1450 | 
1451 |  * `block` - Блок, который был разрушен.
1452 | 
1453 | #### "diggingAborted" (block)
1454 | 
1455 |  * `block` - Блок, который не был разрушен.
1456 | 
1457 | #### "usedfirework"
1458 | 
1459 | Срабатывает при использовании фейерверка во время полёта на элитрах.
1460 | 
1461 | #### "move"
1462 | 
1463 | Срабатывает при движении бота. Если вы хотите узнать текущее положение, используйте `bot.entity.position`, если вы хотите узнать предыдущее положение, используйте `bot.entity.position.minus(bot.entity.velocity)`.
1464 | 
1465 | #### "forcedMove"
1466 | 
1467 | Срабатывает при принудительном перемещении бота сервером (телепорт, спавн и т.д.). Если вы хотите узнать текущее положение, используйте `bot.entity.position`.
1468 | 
1469 | #### "mount"
1470 | 
1471 | Срабатывает, если вы поставили существо, например вагонетку. Чтобы получить доступ к ней,
1472 | используйте `bot.vehicle`.
1473 | 
1474 | Чтобы сесть в неё, используйте `mount`.
1475 | 
1476 | #### "dismount" (vehicle)
1477 | 
1478 | Срабатывает, если вы слезли с существа.
1479 | 
1480 | #### "windowOpen" (window)
1481 | 
1482 | Срабатывает, если вы открываете верстак, сундук и т.д.
1483 | 
1484 | #### "windowClose" (window)
1485 | 
1486 | Срабатывает, если вы закрыли верстак, сундук и т.д.
1487 | 
1488 | #### "sleep"
1489 | 
1490 | Срабатывает, если вы легли спать.
1491 | 
1492 | #### "wake"
1493 | 
1494 | Срабатывает, если вы проснулись.
1495 | 
1496 | #### "experience"
1497 | 
1498 | Срабатывает, если значение `bot.experience.*` было обновлено.
1499 | 
1500 | #### "scoreboardCreated" (scoreboard)
1501 | 
1502 | Срабатывает, если скорборд был создан.
1503 | 
1504 | #### "scoreboardDeleted" (scoreboard)
1505 | 
1506 | Срабатывает, если скорборд был удален.
1507 | 
1508 | #### "scoreboardTitleChanged" (scoreboard)
1509 | 
1510 | Срабатывает, если название скорборда было обновлено.
1511 | 
1512 | #### "scoreUpdated" (scoreboard, item)
1513 | 
1514 | Срабатывает, если значение в скорборде было обновлено.
1515 | 
1516 | #### "scoreRemoved" (scoreboard, item)
1517 | 
1518 | Срабатывает, если значение в скорборде было удалено.
1519 | 
1520 | #### "scoreboardPosition" (position, scoreboard)
1521 | 
1522 | Срабатывает, если позиция скорборда была обновлена.
1523 | 
1524 | #### "teamCreated" (team)
1525 | 
1526 | Срабатывает, если команда была создана.
1527 | 
1528 | #### "teamRemoved" (team)
1529 | 
1530 | Срабатывает, если команда была удалена.
1531 | 
1532 | #### "teamUpdated" (team)
1533 | 
1534 | Срабатывает, если команда была обновлена.
1535 | 
1536 | #### "teamMemberAdded" (team)
1537 | 
1538 | Срабатывает, если участник(и) были добавлены в команду.
1539 | 
1540 | #### "teamMemberRemoved" (team)
1541 | 
1542 | Срабатывает, если участник(и) были удалены из команды.
1543 | 
1544 | #### "bossBarCreated" (bossBar)
1545 | 
1546 | Срабатывает, если боссбар был создан.
1547 | 
1548 | #### "bossBarDeleted" (bossBar)
1549 | 
1550 | Срабатывает, если боссбар был удален.
1551 | 
1552 | #### "bossBarUpdated" (bossBar)
1553 | 
1554 | Срабатывает, если боссбар был обновлен.
1555 | 
1556 | #### "heldItemChanged" (heldItem)
1557 | 
1558 | Срабатывает, если предмет в руке был изменён.
1559 | 
1560 | #### "physicsTick" ()
1561 | 
1562 | Срабатывает каждый тик, если `bot.physicsEnabled` включен.
1563 | 
1564 | #### "chat:name" (matches)
1565 | 
1566 | Срабатывает, если все регулярные выражения шаблона чата совпадают.
1567 | 
1568 | #### "particle"
1569 | 
1570 | Срабатывает, если появилась частица.
1571 | 
1572 | ### Functions
1573 | 
1574 | #### bot.blockAt(point, extraInfos=true)
1575 | 
1576 | Возвращает блок в `point` или `null`, если эта точка не загружена. Если значение `extraInfos` равно `true`, возращает информацию о табличках, картинах, сундуках, шалкерах и т.д. (медленнее).
1577 | Смотрите `Block`.
1578 | 
1579 | #### bot.waitForChunksToLoad()
1580 | 
1581 | Эта функция возвращает `Promise` с `void` в качестве аргумента, когда все чанки были загружены.
1582 | 
1583 | #### bot.blockInSight(maxSteps, vectorLength)
1584 | 
1585 | Неподдерживается, используйте `blockAtCursor`.
1586 | 
1587 | Возвращает блок, на который смотрит бот, либо `null`.
1588 | 
1589 |  * `maxSteps` - Количество блоков, по умолчанию 256.
1590 |  * `vectorLength` - Длина вектора, по умолчанию `5/16`.
1591 | 
1592 | #### bot.blockAtCursor(maxDistance=256)
1593 | 
1594 | Возвращает блок, на который смотрит бот, либо `null`.
1595 |  * `maxDistance` - Максимальное расстояние от глаз до блока, по умолчанию 256.
1596 | 
1597 | #### bot.entityAtCursor(maxDistance=3.5)
1598 | 
1599 | Возвращает существо, на которое смотрит бот, либо `null`.
1600 |  * `maxDistance` - Максимальное расстояние от глаз до существа, по умолчанию 3,5.
1601 | 
1602 | #### bot.blockAtEntityCursor(entity=bot.entity, maxDistance=256)
1603 | 
1604 | Возвращает блок, на который смотрит существо, либо `null`.
1605 |  * `entity` - Существо в виде `Object`.
1606 |  * `maxDistance` - Максимальное расстояние от глаз до блока, по умолчанию 256.
1607 | 
1608 | #### bot.canSeeBlock(block)
1609 | 
1610 | Возвращает `true` или `false`, в зависимости от того,
1611 | видит ли бот указанный блок, или нет.
1612 | 
1613 | #### bot.findBlocks(options)
1614 | 
1615 | Находит ближайшие блоки от заданной точки.
1616 | 
1617 |  * `options` - Параметры для поиска:
1618 |    - `point` - Начальная позиция поиска (центр). По умолчанию позиция бота.
1619 |    - `matching` - Функция, которая возращает `true`, если данный блок совпадает. Также поддерживает значение в виде ID блока или массива с ID нескольких блоков.
1620 |    - `useExtraInfo` - Для сохранения обратной совместимости может привести к двум вариантам поведения в зависимости от типа
1621 |       - **boolean** - Предсталяет функции `matching` больше информации - медленнее.
1622 |       - **function** - Создаёт двойную функцию проверки, если блок проходит через функцию `matching`, то далее проходит через `useExtraInfo` с дополнительной информацией.
1623 |    - `maxDistance` - Самое дальнее расстояние для поиска, по умолчанию 16.
1624 |    - `count` - Количество блоков, которые нужно найти. По умолчанию 1. Может вернуть меньше, если будет найдено недостаточно блоков.
1625 | 
1626 | Возвращает массив (может быть пустым) с координатами найденных блоков (не сами блоки). Массив отсортирован (от ближайших до дальних блоков).
1627 | 
1628 | #### bot.findBlock(options)
1629 | 
1630 | То же самое, что и `bot.blockAt(bot.findBlocks(options)[0])`. Возращает один блок, либо `null`.
1631 | 
1632 | #### bot.canDigBlock(block)
1633 | 
1634 | Возвращает, можно ли сломать блок и находится ли в пределах диапозона бота.
1635 | 
1636 | #### bot.recipesFor(itemType, metadata, minResultCount, craftingTable)
1637 | 
1638 | Возвращает список рецептов(`Recipe`), которые вы можете использовать для крафта
1639 | предмета(`itemType`) с мета-данными(`metadata`).
1640 | 
1641 |  * `itemType` - Числовой ID предмета, который вы хотите создать.
1642 |  * `metadata` - Числовое значение мета-данных создаваемого предмета, `null` соответствует любым мета-данным
1643 |  * `minResultCount` - Количество создаваемых предметов, на основе ресурсов из вашего инвентаря, `null` эквивалентно 1 предмету.
1644 |  * `craftingTable` - Верстак (или подобный блок) в виде экземпляра `Block`. Если `null`, то будут работать только те рецепты, которые можно выполнить в окне инвентаря.
1645 | 
1646 | #### bot.recipesAll(itemType, metadata, craftingTable)
1647 | 
1648 | То же, что и `bot.recipesFor`, но без проверки количества материала, требуемого для изготовления предмета.
1649 | 
1650 | #### bot.nearestEntity(match = (entity) => { return true })
1651 | 
1652 | Возвращает ближайшее к боту существо, подходящий по функции (по умолчанию находит любое существо). Возвращает `null`, если существо не найдено.
1653 | 
1654 | Пример:
1655 | ```js
1656 | const cow = bot.nearestEntity(entity => entity.name.toLowerCase() === 'cow') // используем .toLowercase(), потому что в 1.8 "cow" пишется с большой буквы, что может вызвать несовместимость с новыми версиями
1657 | ```
1658 | 
1659 | ### Methods
1660 | 
1661 | #### bot.end(reason)
1662 | 
1663 | Закрывает соединение с сервером.
1664 | * `reason` - Необязательная строка, в которой указывается причина отключения.
1665 | 
1666 | #### bot.quit(reason)
1667 | 
1668 | Принудительно завершает соединение по собственной причине (по умолчанию `'disconnect.quitting'`).
1669 | 
1670 | #### bot.tabComplete(str, [assumeCommand], [sendBlockInSight])
1671 | 
1672 | Эта функция возвращает `Promise` с `matches` в качестве аргумента при завершении.
1673 | 
1674 | Запрашивает подсказки к командам/аргументам в чате от сервера.
1675 | 
1676 |  * `str` - Строка для завершения через подсказки.
1677 |  * `assumeCommand` - Поле отправляемое серверу, по умолчанию `false`.
1678 |  * `sendBlockInSight` - Поле отправляемое серверу, по умолчанию `true`. Установите для этого параметра значение `false`, если вы хотите повысить производительность.
1679 | 
1680 | #### bot.chat(message)
1681 | 
1682 | Отправляет сообщение в чат. При необходимости разбивает большое сообщение на несколько маленьких.
1683 | 
1684 | #### bot.whisper(username, message)
1685 | 
1686 | Аналог "/tell <никнейм>". Все разделенные сообщения будут отправлятся пользователю.
1687 | 
1688 | #### bot.chatAddPattern(pattern, chatType, description)
1689 | 
1690 | Неподдерживается, используйте `addChatPattern`.
1691 | 
1692 | Добавляет шаблон чата с помощью регулярных выражений. Полезно, если формат чата сильно меняется за счёт плагинов.
1693 | 
1694 |  * `pattern` - Регулярное выражение для совпадения с сообщением.
1695 |  * `chatType` - Вид сообщения. Является названием события, который будет срабатывать при совпадении с шаблоном. Например: "chat" или "whisper".
1696 |  * `description` - Необязательно, описание шаблона.
1697 | 
1698 | #### bot.addChatPattern(name, pattern, chatPatternOptions)
1699 | 
1700 | ** то же самое, что и `bot.addChatPatternSet(name, [pattern], chatPatternOptions)`
1701 | 
1702 | Создаёт событие, который вызывается каждый раз, когда сообщение совпадает с шаблоном.
1703 | Событие будет называться `"chat:name"`, где название - это значение `name`
1704 | 
1705 | * `name` - Название, используемое для прослушивания события.
1706 | * `pattern` - Регулярное выражение для совпадения с сообщением.
1707 | * `chatPatternOptions` - Объект:
1708 |   * `repeat` - По умолчанию `true`. Нужно ли прослушивать событие после первого совпадения.
1709 |   * `parse` - Вместо самого сообщения, которое совпало с шаблоном, возвращает группы из регулярного выражения.
1710 |   * `deprecated` - (**нестабильно**) используется методом `bot.chatAddPattern` для сохранения совместимости, вероятно, будет удален.
1711 | 
1712 | Возвращает число, которое используется методом `bot.removeChatPattern()` лишь для того, чтобы можно было удалить этот шаблон.
1713 | 
1714 | #### bot.addChatPatternSet(name, patterns, chatPatternOptions)
1715 | 
1716 | Создаёт событие, который вызывается каждый раз, когда сообщения совпадают с шаблонами.
1717 | Событие будет называться `"chat:name"`, где название - это значение `name`.
1718 | * `name` - Название, используемое для прослушивания события.
1719 | * `patterns` - Массив с регулярными выражениями для совпадения с сообщениями.
1720 | * `chatPatternOptions` - Объект:
1721 |   * `repeat` - По умолчанию `true`. Нужно ли прослушивать событие после первого совпадения.
1722 |   * `parse` - Вместо самого сообщения, которое совпало с шаблоном, возвращает группы из регулярного выражения.
1723 | 
1724 | Возвращает число, которое используется методом `bot.removeChatPattern()` лишь для того, чтобы можно было удалить этот шаблон.
1725 | 
1726 | #### bot.removeChatPattern(name)
1727 | 
1728 | Удаляет шаблон(ы) чата.
1729 | * `name` - Строка или число.
1730 | 
1731 | Если `name` - строка, все шаблоны с этим названием будут удалены.
1732 | Если `name` - число, удаляет только определённый шаблон.
1733 | 
1734 | #### bot.awaitMessage(...args)
1735 | 
1736 | Промис, который срабатывает, когда сообщение совпадает с переданными аргументами.
1737 | 
1738 | Пример:
1739 | 
1740 | ```js
1741 | async function wait () {
1742 |   await bot.awaitMessage('<flatbot> hello world') // срабатывает на "hello world" в чате от flatbot
1743 |   await bot.awaitMessage(['<flatbot> hello', '<flatbot> world']) // срабатывает на "hello" или "world" в чате от flatbot
1744 |   await bot.awaitMessage(['<flatbot> hello', '<flatbot> world'], ['<flatbot> im', '<flatbot> batman']) // срабатывает на "hello" или "world" или "im" или "batman" в чате от flatbot
1745 |   await bot.awaitMessage('<flatbot> hello', '<flatbot> world') // срабатывает на "hello" или "world" в чате от flatbot
1746 |   await bot.awaitMessage(/<flatbot> (.+)/) // срабатывает на первое сообщение подходящее по шаблону
1747 | }
1748 | ```
1749 | 
1750 | #### bot.setSettings(options)
1751 | 
1752 | Устанавливает значения для `bot.settings`.
1753 | 
1754 | #### bot.loadPlugin(plugin)
1755 | 
1756 | Загружает плагин. Ничего не делает, если плагин уже был загружен.
1757 | 
1758 |  * `plugin` - Функция.
1759 | 
1760 | ```js
1761 | function somePlugin (bot, options) {
1762 |   function someFunction () {
1763 |     bot.chat('Yay!')
1764 |   }
1765 |   bot.someFunction = someFunction
1766 | }
1767 | 
1768 | const bot = mineflayer.createBot({})
1769 | bot.loadPlugin(somePlugin)
1770 | bot.once('login', () => {
1771 |   bot.someFunction() // Yay!
1772 | })
1773 | ```
1774 | 
1775 | #### bot.loadPlugins(plugins)
1776 | 
1777 | О загрузке плагинов смотрите в `bot.loadPlugin`.
1778 |  * `plugins` - Массив функций.
1779 | 
1780 | #### bot.hasPlugin(plugin)
1781 | 
1782 | Проверяет, загружен ли плагин (или планирует загружаться) для данного бота.
1783 | 
1784 | #### bot.sleep(bedBlock)
1785 | 
1786 | Эта функция возвращает `Promise` с `void` в качестве аргумента при завершении.
1787 | 
1788 | Отправляет бота спать. `bedBlock` должен быть экземпляром `Block`, который является кроватью.
1789 | 
1790 | #### bot.isABed(bedBlock)
1791 | 
1792 | Возвращает `true`, если `bedBlock` является кроватью.
1793 | 
1794 | #### bot.wake()
1795 | 
1796 | Эта функция возвращает `Promise` с `void` в качестве аргумента при завершении.
1797 | 
1798 | Поднимает бота с кровати.
1799 | 
1800 | #### bot.setControlState(control, state)
1801 | 
1802 | Это основной способ управлять ботом. Работает как нажатия кнопок в майнкрафте.
1803 | Например, `forward` со значением `true` будет перемещать бота вперёд. `forward` со значением `false` остановит бота от движения вперёд.
1804 | Вы можете использовать `bot.lookAt` вместе с этой функцией. jumper.js показывает на примере, как это можно использовать.
1805 | 
1806 |  * `control` - Одно из ['forward', 'back', 'left', 'right', 'jump', 'sprint', 'sneak'].
1807 |  * `state` - `true` или `false`.
1808 | 
1809 | #### bot.getControlState(control)
1810 | 
1811 | Возращает `true`, если определённый элемент управления включен.
1812 | 
1813 | * `control` - Одно из ['forward', 'back', 'left', 'right', 'jump', 'sprint', 'sneak'].
1814 | 
1815 | #### bot.clearControlStates()
1816 | 
1817 | Отключает элементы управления.
1818 | 
1819 | #### bot.getExplosionDamages(entity, position, radius, [rawDamages])
1820 | 
1821 | Возвращает, какой урон будет нанесен существу в радиусе вокруг места взрыва.
1822 | Будет возвращать `null`, если у существа нет брони и `rawDamages` является `true`, потому что функция не может рассчитать урон с броней без самой брони.
1823 | 
1824 | * `entity` - Экземпляр существа.
1825 | * `position` - Экземпляр [Vec3](https://github.com/andrewrk/node-vec3).
1826 | * `radius` - Радиус взрыва в виде числа.
1827 | * `rawDamages` - Необязательно, если `true`, то при рассчётах не считает броню.
1828 | 
1829 | #### bot.lookAt(point, [force])
1830 | 
1831 | Эта функция возвращает `Promise` с `void` в качестве аргумента, когда вы смотрите в указанную точку.
1832 | 
1833 |  * `point` - Экземпляр [Vec3](https://github.com/andrewrk/node-vec3). Поворачивает голову к указанной точке.
1834 |  * `force` - Смотрите `force` в `bot.look`.
1835 | 
1836 | #### bot.look(yaw, pitch, [force])
1837 | 
1838 | Эта функция возвращает `Promise` с `void` в качестве аргумента, когда вы смотрите с указанным `yaw` и `pitch`.
1839 | 
1840 | Устанавливает направление головы.
1841 | 
1842 |  * `yaw` - Количество радианов по горизонтальной оси, начиная с востока по часовой стрелке.
1843 |  * `pitch` - Количество радианов для поворота вверх или вниз. `0`  - строго вперед. `pi / 2` - смотреть вверх. `-pi / 2` - смотреть вниз.
1844 |  * `force` - Если установлен `true`, плавного поворота не будет. Укажите значение `true`,
1845 |  если хотите передать серверу куда вы целитесь, например при бросании предметов или выстреле с лука. Это не требуется для вычислений на стороне клиента, таких как направление ходьбы.
1846 | 
1847 | #### bot.updateSign(block, text, back = false)
1848 | 
1849 | Изменяет текст на табличке. В Майнкрафте 1.20 и выше будет пытаться изменить текст с обратной стороны, если табличка не прикреплена к стене (Значение `back`).
1850 | 
1851 | #### bot.equip(item, destination)
1852 | 
1853 | Эта функция возвращает `Promise` с `void` в качестве аргумента, когда вы надели предмет или когда узнаёте, что вам не удалось надеть предмет.
1854 | 
1855 | Надевает предмет из вашего инвентаря. Если аргумент `item` является экземпляром `Item`, то функция будет пытаться надеть указанный предмет из слота окна. Если аргумент `item` является числом, то функция будет пытаться надеть первый попавшийся предмет в инвентаре с этим ID. (Проверка хотбара идёт последней. Слоты брони, крафта, результата крафта и второй руки не проверяются).
1856 | 
1857 |  * `item` - Экземпляр `Item` или число с ID предмета. Смотрите `window.items()`.
1858 |  * `destination`
1859 |    - `"hand"` - (ведущая рука) `null` альтернатива к этому.
1860 |    - `"head"` - (шлем)
1861 |    - `"torso"` - (нагрудник)
1862 |    - `"legs"` - (поножи)
1863 |    - `"feet"` - (ботинки)
1864 |    - `"off-hand"` - (вторая рука) Если доступно.
1865 | 
1866 | #### bot.unequip(destination)
1867 | 
1868 | Эта функция возвращает `Promise` с `void` в качестве аргумента при завершении.
1869 | 
1870 | Снимает предмет.
1871 | 
1872 | #### bot.tossStack(item)
1873 | 
1874 | Эта функция возвращает `Promise` с `void` в качестве аргумента при выбрасывании.
1875 | 
1876 |  * `item` - Cтак предметов, которые вы хотите выбросить.
1877 | 
1878 | #### bot.toss(itemType, metadata, count)
1879 | 
1880 | Эта функция возвращает `Promise` с `void` в качестве аргумента при одном выбрасывании.
1881 | 
1882 |  * `itemType` - Числовой ID предмета, который вы хотите выбросить.
1883 |  * `metadata` - Мета-данные предмета. Используйте `null`, чтобы выбрать любые мета-данные.
1884 |  * `count` - Количество предметов, которые вы хотите выбросить. `null` равно `1`.
1885 | 
1886 | #### bot.elytraFly()
1887 | 
1888 | Эта функция возвращает `Promise` с `void` в качестве аргумента при завершении полёта на элитрах.
1889 | В случае сбоя выдаёт сообщение об ошибке.
1890 | 
1891 | #### bot.dig(block, [forceLook = true], [digFace])
1892 | 
1893 | Эта функция возвращает `Promise` с `void` в качестве аргумента, когда блок был сломан или разрушение было прервано.
1894 | 
1895 | Начинает ломать блок предметом, который находится в руке.
1896 | Смотрите также события `"diggingCompleted"` и `"diggingAborted"`.
1897 | 
1898 | Обратите внимание, что вы не сможете ломать другие блоки, пока выбранный блок не будет сломан, либо не будет вызвана функция `bot.stopDigging()`.
1899 | 
1900 |  * `block` - Блок, который нужно сломать.
1901 |  * `forceLook` - (необязательно) если `true`, сразу смотрит на блок и начинает ломать. Если `true`, бот плавно поворачивается к блоку, который нужно сломать. Кроме того, можно присвоить значение `'ignore'`, чтобы бот вообще не двигал головой. Также можно присвоить значение `'raycast'` для поворота головы бота до места, куда бот смотрит.
1902 |  * `digFace` - (необязательно) По умолчанию `'auto'`, смотрит на центр блока и ломает верхнюю грань. Также может быть вектором vec3 для направления бота при разрушении блока. Например: ```vec3(0, 1, 0)```, когда копаешь сверху. Кроме того, может быть `'raycast'`, оно проверяет, видна ли сторона для бота и копает с этим направлением. Полезно для серверов с анти-читом.
1903 | 
1904 | #### bot.stopDigging()
1905 | 
1906 | Останавливает разрушение блока.
1907 | 
1908 | #### bot.digTime(block)
1909 | 
1910 | Покажет время, которое нужно потратить, чтобы сломать блок в миллисекундах.
1911 | 
1912 | #### bot.acceptResourcePack()
1913 | 
1914 | Подтверждает загрузку ресурс-пака.
1915 | 
1916 | #### bot.denyResourcePack()
1917 | 
1918 | Отклоняет загрузку ресурс-пака.
1919 | 
1920 | #### bot.placeBlock(referenceBlock, faceVector)
1921 | 
1922 | Эта функция возвращает `Promise` с `void` в качестве аргумента, когда сервер подтверждает, что блок поставлен.
1923 | 
1924 |  * `referenceBlock` - Блок, на котором вы хотите разместить свой блок.
1925 |  * `faceVector` - Одно из шести направлений (Например: `new Vec3(0, 1, 0)` для верхней грани), указывающее, на какую грань `referenceBlock` будет установлен новый блок.
1926 | 
1927 | Новый блок будет размещен на `referenceBlock.position.plus(faceVector)`.
1928 | 
1929 | #### bot.placeEntity(referenceBlock, faceVector)
1930 | 
1931 | Эта функция возвращает `Promise` с `Entity` в качестве аргумента при завершении.
1932 | 
1933 |  * `referenceBlock` - Блок, на котором вы хотите разместить существо.
1934 |  * `faceVector` - Одно из шести направлений (Например: `new Vec3(0, 1, 0)` для верхней грани), указывающее, на какую грань `referenceBlock` будет установлено существо.
1935 | 
1936 | Новое существо будет размещено на `referenceBlock.position.plus(faceVector)`.
1937 | 
1938 | #### bot.activateBlock(block, direction?: Vec3, cursorPos?: Vec3)
1939 | 
1940 | Эта функция возвращает `Promise` с `void` в качестве аргумента при завершении.
1941 | 
1942 | Ударяет нотный блок, открывает дверь и т.д.
1943 | 
1944 |  * `block` - Блок для активации.
1945 |  * `direction` - (необязательно) По умолчанию `new Vec3(0, 1, 0)` (сверху). Вектор, отвечающий с какой стороны будет активироваться блок. Ничего не делает, когда целью является существо-хранилище.
1946 |  * `cursorPos` - (необязательно) По умолчанию `new Vec3(0.5, 0.5, 0.5)` (центр блока). Является точкой, куда будет смотреть бот при активации блока. Отправляется с пакетом активации блока. Ничего не делает, когда целью является существо-хранилище.
1947 | 
1948 | #### bot.activateEntity(entity)
1949 | 
1950 | Эта функция возвращает `Promise` с `void` в качестве аргумента при завершении.
1951 | 
1952 | Нажимает на существо, например житель, или NPC.
1953 | 
1954 |  * `entity` - Существо для активации.
1955 | 
1956 | #### bot.activateEntityAt(entity, position)
1957 | 
1958 | Эта функция возвращает `Promise` с `void` в качестве аргумента при завершении.
1959 | 
1960 | Нажимает на существо с указанной позицией, полезно при взаимодействии с стойками для брони.
1961 | 
1962 |  * `entity` - Существо для активации.
1963 |  * `position` - Позиция для клика.
1964 | 
1965 | #### bot.consume()
1966 | 
1967 | Эта функция возвращает `Promise` с `void` в качестве аргумента при завершении употребления.
1968 | 
1969 | Съедает/выпивает предмет, который находится в руке.
1970 | 
1971 | #### bot.fish()
1972 | 
1973 | Эта функция возвращает `Promise` с `void` в качестве аргумента при завершении рыбалки.
1974 | 
1975 | Использует удочку.
1976 | 
1977 | #### bot.activateItem(offHand=false)
1978 | 
1979 | Активирует предмет, который находится в руке. Используется для выстрела из лука, бросания яиц, использования фейерверков и т.д.
1980 | 
1981 |  * `offHand` - Во второй ли руке находится предмет для активации.
1982 | 
1983 | #### bot.deactivateItem()
1984 | 
1985 | Деактивирует предмет, который находится в руке. Например для прекращения натягивания тетевы лука и т.д.
1986 | 
1987 | #### bot.useOn(targetEntity)
1988 | 
1989 | Использует предмет, который находится в руке, на существе. Например, одеть седло или использовать ножницы.
1990 | 
1991 | #### bot.attack(entity, swing = true)
1992 | 
1993 | Атакует игрока или моба.
1994 | 
1995 |  * `entity` - Тип существа. Чтобы получить конкретное существо, используйте [bot.nearestEntity()](#botnearestentitymatch--entity---return-true-) или [bot.entities](#botentities).
1996 |  * `swing` - По умолчанию `true`. Если `false` анимация руки при ударе не будет отображаться.
1997 | 
1998 | #### bot.swingArm([hand], showHand)
1999 | 
2000 | Проигрывает анимацию руки при ударе.
2001 | 
2002 |  * `hand` - Может быть `left` или `right`, в зависимости от того, какую руку нужно анимировать. По умолчанию: `right`.
2003 |  * `showHand` - Нужно ли добавлять руку в пакет. По умолчанию: `true`.
2004 | 
2005 | #### bot.mount(entity)
2006 | 
2007 | Сесть в транспортное средство. Чтобы слезть, используйте `bot.dismount`.
2008 | 
2009 | #### bot.dismount()
2010 | 
2011 | Вылезти из транспортного средства.
2012 | 
2013 | #### bot.moveVehicle(left,forward)
2014 | 
2015 | Двигаться в транспортном средстве:
2016 | 
2017 |  * `left` - Может быть -1 или 1 : -1 означает вправо, 1 означает влево.
2018 |  * `forward` - Может быть -1 или 1 : -1 означает назад, 1 означает вперед.
2019 | 
2020 | Направление относительно того, куда смотрит бот.
2021 | 
2022 | #### bot.setQuickBarSlot(slot)
2023 | 
2024 | Выбирает слот в хотбаре.
2025 | 
2026 |  * `slot` - Слот в хотбаре (0-8).
2027 | 
2028 | #### bot.craft(recipe, count, craftingTable)
2029 | 
2030 | Эта функция возвращает `Promise` с `void` в качестве аргумента при завершении крафта и обновлении инвентаря.
2031 | 
2032 |  * `recipe` - Рецепт крафта (экземпляр `Recipe`). Смотрите `bot.recipesFor`.
2033 |  * `count` - Количество операций для крафта. Например: Если вы хотите скрафтить 8 палок из досок, вы должны установить `count` на `2`. `null` является `1`.
2034 |  * `craftingTable` - Блок верстака (экземпляр `Block`), Вы можете использовать `null`, если рецепт можно использовать в инвентаре.
2035 | 
2036 | #### bot.writeBook(slot, pages)
2037 | 
2038 | Эта функция возвращает `Promise` с `void` в качестве аргумента, когда написание было выполнено успешно или произошла ошибка.
2039 | 
2040 |  * `slot` - Слот в инвентаре (например, 36 - первый слот в хотбаре).
2041 |  * `pages` - Массив со страницами.
2042 | 
2043 | #### bot.openContainer(containerBlock or containerEntity, direction?, cursorPos?)
2044 | 
2045 | Открывает хранилище блока или существа.
2046 | 
2047 |  * `containerBlock` или `containerEntity` - Экземпляр блока или существа для открытия.
2048 |  * `direction` - (необязательно) По умолчанию `new Vec3(0, 1, 0)` (сверху). Вектор, отвечающий с какой стороны будет активироваться блок. Ничего не делает, когда целью является существо-хранилище.
2049 |  * `cursorPos` - (необязательно) По умолчанию `new Vec3(0.5, 0.5, 0.5)` (центр блока). Является точкой, куда будет смотреть бот при активации блока. Отправляется с пакетом активации блока. Ничего не делает, когда целью является существо-хранилище.
2050 | 
2051 | Вовзращает `Promise` с экземпляром `Container`, которое представляет хранилище, которое вы открываете.
2052 | 
2053 | #### bot.openChest(chestBlock or minecartchestEntity, direction?, cursorPos?)
2054 | 
2055 | Устарело. То же самое, что `openContainer`.
2056 | 
2057 | #### bot.openFurnace(furnaceBlock)
2058 | 
2059 | Возвращает `Promise` с экземпляром `Furnace`, представляющий печь, которую вы открываете.
2060 | 
2061 | #### bot.openDispenser(dispenserBlock)
2062 | 
2063 | Устарело. То же самое, что `openContainer`.
2064 | 
2065 | #### bot.openEnchantmentTable(enchantmentTableBlock)
2066 | 
2067 | Возвращает `Promise` с экземпляром `EnchantmentTable`, представляющий стол зачарований, который вы открываете.
2068 | 
2069 | #### bot.openAnvil(anvilBlock)
2070 | 
2071 | Возвращает `Promise` с экземпляром `anvil`, представляющий наковальню, которую вы открываете.
2072 | 
2073 | #### bot.openVillager(villagerEntity)
2074 | 
2075 | Возвращает `Promise` с экземпляром `Villager`, представляющий жителя, с которым вы торгуете.
2076 | Вы можете прослушивать события `ready` для этого `Villager`, чтобы знать, когда он готов торговаться.
2077 | 
2078 | #### bot.trade(villagerInstance, tradeIndex, [times])
2079 | 
2080 | Эта функция возвращает `Promise` с `void` в качестве аргумента при завершении.
2081 | 
2082 |  * `villagerInstance` - Житель, с которым вы торгуете.
2083 |  * `tradeIndex` - Номер предложения.
2084 |  * `times` - Сколько раз произвести торговлю.
2085 | 
2086 | #### bot.setCommandBlock(pos, command, [options])
2087 | 
2088 | Устанавливает настройки командного блока в позиции `pos`.
2089 | Пример аргумента `options`:
2090 | 
2091 | ```js
2092 | {
2093 |   mode: 2,
2094 |   trackOutput: true,
2095 |   conditional: false,
2096 |   alwaysActive: true
2097 | }
2098 | ```
2099 | 
2100 | `options.mode` может иметь 3 значения: 0 (Цепной), 1 (Цикличный), 2 (Импульсный)
2101 | Все дополнительные настройки по умолчанию `false`, кроме `mode`, который равен 2 (для повторения командного блока по умолчанию в Майнкрафте).
2102 | 
2103 | #### bot.supportFeature(name)
2104 | 
2105 | Может использоваться для проверки особой для текущей версии Майнкрафт возможности. Обычно это требуется только для обработки функций, зависящих от версии.
2106 | 
2107 | Список возможностей можно найти в файле [./lib/features.json](https://github.com/PrismarineJS/mineflayer/blob/master/lib/features.json).
2108 | 
2109 | #### bot.waitForTicks(ticks)
2110 | 
2111 | Это функция основана на промисе. Она ожидает определённое количество игровых тиков перед продолжением. Может быть полезно для быстрых таймеров, который требуют особых задержек, независимо от заданной физической скорости тиканья бота. Это похоже на стандартную функцию Javascript `setTimeout`, но выполняется специально по физическому таймеру бота.
2112 | 
2113 | ### Методы инвентаря низкого уровня
2114 | 
2115 | Эти методы могут быть иногда полезны, но мы рекомендуем использовать методы, описанные выше.
2116 | 
2117 | #### bot.clickWindow(slot, mouseButton, mode)
2118 | 
2119 | Эта функция возвращает `Promise` с `void` в качестве аргумента при завершении.
2120 | 
2121 | Единственное действительное значение для `mode` - 0. Нажатие с шифтом или перемещение через мышь не реализовано.
2122 | 
2123 | Нажимает на текущее окно. Подробнее - https://wiki.vg/Protocol#Click_Container
2124 | 
2125 | Рекомендуется использовать `bot.simpleClick.*`
2126 | 
2127 | #### bot.putSelectedItemRange(start, end, window, slot)
2128 | 
2129 | Эта функция возвращает `Promise` с `void` в качестве аргумента при завершении.
2130 | 
2131 | Помещает предмет в слот в указаном диапазоне.
2132 | 
2133 | #### bot.putAway(slot)
2134 | 
2135 | Эта функция возвращает `Promise` с `void` в качестве аргумента при завершении.
2136 | 
2137 | Помещает предмет в слот инвентаря.
2138 | 
2139 | #### bot.closeWindow(window)
2140 | 
2141 | Закрывает окно.
2142 | 
2143 | #### bot.transfer(options)
2144 | 
2145 | Эта функция возвращает `Promise` с `void` в качестве аргумента при завершении.
2146 | 
2147 | Перемещает предмет с одного диапазона в другой. `options` это объект, содержащий :
2148 | 
2149 |  * `window` : (необязательно) Окно, куда требуется положить предмет.
2150 |  * `itemType` : Тип предмета.
2151 |  * `metadata` : (необязательно) Мета-данные предмета.
2152 |  * `sourceStart` и `sourceEnd` : Старый диапозон. `sourceEnd` необязателен и будет по умолчанию равен `sourceStart` + 1.
2153 |  * `destStart` и `destEnd` : Новый диапозон. `destEnd` необязателен и будет по умолчанию равен `destStart` + 1.
2154 |  * `count` : Количество предметов. По умолчанию: `1`.
2155 |  * `nbt` : Нбт-данные предмета. По умолчанию: `nullish` (игнорирует нбт).
2156 | 
2157 | #### bot.openBlock(block, direction?: Vec3, cursorPos?: Vec3)
2158 | 
2159 | Открывает блок, например сундук. Возвращает `Promise` с открытым окном (`Window`).
2160 | 
2161 |  * `block` - Блок, который нужно открыть боту.
2162 |  * `direction` - (необязательно) По умолчанию `new Vec3(0, 1, 0)` (сверху). Вектор, отвечающий с какой стороны будет активироваться блок. Ничего не делает, когда целью является существо-хранилище.
2163 |  * `cursorPos` - (необязательно) По умолчанию `new Vec3(0.5, 0.5, 0.5)` (центр блока). Является точкой, куда будет смотреть бот при активации блока. Отправляется с пакетом активации блока. Ничего не делает, когда целью является существо-хранилище.
2164 | 
2165 | #### bot.openEntity(entity)
2166 | 
2167 | Открывает GUI существа, например жителя. Возвращает `Promise` с открытым окном (`Window`).
2168 | 
2169 |  * `entity` - Существо, GUI которого нужно открыть.
2170 | 
2171 | #### bot.moveSlotItem(sourceSlot, destSlot)
2172 | 
2173 | Эта функция возвращает `Promise` с `void` в качестве аргумента при завершении.
2174 | 
2175 | Помещает предмет со слота `sourceSlot` в слот `destSlot` в открытом окне.
2176 | 
2177 | #### bot.updateHeldItem()
2178 | 
2179 | Обновляет `bot.heldItem`.
2180 | 
2181 | #### bot.getEquipmentDestSlot(destination)
2182 | 
2183 | Получает ID слота экипировки по названию.
2184 | 
2185 | Доступны:
2186 |  * head (шлем)
2187 |  * torso (нагрудник)
2188 |  * legs (поножи)
2189 |  * feet (ботинки)
2190 |  * hand (главная рука)
2191 |  * off-hand (вторая рука)
2192 | 
2193 | ### bot.creative
2194 | 
2195 | Эта коллекция API полезна в творческом режиме.
2196 | Обнаружение и изменение игровых режимов здесь не реализовано, но предполагается и часто требуется, чтобы бот находился в творческом режиме для работы этих функций.
2197 | 
2198 | #### bot.creative.setInventorySlot(slot, item)
2199 | 
2200 | Эта функция возвращает `Promise` с `void` в качестве аргумента, когда сервер выдаёт предмет в слот.
2201 | 
2202 | Выдёт боту указанный предмет в слоте инвентаря.
2203 | 
2204 |  * `slot` - Номер слота (например: 36 - первый слот в хотбаре).
2205 |  * `item` - Экземпляр [prismarine-item](https://github.com/PrismarineJS/prismarine-item), содержащий мета-данные, нбт-данные и т.д.
2206 |     Если `item` равен `null`, предмет в указанном слоте удаляется.
2207 | 
2208 | Если этот метод что-либо изменит, вы можете узнать об этом через `bot.inventory.on("updateSlot")`.
2209 | 
2210 | #### bot.creative.clearSlot(slot)
2211 | 
2212 | Эта функция возвращает `Promise` с `void` в качестве аргумента, когда сервер очищает слот.
2213 | 
2214 | Устанавливает значение `null` для предмета в заданном слоте.
2215 | 
2216 |  * `slot` - Номер слота (например: 36 - первый слот в хотбаре).
2217 | 
2218 | #### bot.creative.clearInventory()
2219 | 
2220 | Эта функция возвращает `Promise` с `void` в качестве аргумента, когда сервер очищает слоты.
2221 | 
2222 | #### bot.creative.flyTo(destination)
2223 | 
2224 | Эта функция возвращает `Promise` с `void` в качестве аргумента, когда бот достигает точки назначения.
2225 | 
2226 | Вызывает `startFlying()` и движется к месту назначения по прямой.
2227 | `destination` - это `Vec3`. Координаты `x` и `z` обычно заканчиваются на `.5`.
2228 | Функция не будет работать, если на пути присутствуют препятствия.
2229 | Рекомендуется отправлять на небольшие расстояния.
2230 | 
2231 | Этот метод не пытается найти путь до точки.
2232 | Ожидается, что реализация поиска пути будет использовать этот метод для перемещения на <2 блоков одновременно.
2233 | 
2234 | Чтобы остановить полет, используйте `stopFlying()`.
2235 | 
2236 | #### bot.creative.startFlying()
2237 | 
2238 | Устанавливает `bot.physics.gravity` на `0`.
2239 | Чтобы остановить полет, используйте `stopFlying()`.
2240 | 
2241 | Этот метод полезен, если вы хотите летать, копая землю под собой.
2242 | Нет необходимости вызывать эту функцию перед вызовом `flyTo()`.
2243 | 
2244 | Обратите внимание, что во время полета `bot.entity.velocity` не будет точным.
2245 | 
2246 | #### bot.creative.stopFlying()
2247 | 
2248 | Восстанавливает `bot.physics.gravity` к исходному значению.
2249 | 


--------------------------------------------------------------------------------
/docs/ru/demos_ru.md:
--------------------------------------------------------------------------------
 1 | ## mineflayer-navigate
 2 | 
 3 | [navigate](https://github.com/andrewrk/mineflayer-navigate/) - Лёгкое передвижение с помощью поиска путей уровня A*.
 4 | 
 5 | <iframe type="text/html" width="640" height="360" src="http://www.youtube.com/embed/O6lQdmRz8eE" frameborder="0"></iframe>
 6 | 
 7 | ## rbot
 8 | 
 9 | [rom1504/rbot](https://github.com/rom1504/rbot) - Умный бот, созданный на основе mineflayer.
10 | 
11 | <iframe type="text/html" width="640" height="360" src="http://www.youtube.com/embed/0cQxg9uDnzA" frameborder="0"></iframe>
12 | 
13 | ## chaoscraft
14 | 
15 | [Chaoscraft](https://github.com/schematical/chaoscraft) - Майнкрафт бот, использующий генетические алгоритмы.
16 | 
17 | 
18 | ​<iframe width="640" height="360" src="https://www.youtube.com/embed/videoseries?list=PLLkpLgU9B5xJ7Qy4kOyBJl5J6zsDIMceH" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>


--------------------------------------------------------------------------------
/docs/ru/index.html:
--------------------------------------------------------------------------------
 1 | <!DOCTYPE html>
 2 | <html lang="en">
 3 | <head>
 4 |   <meta charset="UTF-8">
 5 |   <title>Mineflayer - создавайте Майнкрафт ботов с помощью стабильного и высокоуровневого API</title>
 6 |   <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
 7 |   <meta name="description" content="Создавайте Майнкрафт ботов с помощью стабильного и высокоуровневого API">
 8 |   <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
 9 |   <link rel="stylesheet" href="//unpkg.com/docsify/lib/themes/vue.css">
10 |     <style>
11 |         .markdown-section {
12 |             max-width:1400px;
13 |         }
14 |     </style>
15 |     <!-- Global site tag (gtag.js) - Google Analytics -->
16 |     <script async src="https://www.googletagmanager.com/gtag/js?id=UA-128628977-3"></script>
17 |     <script>
18 |       window.dataLayer = window.dataLayer || [];
19 |       function gtag(){dataLayer.push(arguments);}
20 |       gtag('js', new Date());
21 | 
22 |       gtag('config', 'UA-128628977-3');
23 |     </script>
24 | </head>
25 | <body>
26 |   <div id="app"></div>
27 |   <script>
28 |     window.$docsify = {
29 |       name: 'mineflayer',
30 |       repo: 'https://github.com/PrismarineJS/mineflayer',
31 |       loadSidebar: true,
32 |       subMaxLevel: 2,
33 |       auto2top: true
34 |     }
35 |   </script>
36 |   <script src="//unpkg.com/docsify/lib/docsify.min.js"></script>
37 | </body>
38 | </html>
39 | 


--------------------------------------------------------------------------------
/docs/ru/tutorial_ru.md:
--------------------------------------------------------------------------------
  1 | # Туториал
  2 | 
  3 | **Содержание**
  4 | 
  5 | - [Вступление](#вступление)
  6 | - [Основы](#основы)
  7 |   - [Основы Javascript](#основы-javascript)
  8 |     - [Установка Node](#установка-node)
  9 |     - [Переменные в Javascript](#переменные-в-javascript)
 10 |     - [Получение ответа](#получение-ответа)
 11 |     - [Функции в Javascript](#функции-javascript)
 12 |     - [Типы данных в Javascript](#типы-данных-в-javascript)
 13 |     - [Условные конструкции](#условные-конструкции)
 14 |     - [Циклы](#циклы)
 15 |     - [Node Package Manager](#node-package-manager)
 16 |   - [Создание бота](#создание-бота)
 17 |     - [Объекты в Javascript](#объекты-в-javascript)
 18 |     - [Присоединение](#присоединение)
 19 |     - [Аргументы командной строки](#аргументы-командной-строки)
 20 |   - [Передача функций](#передача-функций)
 21 |   - [Прослушивание событий](#прослушивание-событий)
 22 |   - [Промисы](#промисы)
 23 |     - [Правильный и неправильный подход](#правильный-и-неправильный-подход)
 24 | - [Продвинутым](#продвинутым)
 25 |   - [Цикл для объекта](#цикл-для-объекта)
 26 |   - [Создание события для чата](#создание-события-для-чата)
 27 |     - [Приветствующий бот](#приветствующий-бот)
 28 |     - [Нестандартный формат чата](#нестандартный-формат-чата)
 29 | - [ЧаВо](#чаво)
 30 |   - [Как запустить бота на Android](#как-запустить-бота-на-android)
 31 |     - [Установка Termux](#установка-termux)
 32 |     - [Настройка](#настройка)
 33 |     - [Запуск вашего бота](#запуск-вашего-бота)
 34 | 
 35 | ## Вступление
 36 | 
 37 | Этот туториал поможет вам начать работать с Mineflayer, даже если вы ничего не знаете о программировании.  
 38 | Если вы уже знаете что-то о Node и NPM, вы можете сразу переходить к разделу [Создание бота](#создание-бота).
 39 | 
 40 | ## Основы
 41 | 
 42 | Следующие разделы посвящены основным понятиям, которые вам необходимо знать, чтобы начать использовать Mineflayer.
 43 | 
 44 | ### Основы Javascript
 45 | 
 46 | #### Установка Node
 47 | 
 48 | В этом разделе вы научитесь основам Javascript, Node и NPM.
 49 | 
 50 | Javascript (сокращённо JS) - это язык программирования, созданный для Интернета. Это то, что делает возможным максимальный уровень взаимодействия в Интернете.  
 51 | Node.js, часто просто Node, позволяет использовать Javascript вне веб-браузеров.
 52 | 
 53 | Для начала, вам нужно установить Node. Вы можете это сделать [здесь](https://nodejs.org/ru/download/).  
 54 | После установки откройте командную строку (также известную как терминал) и затем введите `node -v`  
 55 | Если вы всё сделали правильно, то вам напишет версию Node. Если вам написало о том, что команда не найдена, попробуйте установить ещё раз.
 56 | 
 57 | Теперь у вас есть Node, вы можете начать писать код, но вам нужно кое-что ещё.  
 58 | Javascript был написан в примитивном текстовом редакторе, но легче использовать [Интегрированную среду разработки](https://ru.wikipedia.org/wiki/Интегрированная_среда_разработки)(IDE)  
 59 | IDE поможет вам в написании кода, потому что будет давать вам подсказки или указывать на ошибки в коде. Примером хорошей IDE является [Visual Studio Code](https://code.visualstudio.com/)(VSCode)  
 60 | После того как вы установили VSCode, создайте новый текстовый файл и сохраните его где-нибудь, а затем переименуйте его так, чтобы в конце была приписка `.js`. Например: `bot.js`  
 61 | Это сообщит VSCode о том, что вы работаете с Javascript, чтобы программа выдавала правильные подсказки.
 62 | 
 63 | #### Переменные в Javascript
 64 | 
 65 | Начните с этого:
 66 | 
 67 | ```js
 68 | const test = 5
 69 | ```
 70 | 
 71 | Это создаст переменную с названием `test` и выдаст ей значение `5`  
 72 | Переменные используются для хранения данных и использования их в коде.
 73 | 
 74 | Сохраните файл, теперь вы можете запустить этот код. Откройте терминал (или новый терминал в VSCode), затем выберите папку с вашим файлом. Для этого можно использовать команду `cd`. Например: `cd Documents\javascript`  
 75 | Теперь ваш терминал находится в той же папке, где и ваш файл, вы можете запустить его с помощью `node filename.js`  
 76 | Если вы всё сделали правильно, то вы ничего не будете видеть.  
 77 | В следующей главе мы покажем вам, как вы можете выводить данные в терминале.
 78 | 
 79 | В общем, использование `const` вместо `let` является нормальным при определении переменной. Переменная, определённая с помощью `const` не может быть изменена, так как является константой.  
 80 | Javascript сможет заставить ваш код работать более эффективно, потому что он знает, что ему не нужно учитывать изменения значения этой переменной.  
 81 | Если вы хотите изменяемую переменную, вы можете использовать `let`.
 82 | 
 83 | ```js
 84 | const test = 5
 85 | // eslint-disable-next-line
 86 | test = 10 // Эта строчка неправильная
 87 | ```
 88 | 
 89 | Вторая строчка неправильная, так как вы не можете перезаписать переменную `test`.
 90 | 
 91 | Если вы хотите помочь себе и другим людям в понимании вашего кода, то вы можете использовать комментарии.  
 92 | Чтобы написать комментарий вам нужно использовать `//`, всё после этого будет игнорироваться Javascript'ом.
 93 | 
 94 | #### Получение ответа
 95 | 
 96 | Довольно часто для того чтобы убедиться, что ваша программа работает правильно, вам нужно выводить значения переменных.  
 97 | Вы можете сделать это отображая переменные в терминале.  
 98 | В Javascript вы можете это сделать с помощью функции `console.log()`.  
 99 | 
100 | ```js
101 | const test = 5
102 | 
103 | console.log(test)
104 | ```
105 | 
106 | Теперь когда вы сохраните и запустите этот код, то наконец увидите:
107 | 
108 | ```txt
109 | 5
110 | ```
111 | 
112 | #### Функции в Javascript
113 | 
114 | Далее вы узнаете о функциях. Функции - это часть кода, которая может быть использована несколько раз в вашем коде.
115 | Это может быть полезно, потому что вам не нужно будет писать что-либо много раз.
116 | 
117 | ```js
118 | const addition = (a, b) => {
119 |   return a + b
120 | }
121 | 
122 | const test1 = addition(5, 10)
123 | const test2 = addition(1, 0)
124 | 
125 | console.log(test1)
126 | console.log(test2)
127 | ```
128 | 
129 | `=>` используется для определения функции, и называется стрелочным оператором.
130 | Перед стрелочным оператором находится список параметров, всё, что находится в круглых скобках `()` - это параметры, разделённые запятыми.  
131 | Параметры - это переменные, которые вы можете передать вашей функции, чтобы функция могла с ними работать.  
132 | Затем после оператора идёт тело функции, это всё, что находится в фигурных скобках `{}`  
133 | Это то место, где вы можете поместить свой код функции.  
134 | Теперь, когда функция готова, вы присваиваем её к переменной, чтобы дать имя. В нашем случае - `addition`  
135 | 
136 | Как вы можете видеть, код берёт в качестве параметров переменные `a` и `b`, а затем складывает их.  
137 | Затем функция возвращает результат.  
138 | Когда функция определена, код в теле функции не выполняется. Чтобы запустить функцию вам нужно вызвать её.
139 | Вы можете вызвать функцию, используя её имя, за которыми идут круглые скобки. В нашем случае - `addition()`  
140 | Однако для функции `addition` требуется 2 параметра. Их можно передать, добавив их в круглые скобки через запятую. В нашем случае - `addition(1, 2)`  
141 | Когда функция готова, вы можете Wпредставить, что вызов функции заменяется тем, что функция вернула. Таким образом, в этом случае `let test1 = addition(5, 10)` станет `let test1 = result` (На самом вы этого не увидите, но это может помочь вам понять концепцию).
142 | 
143 | Иногда вы столкнётесь со следующим: `function addition() {}` Это означает то же самое, но предпочтительнее использовать `() => {}`. (Если вы действительно хотите знать почему, загуглите 'javascript function vs arrow function')
144 | 
145 | Приведённый код выше должен вывести следующее:
146 | 
147 | ```txt
148 | 15
149 | 1
150 | ```
151 | 
152 | #### Типы данных в Javascript
153 | 
154 | До этого мы работали только с числами, но Javascript имеет множество других типов данных:
155 | 
156 | - Строка - это текст, который содержит множество символов. Строки объявляются с помощью `''`
157 | 
158 | ```js
159 | const string = 'This is a string' // string type
160 | ```
161 | 
162 | - Массив - это тип, который может хранить несколько других переменных. Массивы объявляются с помощью `[]`
163 | 
164 | ```js
165 | const array = [1, 2, 3] // array type
166 | ```
167 | - Объекты - это обычно продвинутые массивы, позже вы узнаете больше об этом типе в туториале. Они объявляются с помощью `{}`
168 | 
169 | ```js
170 | const object = {} // object type
171 | ```
172 | 
173 | - У функций есть свой собственный тип
174 | 
175 | ```js
176 | const adder = (a, b) => { return a + b } // function type
177 | ```
178 | 
179 | - Логический тип может быть `true` или `false`
180 | 
181 | ```js
182 | const boolean = true // boolean type
183 | ```
184 | 
185 | - Когда что-либо ещё не объявлено, оно имеет тип `undefined`
186 | 
187 | ```js
188 | let nothing // undefined type
189 | const notDefined = undefined // undefined type
190 | ```
191 | 
192 | #### Условные конструкции
193 | 
194 | Иногда вам придётся делать разные вещи, основываясь на определенном условии.  
195 | Это можно реализовать с помощью условных конструкций.
196 | 
197 | ```js
198 | const name = 'Боб'
199 | 
200 | if (name === 'Боб') {
201 |   console.log('Меня зовут Боб')
202 | } else if (name === 'Алиса') {
203 |   console.log('Меня зовут Алиса')
204 | } else {
205 |   console.log('Меня не зовут Боб или Алиса')
206 | }
207 | ```
208 | 
209 | Условные конструкции создаются с помощью `if`. После этого идёт условие с круглых скобках `()`, код находится в фигурных скобках `{}`  
210 | В условии должно быть что-то, что возвращает логический тип данных.  
211 | В нашем случае используется `===`, которое возвращает `true`, если значение значение слева равняется значению справа. Иначе будет `false`
212 | Если значение равно `true`, то код, соответствующий этому условию будет выполнен.  
213 | Вы можете продолжать цепочку условных конструкций используя `else if` и `else`.  
214 | Вы можете иметь столько условных конструкций с `else if`, сколько вы захотите, но можно использовать только только 1 `if` и `else`.  
215 | Если у вас присутствует `else`, то он будет вызываться только тогда, когда все остальные условия вернули `false`
216 | 
217 | #### Циклы
218 | 
219 | Циклы используются для повторения определенного кода до тех пор, пока не будет выполнено определенное условие.
220 | 
221 | ```js
222 | let countDown = 5
223 | 
224 | while (countDown > 0) {
225 |   console.log(countDown)
226 |   countDown = countDown - 1 // Понижаем значение countDown на 1
227 | }
228 | 
229 | console.log('Конец!')
230 | ```
231 | 
232 | Код выше будет выводить следующее:
233 | 
234 | ```txt
235 | 5
236 | 4
237 | 3
238 | 2
239 | 1
240 | Конец!
241 | ```
242 | 
243 | Цикл `while` имеет условие `()` и тело `{}`  
244 | Когда код доходит до цикла, он проверяет условие. Если условие равно `true`, то код в теле циклы будет выполнен.  
245 | Когда код в теле выполнен, условие проверяется ещё раз, и если оно равно `true`, код выполняется заново.  
246 | Это будет происходить до тех пор, пока условие равно `true`  
247 | Каждый цикл код выводит число `countDown`, а затем отнимает от него 1.  
248 | После 5 срабатывания, когда условие равно `0 > 0`, будет `false`, и тогда код будет продолжаться дальше.
249 | 
250 | Цикл `for` также часто используется и немного отличается от `while`.  
251 | 
252 | ```js
253 | for (let countDown = 5; countDown > 0; countDown = countDown - 1) {
254 |   console.log(countDown)
255 | }
256 | ```
257 | 
258 | Вместо одного условия, цикл содержит 3 разных части.  
259 | Эти части разделены точкой с запятой.  
260 | Первая часть - `let countDown = 5`, срабатывает только 1 раз, при запуске цикла.  
261 | Вторая часть - `countDown > 0`, условие, которое одинаково при каждом срабатывании цикла.  
262 | Третья часть -  `countDown = countDown - 1`, срабатывает при каждом срабатывании цикла.
263 | 
264 | Если вы хотите что-то сделать с каждым элементом массива, вы можете использовать цикл `for of`.  
265 | 
266 | ```js
267 | const array = [1, 2, 3]
268 | 
269 | for (const item of array) {
270 |   console.log(item)
271 | }
272 | ```
273 | 
274 | Цикл `for of` требует переменную перед `of`, это требуется для доступа к каждому элементу этой переменной.  
275 | Переменная после `of` нужна, чтобы хранить переменную. В основном это массивы, но также могут быть объектами.  
276 | Цикл будет выполняться для каждого элемента в `array`, и каждый раз переменная `item` будет являться элементом `array`.
277 | 
278 | #### Node Package Manager
279 | 
280 | Теперь вы узнаете как пользоваться [Node Package Manager](https://www.npmjs.com/)(NPM).  
281 | NPM автоматически устанавливается, когда вы устанавливаете Node.  
282 | NPM используется для получения библиотек, которые другие люди создали для удобства.  
283 | Вы можете посмотреть библиотеки на [сайте](https://www.npmjs.com/) и затем установить их, используя команду `npm install` в вашем терминале.  
284 | Например, чтобы скачать библиотеку Mineflayer, вам нужно прописать `npm install mineflayer`  
285 | 
286 | Теперь Node может получить доступ к установленной библиотеке с помощью функции `require()`.
287 | 
288 | ```js
289 | const mineflayer = require('mineflayer')
290 | ```
291 | 
292 | После этого будет доступна переменная `mineflayer`, представляющая все функции Mineflayer.
293 | 
294 | ### Создание бота
295 | 
296 | Теперь, когда вы знаете основы Javascript, Node и NPM, вы готовы к созданию вашего первого бота!  
297 | Если вы не знаете слов выше, то вернитесь к [предыдущему](#основы-javascript)
298 | 
299 | Снизу представлены начальные действия для создания бота.
300 | 
301 | ```js
302 | const mineflayer = require('mineflayer')
303 | 
304 | const bot = mineflayer.createBot()
305 | ```
306 | 
307 | Если вы запустите этот код, вы заметите, что программа не останавливатся. Если вы хотите остановить работающую программу, нажмите `Ctrl` + `c`  
308 | Однако этот бот не совсем полезен, так как по умолчанию он подключается к серверу Minecraft, работающему на вашем компьютере, с портом 25565.  
309 | Если вы хотите выбрать сервер, на который будет заходить бот, вам нужно прописать некоторые настройки.
310 | 
311 | 
312 | ```js
313 | const mineflayer = require('mineflayer')
314 | 
315 | const options = {
316 |   host: 'localhost', // Измените это на айпи сервера, который вам нужен.
317 |   port: 25565 // Измените это на порт сервера, который вам нужен.
318 | }
319 | 
320 | const bot = mineflayer.createBot(options)
321 | ```
322 | 
323 | #### Объекты в Javascript
324 | 
325 | Фигурные скобки `{}` используются для созданий объектов.  
326 | Объекты содержат значения в виде пар `ключ-значение`  
327 | Эти пары разделены с помощью `:`, где ключ перед двоеточием, а значение после двоеточия.  
328 | Ключи можно использовать для получения их значения.  
329 | Вы можете иметь несколько таких пар, разделённых запятыми.
330 | 
331 | ```js
332 | const object = {
333 |   number: 10,
334 |   another: 5
335 | }
336 | 
337 | console.log(object.number) // Выведет число 10
338 | ```
339 | 
340 | Эта концепция часто используется для создания так называемых 'именованных параметров'  
341 | Преимущество этого заключается в том, что вам не нужно использовать все доступные опции, и их расположение не имеет значения.  
342 | Значением может быть что угодно, даже другой объект. Если значение является функцией, то эта функция часто вызывается методом для этого объекта.  
343 | Вы также можете создать объект одной строкой.
344 | 
345 | ```js
346 | const bot = mineflayer.createBot({ host: 'localhost', port: 25565 })
347 | ```
348 | 
349 | #### Присоединение
350 | 
351 | Без каких либо параметров у бота будет ник `Player` и он сможет подключаться только к пиратским серверам(или LAN-сервера).  
352 | Если вы дополните `createBot` опцией `username`, то бот будет использовать указанный вами ник. (Всё ещё для пиратских серверов)  
353 | Чтобы зайти на конкретный лицензионный аккаунт, вы должны использовать `username` вместе с `password`
354 | 
355 | ```js
356 | const bot = mineflayer.createBot({
357 |   host: 'localhost',
358 |   port: 25565,
359 |   username: 'Player',
360 |   password: 'password'
361 | })
362 | ```
363 | 
364 | #### Аргументы командной строки
365 | 
366 | Что если кому-то понравится ваш бот и он захочет использовать его на другом сервере или с другим аккаунтом?  
367 | Это означает, что все смогут изменить айпи сервера и настройки входа как они захотят. (А также плохая идея передавать свой пароль)  
368 | Поэтому многие используют аргументы командной строки.
369 | 
370 | ```js
371 | const bot = mineflayer.createBot({
372 |   host: process.argv[2],
373 |   port: parseInt(process.argv[3]),
374 |   username: process.argv[4],
375 |   password: process.argv[5]
376 | })
377 | ```
378 | 
379 | Как вы видите, теперь ваши данные не используются в коде! Но как его запустить?  
380 | Теперь вместо того, чтобы запускать код через `node filename.js`, вы должны запускать его с помощью `node filename.js host port username password`  
381 | Node автоматически разделит агрументы через пробел в массив.  
382 | Этот массив - `process.argv`  
383 | Данные можно получить с помощью индексов. Индексы всегда начинаются с 0, поэтому первый аргумент с номером `[0]` будет со значением `node` и т.д.
384 | 
385 | | | Первый аргумент | Второй аргумент | Третий аргумент | Четвёртый аргумент | Пятый аргумент | Шестой аргумент |
386 | | --- | :---: | :---: | :---: | :---: | :---: | :---: |
387 | | Значение | `node` | `filename.js` | `host` | `port` | `username` | `password` |
388 | | Индекс | `[0]` | `[1]` | `[2]` | `[3]` | `[4]` | `[5]`
389 | 
390 | ### Передача функций
391 | 
392 | Передаваться в качестве аргумента могут не только основные переменные, но и функции.
393 | Функции передаются точно так же.
394 | 
395 | ```js
396 | const welcome = () => {
397 |   bot.chat('Привет!')
398 | }
399 | 
400 | bot.once('spawn', welcome)
401 | ```
402 | 
403 | Как вы можете видеть, метод `bot.once()` имеет 2 параметра.  
404 | Первый параметр - название события, второй - функция, которая вызывается, когда срабатывает событие.  
405 | Запомните, когда передаёте функцию в качестве аргумента, используйте только имя функции, без `()`
406 | 
407 | `bot.chat()` - это метод отправки сообщений в чат.
408 | 
409 | Вы можете упростить код, используя анонимные функции.  
410 | У анонимных функций нет названий, они создаются на месте имени функции.  
411 | Они так же могут иметь параметры в `()` и тело функции в `{}`, даже если они не используются.
412 | 
413 | ```js
414 | bot.once('spawn', () => {
415 |   bot.chat('Привет!')
416 | })
417 | ```
418 | 
419 | ### Прослушивание событий
420 | 
421 | Объект бота имеет множество полезных [событий](http://prismarinejs.github.io/mineflayer/#/api_ru?id=events).
422 | Вы можете прослушивать события используя методы `bot.on()` или `bot.once()` для объекта бота, они принимают имя события и функцию.  
423 | Чтобы удалить какой-либо прослушиватель событий, используйте метод `bot.removeListener()`.
424 | 
425 | - `bot.on(eventName, listener)`
426 |   Вызывает функцию `listener` каждый раз, когда срабатывает событие `eventName`.
427 | - `bot.once(eventName, listener)`
428 |   Вызывает функцию `listener` только один раз, когда впервые срабатывает событие `eventName`.
429 | - `bot.removeListener(eventName, listener)`
430 |   Удаляет `listener` для события `eventName`. Чтобы это использовать, вам нужно либо определить вашу функцию с помощью `function myNamedFunc() {}`, либо поместить вашу функцию в переменную с помощью `const myNamedFunc = () => {}`. Затем вы можете использовать `myNamedFunc` в аргументе слушателя.
431 | 
432 | События имеет не только объект бота, например у [`Сундуков`](http://prismarinejs.github.io/mineflayer/#/api_ru?id=mineflayerchest), [`Печек`](http://prismarinejs.github.io/mineflayer/#/api_ru?id=mineflayerfurnace), [`Раздатчиков`](http://prismarinejs.github.io/mineflayer/#/api_ru?id=mineflayerdispenser), [`Столов зачарования`](http://prismarinejs.github.io/mineflayer/#/api_ru?id=mineflayerenchantmenttable), [`Жителей`](http://prismarinejs.github.io/mineflayer/#/api_ru?id=mineflayervillager) также есть свои события.
433 | 
434 | ### Промисы
435 | [Промисы](https://nodejs.dev/learn/understanding-javascript-promises) - это функции, которые вы можете использовать с помощью переменной `await` для ожидания, пока какая-либо функция не завершится (вы также можете прервать await, чтобы не ожидать результата).
436 | 
437 | ```js
438 | async function consume (bot) {
439 |   try {
440 |     await bot.consume()
441 |     console.log('Съел')
442 |   } catch (err) {
443 |     console.log(error)
444 |   }
445 | }
446 | ```
447 | 
448 | Код выше попытается употребить то, что сейчас бот держит в руке.  
449 | Когда употребление заканчивается, вызывается переданная функция.
450 | После этого вы сможете делать любые другие вещи.  
451 | Функция также может быть вызвана при возникновении ошибки.
452 | 
453 | #### Правильный и неправильный подход
454 | 
455 | Снизу пример бота, который создаёт дубовые доски, а затем палки.
456 | 
457 | Неправильно ❌:
458 | 
459 | ```js
460 | function craft (bot) {
461 |   const mcData = require('minecraft-data')(bot.version)
462 |   const plankRecipe = bot.recipesFor(mcData.itemsByName.oak_planks.id ?? mcData.itemsByName.planks.id)[0] // Получение рецепта для дубовых досок
463 |   bot.craft(plankRecipe, 1) // ❌ Начинает создавать дубовые доски
464 | 
465 |   const stickRecipe = bot.recipesFor(mcData.itemsByName.sticks.id)[0] // Получение рецепта для палок
466 |   bot.craft(stickRecipe, 1) // ❌ Начинает создавать палки
467 | }
468 | ```
469 | 
470 | Правильно с промисами ✔️:
471 | 
472 | ```js
473 | async function craft (bot) {
474 |   const mcData = require('minecraft-data')(bot.version)
475 |   const plankRecipe = bot.recipesFor(mcData.itemsByName.oak_planks.id ?? mcData.itemsByName.planks.id)[0]
476 |   await bot.craft(plankRecipe, 1, null)
477 |   const stickRecipe = bot.recipesFor(mcData.itemsByName.sticks.id)[0]
478 |   await bot.craft(stickRecipe, 1, null)
479 |   bot.chat('Скрафтил палки')
480 | }
481 | ```
482 | 
483 | Причина почему первый код неправильный в том, что когда вызывается `bot.craft()`, код продолжает что-то делать, пока бот крафтит.  
484 | К тому времени как код уже выполняет второй `bot.craft()`, первый ещё возможно даже не закончился, а значит ресурсов для палок ещё нет.  
485 | Использование промисов может исправить это, потому что будет известно, когда закончится выполнение `bot.craft()`.
486 | 
487 | Больше о методе `bot.craft()` [здесь](https://github.com/PrismarineJS/mineflayer/blob/master/docs/api_ru.md#botcraftrecipe-count-craftingtable).
488 | 
489 | ## Продвинутым
490 | 
491 | Следующие концепции необязательны для создания бота на Mineflayer, но могут быть полезны для понимая и создания усовершенствованных ботов.  
492 | Мы предполагаем, что вы поняли [Основы](#основы).
493 | 
494 | ### Цикл для объекта
495 | 
496 | Цикл `for of` описанный в [разделе о циклах](#циклы) также может использоваться и для объектов.
497 | 
498 | Если у нас есть следующий объект:
499 | 
500 | ```js
501 | const obj = {
502 |   a: 1,
503 |   b: 2,
504 |   c: 3
505 | }
506 | ```
507 | 
508 | Мы можем создать цикл, перебирающий все значения объекта.
509 | 
510 | ```js
511 | for (const value of Object.values(obj)) {
512 |   console.log(value)
513 | }
514 | ```
515 | 
516 | ```txt
517 | 1
518 | 2
519 | 3
520 | ```
521 | 
522 | Это цикл, перебирающий все ключи объекта.
523 | 
524 | ```js
525 | for (const key of Object.keys(obj)) {
526 |   console.log(key)
527 | }
528 | ```
529 | 
530 | ```txt
531 | a
532 | b
533 | c
534 | ```
535 | 
536 | Вы также можете одновременно использовать ключи и значения одновременно. Сначала вам придется деструктурировать переменные, объяснение вы можете найти [здесь.](https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)
537 | 
538 | ```js
539 | for (const [key, value] of Object.entries(obj)) {
540 |   console.log(key + ', ' + value)
541 | }
542 | ```
543 | 
544 | ```txt
545 | a, 1
546 | b, 2
547 | c, 3
548 | ```
549 | 
550 | Эти циклы возможны благодаря `Object.values(obj)` и `Object.keys(obj)`, который возвращают массивы с значениями и ключами объектов соотвественно.  
551 | `Object.entries(obj)` возвращает массив, состоящий из двух элементов: ключа и его значения.  
552 | Важно знать, что в отличии от функций `Object.values()` и `Object.keys()`, функция `Object.entries()` порядок элементов останется таким же, каким он был в объекте.
553 | 
554 | Также существует цикл `for in`. Однако, вам чаще придётся использовать `for of` вместо `for in`, потому что есть различия в ключах.  
555 | Цикл `for in` работает на основе ключей вместо значений. (Индекс в этом случае, если это массив)  
556 | Однако он зацикливается не только на своих собственных ключах, но и на ключах из другого объекта, от которого он "наследуется", что нежелательно и может сбивать с толку. Подробнее об этом [здесь.](https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/for...in)  
557 | В общем, вам понадобится `for of` вместо `for in`, поэтому убедитесь, что вы не путаете эти два понятия.
558 | 
559 | ### Создание события для чата
560 | 
561 | Вы можете создать свои собственные события для чата, используя метод [`bot.chatAddPattern()`](http://prismarinejs.github.io/mineflayer/#/api_ru?id=#botchataddpatternpattern-chattype-description). Полезно для серверов с плагинами, который меняют формат чата на сервере.
562 | Метод [`bot.chatAddPattern()`](http://prismarinejs.github.io/mineflayer/#/api_ru?id=botchataddpatternpattern-chattype-description) принимает три аргумента :
563 | 
564 | - `pattern` - Регулярное выражение для совпадения с сообщением.
565 | - `chatType` - Вид сообщения. Является названием события, который будет срабатывать при совпадении с шаблоном. Например: "chat" или "whisper".
566 | - `description` - Необязательно, описание шаблона.
567 | 
568 | Вы можете добавить [группы](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges) в `pattern`, чтобы затем слушатель последовательно распределил группы по аргументам вашего обратного вызова.
569 | 
570 | Ознакомиться с регулярными выражениями вы можете [здесь](https://ru.wikipedia.org/wiki/Регулярные_выражения).
571 | 
572 | Примеры :
573 | 
574 | #### Приветствующий бот
575 | 
576 | Здесь мы создаём бота, который отвечает на 'привет' другого игрока.
577 | 
578 | ```js
579 | bot.chatAddPattern(
580 |   /(прив|привет|Привет)/,
581 |   'hello',
582 |   'Кто-то приветствуется'
583 | )
584 | 
585 | const hi = () => {
586 |   bot.chat('Здарова!')
587 | }
588 | 
589 | bot.on('hello', hi)
590 | ```
591 | 
592 | #### Нестандартный формат чата
593 | 
594 | Создание события основанного на изменённом формате сообщений.  
595 | Пример:
596 | 
597 | ```txt
598 | [Игрок] Player1 > Привет
599 | [Админ] Alex > прив
600 | [Игрок] Player2 > Помогите, я застрял
601 | [Модератор] Jim > Сейчас
602 | ```
603 | 
604 | ```js
605 | bot.chatAddPattern(
606 |   /^\[(.+)\] (\S+) > (.+)$/,
607 |   'my_chat_event',
608 |   'Собственное событие чата'
609 | )
610 | 
611 | const logger = (rank, username, message) => {
612 |   console.log(`${username} сказал ${message}`)
613 | }
614 | 
615 | bot.on('my_chat_event', logger)
616 | ```
617 | 
618 | Объяснение этого `^\[(.+)\] (\S+) > (.+)




    
    

    
    
    
    

    
    
    
    



    



    

    

    

         вы можете найти [здесь](https://regex101.com/r/VDUrDC/2).
619 | 
620 | ## ЧаВо
621 | 
622 | ### Как запустить бота на Android
623 | 
624 | Вы можете запускать ботов на Android при помощи [Termux](https://termux.com/).
625 | 
626 | #### Установка Termux
627 | 
628 | Установите [Termux](https://termux.com/) и запустите его.
629 | 
630 | #### Настройка
631 | 
632 | Установите `Node.js`:
633 | 
634 | ```bash
635 | pkg update -y
636 | pkg install nodejs -y
637 | ```
638 | 
639 | ❗️ Выдайте Termux права на доступ к файлам в настройках приложения.
640 | Создайте папку во внутреннем хранилище :
641 | 
642 | ```bash
643 | cd /sdcard
644 | mkdir my_scripts
645 | cd my_scripts
646 | ```
647 | 
648 | Установите `mineflayer`:
649 | 
650 | ```bash
651 | npm install mineflayer
652 | ```
653 | 
654 | Теперь вы можете скопировать и хранить все свои скрипты в папке `my_scripts` во внутреннем хранилище.
655 | 
656 | #### Запуск вашего бота
657 | 
658 | Чтобы запустить бота, запустите Node с именем вашего скрипта.
659 | 
660 | ```bash
661 | node script_name.js
662 | ```
663 | 
664 | ❗️ Каждый раз, когда вы открываете Termux, вы должны изменять директорию на `/sdcard/my_scripts`, перед тем как запускать бота:
665 | 
666 | ```bash
667 | cd /sdcard/my_scripts
668 | ```
669 | 


--------------------------------------------------------------------------------
/docs/ru/unstable_api_ru.md:
--------------------------------------------------------------------------------
 1 | <!-- START doctoc generated TOC please keep comment here to allow auto update -->
 2 | <!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
 3 | **Содержание**  *сгенерировано с помощью [DocToc](https://github.com/thlorenz/doctoc)*
 4 | 
 5 | - [unstable API : bot._](#unstable-api--bot_)
 6 |   - [bot._client](#bot_client)
 7 | 
 8 | <!-- END doctoc generated TOC please keep comment here to allow auto update -->
 9 | 
10 | # unstable API : bot._
11 | 
12 | Эти методы и классы могут быть полезны в особых случаях, но являются нестабильными и могут изменятся в любой момент.
13 | 
14 | ## bot._client
15 | 
16 | `bot._client` создан при помощи [node-minecraft-protocol](https://github.com/PrismarineJS/node-minecraft-protocol).
17 | Он обрабатывает запись и чтение пакетов.
18 | Работа данного метода постоянно меняется, так как версии Minecraft постоянно обновляются.
19 | Рекомендуем использовать стандартные методы Mineflayer, если это возможно
20 | 


--------------------------------------------------------------------------------
/docs/tr/README_TR.md:
--------------------------------------------------------------------------------
  1 | # Mineflayer
  2 | 
  3 | [![NPM version](https://badge.fury.io/js/mineflayer.svg)](http://badge.fury.io/js/mineflayer)
  4 | [![Build Status](https://github.com/PrismarineJS/mineflayer/workflows/CI/badge.svg)](https://github.com/PrismarineJS/mineflayer/actions?query=workflow%3A%22CI%22)
  5 | [![Discord](https://img.shields.io/badge/chat-on%20discord-brightgreen.svg)](https://discord.gg/GsEFRM8)
  6 | [![Gitter](https://img.shields.io/badge/chat-on%20gitter-brightgreen.svg)](https://gitter.im/PrismarineJS/general)
  7 | [![Irc](https://img.shields.io/badge/chat-on%20irc-brightgreen.svg)](https://irc.gitter.im/)
  8 | [![Issue Hunt](https://github.com/BoostIO/issuehunt-materials/blob/master/v1/issuehunt-shield-v1.svg)](https://issuehunt.io/r/PrismarineJS/mineflayer)
  9 | 
 10 | [![Try it on gitpod](https://img.shields.io/badge/try-on%20gitpod-brightgreen.svg)](https://gitpod.io/#https://github.com/PrismarineJS/mineflayer)
 11 | 
 12 | | <sub>EN</sub> [English](../README.md) | <sub>RU</sub> [русский](../ru/README_RU.md) | <sub>ES</sub> [Español](../es/README_ES.md) | <sub>FR</sub> [Français](../fr/README_FR.md) | <sub>TR</sub> [Türkçe](../tr/README_TR.md) | <sub>ZH</sub> [中文](../zh/README_ZH_CN.md) | <sub>BR</sub> [Portuguese](../br/README_BR.md) |
 13 | |-------------------------|----------------------------|----------------------------|----------------------------|----------------------------|----------------------------|----------------------------|
 14 | 
 15 | JavaScript ile güçlü, stabil ve üst seviye Minecraft botları oluşturabileceğiniz bir [API](api.md).
 16 | 
 17 | İlk defa mı Node.js kullanıyorsun? [Öğretici](tutorial.md) ile başlayabilirsin.
 18 | 
 19 | ## Özellikler
 20 | 
 21 |  * Minecraft 1.8, 1.9, 1.10, 1.11, 1.12, 1.13, 1.14, 1.15, 1.16, 1.17, 1.18, 1.19 ve 1.20 sürümlerini destekler.
 22 |  * Varlık bilgisi ve takibi.
 23 |  * Blok bilgisi. Etrafını inceleyebilirsin. Bir bloğu bulmak milisaniyeler sürer.
 24 |  * Fizik ve hareket - bütün hayali kutucukları ele alabilirsin
 25 |  * Canlılara saldırma ve taşıtları kullanma.
 26 |  * Envanter düzenleme.
 27 |  * Çalışma masaları, sandıklar, fırlatıcılar, büyü masaları.
 28 |  * Blok kazma ve koyma.
 29 |  * Can sayını ve yağmur yağıp yapmadığını öğrenmek gibi ekstra özellikler.
 30 |  * Eşyaları kullanma ve blokları aktifleştirme.
 31 |  * Sohbet.
 32 | 
 33 | ### Yol Haritası
 34 | 
 35 | Bu sayfayı ziyaret ederek [projelerin](https://github.com/PrismarineJS/mineflayer/wiki/Big-Prismarine-projects) durumlarını öğrenebilirsin. 
 36 |  
 37 | ## Kurulum
 38 | 
 39 | Node.js 14 veya üstü bir sürümü [nodejs.org](https://nodejs.org/) adresinden indirip kurduktan sonra mineflayer'ı  `npm install mineflayer` ile kurabilirsin.
 40 | 
 41 | ## Belgeler / Wiki
 42 | 
 43 | | link | açıklama |
 44 | |---|---|
 45 | | [Öğretici](tutorial.md) | Node.js ve mineflayer öğren |
 46 | | [FAQ.md](FAQ.md) | Aklına bir şey mi takıldı? Buraya bak. |
 47 | | [api.md](api.md) [unstable_api.md](unstable_api.md) | API hakkında her şey |
 48 | | [history.md](history.md) | Değişikliklerin listesi |
 49 | | [examples/](https://github.com/PrismarineJS/mineflayer/tree/master/examples) | Tüm mineflayer örnekleri |
 50 | 
 51 | 
 52 | ## Katkıda bulun
 53 | 
 54 | Katkıda bulunmadan önce lütfen [CONTRIBUTING.md](CONTRIBUTING.md) ve [prismarine-contribute](https://github.com/PrismarineJS/prismarine-contribute) dosyalarını oku.
 55 | 
 56 | ## Kullanım
 57 | 
 58 | **Videolar**
 59 | 
 60 | Bir botun temel kurulum sürecini açıklayan bir öğretici videoyu [burada](https://www.youtube.com/watch?v=ltWosy4Z0Kw) bulabilirsin.
 61 | 
 62 | Daha fazlasını öğrenmek istersen [burada](https://www.youtube.com/playlist?list=PLh_alXmxHmzGy3FKbo95AkPp5D8849PEV) öğretici videolar bulabilirsin. Videolarda kullanılan botların kaynak kodlarını da [şurada](https://github.com/TheDudeFromCI/Mineflayer-Youtube-Tutorials) bulabilirsin.
 63 | 
 64 | [<img src="https://img.youtube.com/vi/ltWosy4Z0Kw/0.jpg" alt="tutorial 1" width="200">](https://www.youtube.com/watch?v=ltWosy4Z0Kw)
 65 | [<img src="https://img.youtube.com/vi/UWGSf08wQSc/0.jpg" alt="tutorial 2" width="200">](https://www.youtube.com/watch?v=UWGSf08wQSc)
 66 | [<img src="https://img.youtube.com/vi/ssWE0kXDGJE/0.jpg" alt="tutorial 3" width="200">](https://www.youtube.com/watch?v=ssWE0kXDGJE)
 67 | [<img src="https://img.youtube.com/vi/walbRk20KYU/0.jpg" alt="tutorial 4" width="200">](https://www.youtube.com/watch?v=walbRk20KYU)
 68 | 
 69 | **Başlangıç**
 70 | 
 71 | Eğer sürüm belirtilmezse otomatik olarak ayarlanacaktır. Kimlik doğrulama türü belirtilmez ise de Mojang'ınki kullanılacaktır.
 72 | 
 73 | ### Papağan Örneği (bot dediklerinizi taklit eder)
 74 | ```js
 75 | const mineflayer = require('mineflayer')
 76 | 
 77 | const bot = mineflayer.createBot({
 78 |   host: 'localhost', // sunucu IP adresi
 79 |   username: 'email@example.com', // Minecraft kullanıcı adı / e-posta adresi
 80 |   password: '12345678' // Minecraft şifresi, korsan sunucular için boş bırakabilirsin
 81 |   // port: 25565,                // sadece port 25565 olmadığında kullan
 82 |   // version: false,             // özellikle bir sürüm belirteceğin zaman burayı değiştirebilirsin
 83 |   // auth: 'mojang'              // Microsoft kullanıyorsan 'microsoft' olarak değiştirebilirsin
 84 | })
 85 | 
 86 | bot.on('chat', (username, message) => {
 87 |   if (username === bot.username) return
 88 |   bot.chat(message)
 89 | })
 90 | 
 91 | // Hataları ve sunucudan atılma sebeplerini konsola yansıt:
 92 | bot.on('kicked', console.log)
 93 | bot.on('error', console.log)
 94 | ```
 95 | 
 96 | ### Botunun ne yaptığını gör
 97 | 
 98 | [prismarine-viewer](https://github.com/PrismarineJS/prismarine-viewer) projesi sayesinde tarayıcı sekmende botunun ne yaptığını izleyebilirsin. Sadece `npm install prismarine-viewer` komutunu çalıştır ve şu kodu botuna ekle:
 99 | ```js
100 | const { mineflayer: mineflayerViewer } = require('prismarine-viewer')
101 | bot.once('spawn', () => {
102 |   mineflayerViewer(bot, { port: 3007, firstPerson: true }) // port: yayın yapılacak port, firstPerson: true yaparsan botun gözünden, false yaparsan kuş bakışı görüntü elde edersin.
103 | })
104 | ```
105 | ve şuna benzeyen *canlı* bir görüntü elde edeceksin:
106 | 
107 | [<img src="https://prismarinejs.github.io/prismarine-viewer/test_1.16.1.png" alt="viewer" width="500">](https://prismarinejs.github.io/prismarine-viewer/)
108 | 
109 | #### Daha fazla örnek
110 | 
111 | | Örnek | Açıklama |
112 | |---|---|
113 | |[viewer](https://github.com/PrismarineJS/mineflayer/tree/master/examples/viewer) | Botunu tarayıcında izle |
114 | |[pathfinder](https://github.com/PrismarineJS/mineflayer/tree/master/examples/pathfinder) | Botunun belirli bir yere gitmesini sağla |
115 | |[chest](https://github.com/PrismarineJS/mineflayer/blob/master/examples/chest.js) | Sandıkları, fırınları, fırlatıcıları ve büyü masalarını kullan |
116 | |[digger](https://github.com/PrismarineJS/mineflayer/blob/master/examples/digger.js) | Blok kazabilen bir botun nasıl yapılacağını öğren |
117 | |[discord](https://github.com/PrismarineJS/mineflayer/blob/master/examples/discord.js) | Discord ile bir mineflayer botunu bağla |
118 | |[jumper](https://github.com/PrismarineJS/mineflayer/blob/master/examples/jumper.js) | Nasıl hareket edebileceğini, zıplayabileceğini, taşıt kullanabileceğini, yakındaki canlılara saldırabileceğini öğren |
119 | |[ansi](https://github.com/PrismarineJS/mineflayer/blob/master/examples/ansi.js) | Sohbet mesajlarını bütün renkleri görecek şekilde konsoldan izle |
120 | |[guard](https://github.com/PrismarineJS/mineflayer/blob/master/examples/guard.js) | Çevreyi etraftaki yaratıklardan koruyan bir bot yap |
121 | |[multiple-from-file](https://github.com/PrismarineJS/mineflayer/blob/master/examples/multiple_from_file.js) | Birçok hesabın bulunduğu bir dosya kullanarak o hesaplarla botlar yap |
122 | 
123 | daha da fazlası [burada](https://github.com/PrismarineJS/mineflayer/tree/master/examples)
124 | 
125 | ### Modüller
126 | 
127 | Aktif geliştirmenin bir çoğu mineflayer tarafından kullanılan küçük npm paketlerinin içinde gerçekleşiyor.
128 | 
129 | #### The Node Way&trade;
130 | 
131 | > "When applications are done well, they are just the really application-specific, brackish residue that can't be so easily abstracted away. All the nice, reusable components sublimate away onto github and npm where everybody can collaborate to advance the commons." — substack from ["how I write modules"](https://gist.github.com/substack/5075355)
132 | 
133 | #### Modüller
134 | 
135 | mineflayer'ın yapı taşları olarak kullanılan bazı modüller:
136 | 
137 | | Modül | Açıklama |
138 | |---|---|
139 | | [minecraft-protocol](https://github.com/PrismarineJS/node-minecraft-protocol) | Minecraft packetlerini incelemeyi sağlayan bir modül
140 | | [minecraft-data](https://github.com/PrismarineJS/minecraft-data) | Minecraft hakkında bir veritabanı
141 | | [prismarine-physics](https://github.com/PrismarineJS/prismarine-physics) | Minecraft canlılarının fizik motoru
142 | | [prismarine-chunk](https://github.com/PrismarineJS/prismarine-chunk) | Chunk bilgisini tutan bir modül
143 | | [node-vec3](https://github.com/PrismarineJS/node-vec3) | Güçlü birim testleri ile 3D vektör matematiği
144 | | [prismarine-block](https://github.com/PrismarineJS/prismarine-block) | Minecraft bloğunu verisi ile tanımlamaya yarayan modül
145 | | [prismarine-chat](https://github.com/PrismarineJS/prismarine-chat) | Minecraft sohbet ayrıştırıcı (mineflayer'dan alındı)
146 | | [node-yggdrasil](https://github.com/PrismarineJS/node-yggdrasil) | Mojang'ın üyelik sistemiyle etkileşime geçebilmek için bir Node.js kütüphanesi
147 | | [prismarine-world](https://github.com/PrismarineJS/prismarine-world) | Prismarine dünyaların ana kütüphanesi
148 | | [prismarine-windows](https://github.com/PrismarineJS/prismarine-windows) | Minecraft pencereleri için bir yönetim kütüphanesi
149 | | [prismarine-item](https://github.com/PrismarineJS/prismarine-item) | Bir Minecraft eşyasını verileri ile tanımlamaya yarayan modül
150 | | [prismarine-nbt](https://github.com/PrismarineJS/prismarine-nbt) | node-minecraft-protocol için bir NBT ayrıştırıcı
151 | | [prismarine-recipe](https://github.com/PrismarineJS/prismarine-recipe) | Minecraft tarif kütüphanesi
152 | | [prismarine-biome](https://github.com/PrismarineJS/prismarine-biome) | Bir Minecraft biyomunu verileri ile tanımlamaya yarayan modül
153 | | [prismarine-entity](https://github.com/PrismarineJS/prismarine-entity) | Bir Minecraft canlısını tanımlamaya yarayan modül
154 | 
155 | 
156 | ### Hata ayıklama
157 | 
158 | Hata ayıklama çıktısı almak için `DEBUG` değişkenini kullanabilirsin:
159 | 
160 | ```bash
161 | DEBUG="minecraft-protocol" node [...]
162 | ```
163 | 
164 | Windows:
165 | ```
166 | set DEBUG=minecraft-protocol
167 | node your_script.js
168 | ```
169 | 
170 | ## 3. Parti Eklentiler
171 | 
172 | mineflayer eklenti desteği sağlar; isteyen herkes mineflayer'ın üstüne daha da üst seviye bir API ekleyen bir eklenti yazabilir.
173 | 
174 | En çok güncellenen ve en kullanışlı olan bazıları:
175 | 
176 |  * [pathfinder](https://github.com/Karang/mineflayer-pathfinder) - konfigüre edilebilen tonlarca özellik ile gelişmiş A* yön bulma
177 |  * [prismarine-viewer](https://github.com/PrismarineJS/prismarine-viewer) - basit tarayıcı chunk gösterici
178 |  * [web-inventory](https://github.com/ImHarvol/mineflayer-web-inventory) - web bazlı envanter gösterici
179 |  * [statemachine](https://github.com/TheDudeFromCI/mineflayer-statemachine) - daha kompleks bot eventleri için bir API
180 |  * [Armor Manager](https://github.com/G07cha/MineflayerArmorManager) - otomatik zırh düzenleyici
181 |  * [Collect Block](https://github.com/TheDudeFromCI/mineflayer-collectblock) - basit ve hızlı bir blok toplama API'ı
182 |  * [Dashboard](https://github.com/wvffle/mineflayer-dashboard) - mineflayer botları için kontrol paneli
183 |  * [PVP](https://github.com/TheDudeFromCI/mineflayer-pvp) - PVP ve PVE için basit bir API
184 |  * [auto-eat](https://github.com/LINKdiscordd/mineflayer-auto-eat) - otomatik yemek yeme
185 |  * [Tool](https://github.com/TheDudeFromCI/mineflayer-tool) - otomatik eşya seçimi için üst seviye bir API
186 |  * [Hawkeye](https://github.com/sefirosweb/minecraftHawkEye) - yaylarla otomatik eğim için bir API
187 | 
188 | 
189 |  Şunlara da göz at:
190 | 
191 |  * [radar](https://github.com/andrewrk/mineflayer-radar/) - canvas ve socket.io kullanan tarayıcı bazlı bir radar arayüzü. [YouTube Demo](https://www.youtube.com/watch?v=FjDmAfcVulQ)
192 |  * [blockfinder](https://github.com/Darthfett/mineflayer-blockFinder) - 3 boyutlu dünyada blok bulun
193 |  * [scaffold](https://github.com/andrewrk/mineflayer-scaffold) - bir hedefe blok koyarak
194 |  veya kırarak ulaşın [YouTube Demo](http://youtu.be/jkg6psMUSE0)
195 |  * [auto-auth](https://github.com/G07cha/MineflayerAutoAuth) - sohbet-bazlı bot giriş sistemi
196 |  * [Bloodhound](https://github.com/Nixes/mineflayer-bloodhound) - başka bir varlığa gelen hasardan kimin ve neyin sorumlu olduğu hakkında bilgi alın
197 |  * [tps](https://github.com/SiebeDW/mineflayer-tps) - tps değerini elde edin
198 |  + [panorama](https://github.com/IceTank/mineflayer-panorama) - dünyanın panorama fotoğraflarını çekin
199 | 
200 | ## Mineflayer Kullanan Projeler
201 | 
202 |  * [rom1504/rbot](https://github.com/rom1504/rbot)
203 |    - [YouTube - spiral bir merdiven inşa etme](https://www.youtube.com/watch?v=UM1ZV5200S0)
204 |    - [YouTube - bir yapıyı taklit etme](https://www.youtube.com/watch?v=0cQxg9uDnzA)
205 |  * [Darthfett/Helperbot](https://github.com/Darthfett/Helperbot)
206 |  * [vogonistic/voxel](https://github.com/vogonistic/mineflayer-voxel) - voxel.js ile 
207 |  botun ne yaptığını gör
208 |  * [JonnyD/Skynet](https://github.com/JonnyD/Skynet) - bot aktivitesini online bir API'a gönder
209 |  * [MinecraftChat](https://github.com/rom1504/MinecraftChat) (son açık kaynak sürümü, AlexKvazos tarafından yapıldı) - Minecraft internet tabanlı sohbet <https://minecraftchat.net/>
210 |  * [Cheese Bot](https://github.com/Minecheesecraft/Cheese-Bot) - node-webkit ile yapılan eklenti bazlı, temiz bir arayüze sahip bir bot
211 |  * [Chaoscraft](https://github.com/schematical/chaoscraft) - genetik algoritmalar kullanan bir Minecraft botu, [videoları burada](https://www.youtube.com/playlist?list=PLLkpLgU9B5xJ7Qy4kOyBJl5J6zsDIMceH)
212 |  * [hexatester/minetelegram](https://github.com/hexatester/minetelegram) -  mineflayer & telegraf üstüne kurulu Minecraft - Telegram köprüsü
213 |  * [PrismarineJS/mineflayer-builder](https://github.com/PrismarineJS/mineflayer-builder) - Minecraft şemalarını hayatta kalma modunda inşa eden bir proje
214 |  * [ve daha niceleri](https://github.com/PrismarineJS/mineflayer/network/dependents) - mineflayer kullanıyor olup GitHub tarafından tespit edilen tüm projeler.
215 | 
216 | 
217 | ## Test etme
218 | 
219 | ### Her şeyi test etme
220 | 
221 | Basitçe
222 | ```bash
223 | npm test
224 | ```
225 | 
226 | komutunu çalıştırın
227 | 
228 | ### Özel bir sürümü test etme
229 | 
230 | ```bash
231 | npm test -- -g <version>
232 | ```
233 | 
234 | komutunu çalıştırın, `<version>` bir Minecraft sürümü olmalı (`1.12`, `1.15.2` gibi).
235 | 
236 | ### Özel bir şeyi test etme
237 | 
238 | ```bash
239 | npm test -- -g <test_name>
240 | ```
241 | 
242 | komutunu çalıştırın, `<test_name>` kısmının olduğu bölüm bir test adı olmalı (`bed`, `useChests`, `rayTrace` gibi).
243 | 
244 | ## Lisans
245 | [MIT](../../LICENSE)
246 | 


--------------------------------------------------------------------------------
/docs/tutorial.md:
--------------------------------------------------------------------------------
  1 | # Tutorial
  2 | 
  3 | **Table of Contents**
  4 | 
  5 | - [Basics](#basics)
  6 |   - [Javascript basics](#javascript-basics)
  7 |     - [Installing Node](#installing-node)
  8 |     - [Javascript variables](#javascript-variables)
  9 |     - [Show output](#show-output)
 10 |     - [Javascript functions](#javascript-functions)
 11 |     - [Javascript types](#javascript-types)
 12 |     - [If-statements](#if-statements)
 13 |     - [Loops](#loops)
 14 |     - [Node Package manager](#node-package-manager)
 15 |   - [Creating a bot](#creating-a-bot)
 16 |     - [Javascript objects](#javascript-objects)
 17 |     - [Logging in](#logging-in)
 18 |   - [Passing along functions](#passing-along-functions)
 19 |   - [Listening for an event](#listening-for-an-event)
 20 |   - [Promises](#promises)
 21 |     - [Correct and incorrect approach](#correct-and-incorrect-approach)
 22 | - [Advanced](#advanced)
 23 |   - [Asynchronousy](#asynchronousy)
 24 |   - [Loop over an object](#loop-over-an-object)
 25 |   - [Creating an event from chat](#creating-an-event-from-chat)
 26 |     - [Answer Hello Bot](#answer-hello-bot)
 27 |     - [Custom Chat](#custom-chat)
 28 | - [FAQ](#faq)
 29 |   - [How to run a bot on android](#how-to-run-a-bot-on-android)
 30 |     - [Install Termux](#install-termux)
 31 |     - [Setup](#setup)
 32 |     - [Start your bot](#start-your-bot)
 33 | 
 34 | ## Introduction
 35 | 
 36 | This tutorial will help you get started with Mineflayer, even if you know nothing about coding.  
 37 | If you already know some things about Node and NPM, you can go to the [Create a bot](#creating-a-bot) section, otherwise start here.
 38 | 
 39 | ## Basics
 40 | 
 41 | The following sections are about basics concepts you need to know to get started using Mineflayer.
 42 | 
 43 | ### Javascript basics
 44 | 
 45 | #### Installing Node
 46 | 
 47 | In this section you will learn the basics about Javascript, Node and NPM.
 48 | 
 49 | Javascript, often abbreviated to JS, is a programming language designed for the web. It is what makes most interactivity on the web possible.  
 50 | Node.js, often just Node, makes it possible to use Javascript outside of web browsers.
 51 | 
 52 | So the first thing you have to do to get started is to install Node. You can get it [here](https://nodejs.org/en/download/).  
 53 | After it is installed, open a command prompt (also known as a terminal) and then type `node -v`  
 54 | If you have installed Node correctly, it should return a version number. If it says it can't find the command, try installing it again.
 55 | 
 56 | Now you have Node, you could start writing code, but we need to do 1 more thing.  
 57 | Javascript can be written in any basic text editor, but it is much easier if you use what is called an [Integrated development environment](https://en.wikipedia.org/wiki/Integrated_development_environment)(IDE)  
 58 | An IDE will help you write code because it can give you suggestions, or tell you if your code has potential problems. A good IDE to start with is [Visual Studio Code](https://code.visualstudio.com/)(VSCode)  
 59 | Once you have installed and set-up VSCode, create a new file and then save it somewhere with a name ending with `.js`, e.g. `bot.js`  
 60 | This will let VSCode know we are working with Javascript, and give you the correct suggestions.
 61 | 
 62 | #### Javascript variables
 63 | 
 64 | Start by typing the following:
 65 | 
 66 | ```js
 67 | const test = 5
 68 | ```
 69 | 
 70 | This will create a new variable named `test` and assign it the value `5`  
 71 | Variable are used to save data and use it later in the code.
 72 | 
 73 | Now save the file so we can run the code. Open a terminal again (or a new terminal in VSCode) and navigate to the same folder the file is saved in. This can be done using the `cd` command, for example: `cd Documents\javascript`  
 74 | Once your terminal is in the same folder as your Javascript file, you can run `node filename.js`  
 75 | If you have done everything correctly, you should see nothing.  
 76 | In the next chapter we will show you how you can 'print' things to the terminal.
 77 | 
 78 | In general, it is good practice to use the `const` keyword instead of the `let` keyword when defining a variable. A variable defined with `const` can't be modified later and thus is a constant.  
 79 | Javascript is then able to make your code run more efficiently because it knows it doesn't have to account for value changes for that variable.  
 80 | If you want a modifiable variable, you will still have to use `let` of course.
 81 | 
 82 | ```js
 83 | const test = 5
 84 | // eslint-disable-next-line
 85 | test = 10 // This line is invalid.
 86 | ```
 87 | 
 88 | The second line is invallid because you can't reassign the `test` variable.
 89 | 
 90 | If you want to help yourself and other people understand your code better, you can use comments.  
 91 | Comments can be created using `//` and everything after that is completely ignored by Javascript.
 92 | 
 93 | #### Show output
 94 | 
 95 | A lot of times you want to see the current value of a variable, to make sure your program is running correctly.  
 96 | You do this by printing the variables to the terminal.  
 97 | In Javascript, we can do this using the `console.log()` function.  
 98 | 
 99 | ```js
100 | const test = 5
101 | 
102 | console.log(test)
103 | ```
104 | 
105 | Now when you save and run this code, you should finally see something:
106 | 
107 | ```txt
108 | 5
109 | ```
110 | 
111 | #### Javascript functions
112 | 
113 | Next you will learn about functions. Functions are a piece of code that can be used multiple times throughout your code.  
114 | These can be useful because you don't have to type something multiple times.
115 | 
116 | ```js
117 | const addition = (a, b) => {
118 |   return a + b
119 | }
120 | 
121 | const test1 = addition(5, 10)
122 | const test2 = addition(1, 0)
123 | 
124 | console.log(test1)
125 | console.log(test2)
126 | ```
127 | 
128 | The `=>` is used to define a function, called the arrow operator.  
129 | Before the arrow operator is the parameter list, everything between the round brackets `()` are parameters, separated by a comma.  
130 | Parameters are variables you can give to your function so that your function can work with them.  
131 | Then after the arrow operator comes the function body, this is everything between the curly brackets `{}`  
132 | This is where you put the code of the function.  
133 | Now that the function is complete, we assign it to a variable to give it a name, in this case `addition`  
134 | 
135 | As you can see, this code takes the parameters `a` and `b` and adds them together.  
136 | Then the function will return the result.  
137 | When a function is defined, the code in the function body is not yet executed. To run a function you have to call it.  
138 | You can call a function by using the name of a function followed by round brackets. In this case `addition()`  
139 | However, the `addition` function requires 2 parameters. These can be passed along by putting them inside the round brackets, comma separated: `addition(1, 2)`  
140 | When the function is done, you can imagine that the function call is replaced by whatever the function has returned. So in this case `let test1 = addition(5, 10)` will become `let test1 = result` (You will not actually see this, but this can help you understand the concept)
141 | 
142 | Sometimes you will come across the following: `function addition() {}` This means the same thing, although `() => {}` is preferred. (If you really want to know why, look up 'javascript function vs arrow function')
143 | 
144 | The above should output the following:
145 | 
146 | ```txt
147 | 15
148 | 1
149 | ```
150 | 
151 | #### Javascript types
152 | 
153 | So far we have only worked with numbers, but Javascript can work with more variable types:
154 | 
155 | - A string is a piece of text that can contain multiple characters. Strings are defined by using the quotes `''`
156 | 
157 | ```js
158 | const string = 'This is a string' // string type
159 | ```
160 | 
161 | - An array is a type that can hold multiple variables inside itself. Arrays are defined by using the square brackets `[]`
162 | 
163 | ```js
164 | const array = [1, 2, 3] // array type
165 | ```
166 | - Object are basically advanced arrays, you will learn more about it later in this tutorial. Their defined by curly brackets `{}`
167 | 
168 | ```js
169 | const object = {} // object type
170 | ```
171 | 
172 | - Functions are also their own type.
173 | 
174 | ```js
175 | const adder = (a, b) => { return a + b } // function type
176 | ```
177 | 
178 | - A boolean is a type that can only be `true` or `false`
179 | 
180 | ```js
181 | const boolean = true // boolean type
182 | ```
183 | 
184 | - When something is not (yet) defined, its type is `undefined`
185 | 
186 | ```js
187 | let nothing // undefined type
188 | const notDefined = undefined // undefined type
189 | ```
190 | 
191 | #### If-statements
192 | 
193 | Sometimes you want to do different things based on a certain condition.  
194 | This can be achieved using if-statements.
195 | 
196 | ```js
197 | const name = 'Bob'
198 | 
199 | if (name === 'Bob') {
200 |   console.log('Your name is Bob')
201 | } else if (name === 'Alice') {
202 |   console.log('Your name is Alice')
203 | } else {
204 |   console.log('Your name is not Bob or Alice')
205 | }
206 | ```
207 | 
208 | An if-statement is created using the `if` keyword. After that you have a condition between the round brackets `()` followed by the body between the curly brackets `{}`
209 | A condition has to be something that computes to a boolean.  
210 | In this case it uses an equal operator `===` which will be `true` if the value in front is the same as the value after. Otherwise it will be `false`
211 | If the condition is `true` the code in the body will be executed.  
212 | You can chain an if-statement with an else-if-statement or an else-statement.  
213 | You can have as many else-if-statements as you want, but only 1 if and else statement.  
214 | If you have an else-statement, it will be called only if all the chained statements before it are `false`
215 | 
216 | #### Loops
217 | 
218 | Loops are used to repeat certain code until a certain conditional is met.
219 | 
220 | ```js
221 | let countDown = 5
222 | 
223 | while (countDown > 0) {
224 |   console.log(countDown)
225 |   countDown = countDown - 1 // Decrement countDown by 1
226 | }
227 | 
228 | console.log('Finished!')
229 | ```
230 | 
231 | The above code will print the following
232 | 
233 | ```txt
234 | 5
235 | 4
236 | 3
237 | 2
238 | 1
239 | Finished!
240 | ```
241 | 
242 | The `while` loop has a condition `()` and a body `{}`  
243 | When the code reaches the loop, it will check the condition. If the condition is `true`, the code in the body will be executed.  
244 | After the end of the body is reached, the condition is checked again, and if `true`, the body executed again.  
245 | This will happen for as long as the condition check is still `true`  
246 | Each loop, this code prints the current `countDown` number, and then decrements it by 1.  
247 | After the 5th loop, the condition `0 > 0` will be `false`, and thus the code will move on.
248 | 
249 | A `for` loop is also often used, and differs slightly from a `while` loop.  
250 | 
251 | ```js
252 | for (let countDown = 5; countDown > 0; countDown = countDown - 1) {
253 |   console.log(countDown)
254 | }
255 | ```
256 | 
257 | Instead of only a condition, the for loops has 3 different parts  
258 | These parts are separated by a semi-column.  
259 | The first parts `let countDown = 5` is only executed once, at the start of the loop.  
260 | The second part `countDown > 0` is the condition, this is the same as the while loop.  
261 | The third part `countDown = countDown - 1` is executed after each loop.:
262 | 
263 | If you want to do something for every item in an array, a `for of` loop can be useful.  
264 | 
265 | ```js
266 | const array = [1, 2, 3]
267 | 
268 | for (const item of array) {
269 |   console.log(item)
270 | }
271 | ```
272 | 
273 | A `for of` loop needs to have a variable before the `of`, this is the variable that can be used to access the current item.  
274 | The variable after the `of` needs to be something that contains other variable. These are mostly arrays, but also some objects.  
275 | The loop will execute the body for each item in the `array` and each loop the `item` variable will be the current item of the `array`
276 | 
277 | #### Node Package manager
278 | 
279 | The last thing you need to know is how to use the [Node Package Manager](https://www.npmjs.com/).  
280 | NPM is automatically installed when you install Node.  
281 | NPM is used to get useful packages that other people created that can do useful things for you.  
282 | You can search for packages on [their website](https://www.npmjs.com/), and then install them using the `npm install` command in your terminal.  
283 | To install Mineflayer for example, run `npm install mineflayer`  
284 | 
285 | Then, Node can access installed modules by using the `require()` function.
286 | 
287 | ```js
288 | const mineflayer = require('mineflayer')
289 | ```
290 | 
291 | After this, the `mineflayer` variable can be used to access all the features of Mineflayer.
292 | 
293 | ### Creating a bot
294 | 
295 | Now that you know the basics of Javascript, Node and NPM, you're ready to start creating your first bot!  
296 | If you don't know any of the terms above, you should go back to the [previous section](#javascript-basics)
297 | 
298 | Below is the absolute minimum necessary to create a Mineflayer bot.
299 | 
300 | ```js
301 | const mineflayer = require('mineflayer')
302 | 
303 | const bot = mineflayer.createBot()
304 | ```
305 | 
306 | If you run this example, you'll notice that your program will not stop. If you want to stop your currently running program, press `Ctrl` + `c`  
307 | However, this bot isn't quite useful, as by default this will connect to a Minecraft server running on your machine with the port 25565.  
308 | If you want to choose which server you want your bot to connect to, you have to pass along a few options.
309 | 
310 | 
311 | ```js
312 | const mineflayer = require('mineflayer')
313 | 
314 | const options = {
315 |   host: 'localhost', // Change this to the ip you want.
316 |   port: 25565 // Change this to the port you want.
317 | }
318 | 
319 | const bot = mineflayer.createBot(options)
320 | ```
321 | 
322 | #### Javascript objects
323 | 
324 | The curly brackets `{}` are used to create an object.  
325 | Objects contain what is called a key-value pair.  
326 | A key-value pair consist of a colon `:` and a key before the colon, and the value of that key after the colon.  
327 | The keys can then be used to retrieve their value.  
328 | You can have multiple key-value pairs by separating them by commas.
329 | 
330 | ```js
331 | const object = {
332 |   number: 10,
333 |   another: 5
334 | }
335 | 
336 | console.log(object.number) // This will print the value 10
337 | ```
338 | 
339 | This concept is often used to create what is named 'named parameters'  
340 | The advantage of this is that you don't have to use all the options available, and their position does not matter.  
341 | The value can be anything, even other object. If the value is a function, that function is often called a method for that object.  
342 | You can also create the object in-line.
343 | 
344 | ```js
345 | const bot = mineflayer.createBot({ host: 'localhost', port: 25565 })
346 | ```
347 | 
348 | #### Logging in
349 | 
350 | Without any parameters, the bot will have the name `Player` and can only log into offline servers. (Cracked & open-to-lan)  
351 | If you supply the `createBot` with an `username` option, it will log in with that username. (Still only in offline server)  
352 | To log into a specific account, you have to supply both the `username` and the `password`
353 | 
354 | ```js
355 | const bot = mineflayer.createBot({
356 |   host: 'localhost',
357 |   port: 25565,
358 |   username: 'Player',
359 |   password: 'password'
360 | })
361 | ```
362 | 
363 | #### Command line arguments
364 | 
365 | What if somebody else likes your bot and wants to use it, but uses it on a different server and with a different account?  
366 | This means that everyone has to change the server address and login settings to their preference. (And it's of course also a bad idea to share your password)  
367 | To counter this, a lot of people use command line arguments.
368 | 
369 | ```js
370 | const bot = mineflayer.createBot({
371 |   host: process.argv[2],
372 |   port: parseInt(process.argv[3]),
373 |   username: process.argv[4],
374 |   password: process.argv[5]
375 | })
376 | ```
377 | 
378 | As you can see, no more sensitive data in your code! But now, how do you run it?  
379 | Now, instead of starting your program with just `node filename.js` you start it with `node filename.js host port username password`  
380 | Node will automatically split the whole command line into an array, separated by spaces.  
381 | This array is `process.argv`  
382 | The data in an array can be accessed using the index of each item. The index always start at 0, so the first item can be accessed with `[0]` and in this case will be `node` etc.
383 | 
384 | | | First item | Second item | Third Item | Fourth item | Fifth item | Sixth item |
385 | | --- | :---: | :---: | :---: | :---: | :---: | :---: |
386 | | Value | `node` | `filename.js` | `host` | `port` | `username` | `password` |
387 | | Index | `[0]` | `[1]` | `[2]` | `[3]` | `[4]` | `[5]`
388 | 
389 | ### Passing along functions
390 | 
391 | Not only basics variables like numbers and strings can be given as an argument.  
392 | Functions can also be passed as a variable.
393 | 
394 | ```js
395 | const welcome = () => {
396 |   bot.chat('hi!')
397 | }
398 | 
399 | bot.once('spawn', welcome)
400 | ```
401 | 
402 | As you can see, the `bot.once()` method takes 2 parameters.  
403 | The first parameter is an event name, the second parameter is the function to call when that event happens.  
404 | Remember, when passing along a function, only use the name and not the round brackets `()`
405 | 
406 | `bot.chat()` is the method for sending message to the chat.
407 | 
408 | You can also simplify this code by using a anonymous function.  
409 | An anonymous function doesn't have a name, and is created at the position where the function name used to go.  
410 | They still have to have a parameter list `()` and a function body `{}`, even if it isn't used.
411 | 
412 | ```js
413 | bot.once('spawn', () => {
414 |   bot.chat('hi!')
415 | })
416 | ```
417 | 
418 | ### Listening for an event
419 | 
420 | The bot object has many useful [events](http://prismarinejs.github.io/mineflayer/#/api?id=events).
421 | You can listen for an event by using either `bot.on()` method or `bot.once()` method of the bot object, which takes the name of an event and a function.
422 | To remove specific listener you can use `bot.removeListener()` method.
423 | 
424 | - `bot.on(eventName, listener)`
425 |   Execute the `listener` function for each time the event named `eventName` triggered.
426 | - `bot.once(eventName, listener)`
427 |   Execute the `listener` function, only once, the first time the event named `eventName` triggered.
428 | - `bot.removeListener(eventName, listener)`
429 |   Removes the specified `listener` for the event named `eventName`. In order to use this you either need to define your function with `function myNamedFunc() {}` or put your function in a variable with `const myNamedFunc = () => {}`. You can then use `myNamedFunc` in the listener argument.
430 | 
431 | Not only bot object, [`Chest`](http://prismarinejs.github.io/mineflayer/#/api?id=mineflayerchest), [`Furnace`](http://prismarinejs.github.io/mineflayer/#/api?id=mineflayerfurnace), [`Dispenser`](http://prismarinejs.github.io/mineflayer/#/api?id=mineflayerdispenser), [`EnchantmentTable`](http://prismarinejs.github.io/mineflayer/#/api?id=mineflayerenchantmenttable), [`Villager`](http://prismarinejs.github.io/mineflayer/#/api?id=mineflayervillager) object also have their own events!
432 | 
433 | ### Promises
434 | A [promise](https://nodejs.dev/learn/understanding-javascript-promises) is a function that you can use the `await` variable to wait on until it's job is complete. (you can omit the await to not wait for results)
435 | 
436 | ```js
437 | async function consume (bot) {
438 |   try {
439 |     await bot.consume()
440 |     console.log('Finished consuming')
441 |   } catch (err) {
442 |     console.log(error)
443 |   }
444 | }
445 | ```
446 | 
447 | The above code will try to consume what the bot is currently holding.  
448 | When the consuming ends, the function that is passed along is called.  
449 | We can then do other things that we want to do after.  
450 | The function could also be called when an error occurs.
451 | 
452 | #### Correct and incorrect approach
453 | 
454 | Below is an example of a bot that will craft oak logs into oak planks and then into sticks.
455 | 
456 | Incorrect approach ❌:
457 | 
458 | ```js
459 | function craft (bot) {
460 |   const mcData = require('minecraft-data')(bot.version)
461 |   const plankRecipe = bot.recipesFor(mcData.itemsByName.oak_planks.id ?? mcData.itemsByName.planks.id)[0] // Get the first recipe for oak planks
462 |   bot.craft(plankRecipe, 1) // ❌ start crafting oak planks.
463 | 
464 |   const stickRecipe = bot.recipesFor(mcData.itemsByName.sticks.id)[0] // Get the first recipe for sticks
465 |   bot.craft(stickRecipe, 1) // ❌ start crafting sticks.
466 | }
467 | ```
468 | 
469 | Correct approach with promises ✔️:
470 | 
471 | ```js
472 | async function craft (bot) {
473 |   const mcData = require('minecraft-data')(bot.version)
474 |   const plankRecipe = bot.recipesFor(mcData.itemsByName.oak_planks.id ?? mcData.itemsByName.planks.id)[0]
475 |   await bot.craft(plankRecipe, 1, null)
476 |   const stickRecipe = bot.recipesFor(mcData.itemsByName.sticks.id)[0]
477 |   await bot.craft(stickRecipe, 1, null)
478 |   bot.chat('Crafting Sticks finished')
479 | }
480 | ```
481 | 
482 | The reason the incorrect approach is wrong is because when `bot.craft()` is called, the code will continue below while the bot is crafting.  
483 | By the time the code reaches the second `bot.craft()`, the first probably hasn't finished yet, which means the wanted resource is not available yet.  
484 | Using promises can fix this because they will only be called after the `bot.craft()` is finished.
485 | 
486 | More on the [bot.craft()](https://github.com/PrismarineJS/mineflayer/blob/master/docs/api.md#botcraftrecipe-count-craftingtable) method.
487 | 
488 | ## Advanced
489 | 
490 | The following concepts aren't necessary to create a Mineflayer bot, but they can be useful to understand and create more advanced bots.  
491 | We assume you have understood the [Basics](#basics) tutorial.
492 | 
493 | ### Loop over an object
494 | 
495 | The `for of` loop described in the [loops](#loops) chapter can also be used to loop over an object.
496 | 
497 | If we have the following object:
498 | 
499 | ```js
500 | const obj = {
501 |   a: 1,
502 |   b: 2,
503 |   c: 3
504 | }
505 | ```
506 | 
507 | The following will loop over all the values of the object.
508 | 
509 | ```js
510 | for (const value of Object.values(obj)) {
511 |   console.log(value)
512 | }
513 | ```
514 | 
515 | ```txt
516 | 1
517 | 2
518 | 3
519 | ```
520 | 
521 | This will loop over all the keys of the object.
522 | 
523 | ```js
524 | for (const key of Object.keys(obj)) {
525 |   console.log(key)
526 | }
527 | ```
528 | 
529 | ```txt
530 | a
531 | b
532 | c
533 | ```
534 | 
535 | You can also loop over the keys and values at the same time. You will have to destructure the variables first, explained [here.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)
536 | 
537 | ```js
538 | for (const [key, value] of Object.entries(obj)) {
539 |   console.log(key + ', ' + value)
540 | }
541 | ```
542 | 
543 | ```txt
544 | a, 1
545 | b, 2
546 | c, 3
547 | ```
548 | 
549 | These loops are possible because `Object.values(obj)` and `Object.keys(obj)` both return an array of the objects values and keys respectively.  
550 | `Object.entries(obj)` returns an array where each item is an array with 2 items: a key and its corresponding value.  
551 | It's important to know that, unlike the `Object.values()` and `Object.keys()` functions, the `Object.entries()` function does not guarantee that the order is the same as the order when the object was defined.
552 | 
553 | There is also a `for in` loop. However, you will most often want to use `for of` instead of `for in` because there are key differences.  
554 | The `for in` loop loops over the keys of an object instead of the values. (The index in case it is an array)
555 | However, it doesn't loop only over its own keys, but also keys from other object it 'inherits' from, which can be confusing or unwanted. More on this [here.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in)
556 | In general, you'll want to use `for of` instead of `for in` so make sure you don't confuse the two.
557 | 
558 | ### Creating an event from chat
559 | 
560 | You can create your own event from chat using [`bot.chatAddPattern()`](http://prismarinejs.github.io/mineflayer/#/api?id=botchataddpatternpattern-chattype-description) method. Useful for Bukkit servers where the chat format changes a lot.
561 | [`bot.chatAddPattern()`](http://prismarinejs.github.io/mineflayer/#/api?id=botchataddpatternpattern-chattype-description) method takes three arguments :
562 | 
563 | - `pattern` - regular expression (regex) to match chat
564 | - `chatType` - the event the bot emits when the pattern matches. e.g. "chat" or "whisper"
565 | - `description` - Optional, describes what the pattern is for
566 | 
567 | You can add [Groups and Range](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges) into the `pattern`, then the listener will spread the captured groups into arguments of your callback sequentially.
568 | 
569 | Read more about [regular expression](https://en.wikipedia.org/wiki/Regular_expression).
570 | 
571 | Examples :
572 | 
573 | #### Answer Hello Bot
574 | 
575 | Here we're creating a bot that answer 'hello' from the other player.
576 | 
577 | ```js
578 | bot.chatAddPattern(
579 |   /(helo|hello|Hello)/,
580 |   'hello',
581 |   'Someone says hello'
582 | )
583 | 
584 | const hi = () => {
585 |   bot.chat('Hi!')
586 | }
587 | 
588 | bot.on('hello', hi)
589 | ```
590 | 
591 | #### Custom chat
592 | 
593 | Creating an event based on custom chat format.  
594 | Custom chat example:
595 | 
596 | ```txt
597 | [Player] Player1 > Hello
598 | [Admin] Alex > Hi
599 | [Player] Player2 > Help me, im stuck
600 | [Mod] Jim > On my way
601 | ```
602 | 
603 | ```js
604 | bot.chatAddPattern(
605 |   /^\[(.+)\] (\S+) > (.+)$/,
606 |   'my_chat_event',
607 |   'Custom chat event'
608 | )
609 | 
610 | const logger = (rank, username, message) => {
611 |   console.log(`${username} said ${message}`)
612 | }
613 | 
614 | bot.on('my_chat_event', logger)
615 | ```
616 | 
617 | Explanation on the regex `^\[(.+)\] (\S+) > (.+)




    
    

    
    
    
    

    
    
    
    



    



    

    

    

         can be found [here](https://regex101.com/r/VDUrDC/2).
618 | 
619 | ## FAQ
620 | 
621 | ### How to run a bot on android
622 | 
623 | Here is a quick setup for running a bot on an android device using [Termux](https://termux.com/).
624 | 
625 | #### Install Termux
626 | 
627 | Install [Termux](https://termux.com/) and start it.
628 | 
629 | #### Setup
630 | 
631 | Install `Node.js`:
632 | 
633 | ```bash
634 | pkg update -y
635 | pkg install nodejs -y
636 | ```
637 | 
638 | ❗️ Allow Storage permission for Termux on app settings.
639 | Create new folder on internal storage :
640 | 
641 | ```bash
642 | cd /sdcard
643 | mkdir my_scripts
644 | cd my_scripts
645 | ```
646 | 
647 | Install `mineflayer`:
648 | 
649 | ```bash
650 | npm install mineflayer
651 | ```
652 | 
653 | Now you can copy / store all of your scripts into `my_scripts` folder inside Internal Storage.
654 | 
655 | #### Start your bot
656 | 
657 | To start the bot, run Node with the name of your script.
658 | 
659 | ```bash
660 | node script_name.js
661 | ```
662 | 
663 | ❗️ For each time opening Termux you must change the cwd into `/sdcard/my_scripts`, before starting the bot:
664 | 
665 | ```bash
666 | cd /sdcard/my_scripts
667 | ```
668 | 


--------------------------------------------------------------------------------
/docs/unstable_api.md:
--------------------------------------------------------------------------------
 1 | <!-- START doctoc generated TOC please keep comment here to allow auto update -->
 2 | <!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
 3 | **Table of Contents**  *generated with [DocToc](https://github.com/thlorenz/doctoc)*
 4 | 
 5 | - [unstable API : bot._](#unstable-api--bot_)
 6 |   - [bot._client](#bot_client)
 7 | 
 8 | <!-- END doctoc generated TOC please keep comment here to allow auto update -->
 9 | 
10 | # unstable API : bot._
11 | 
12 | These methods and classes are useful in some special cases but are not stable and can change at any moment.
13 | 
14 | ## bot._client
15 | 
16 | `bot._client` is created using [node-minecraft-protocol](https://github.com/PrismarineJS/node-minecraft-protocol).
17 | It handles writing and reading packet.
18 | Its behaviour can change (for example at each new minecraft version) so it's better to use mineflayer methods if possible.


--------------------------------------------------------------------------------
/docs/zh/CONTRIBUTING.md:
--------------------------------------------------------------------------------
 1 | # 贡献
 2 | 
 3 | Mineflayer 最初主要是由 [andrewrk](http://github.com/andrewrk) 制作的
 4 | 但自那以后，许多[贡献者](https://github.com/andrewrk/mineflayer/graphs/contributors)对其进行了改进和修复 
 5 | 所以知道如何为mineflayer做出贡献的最佳方式很重要
 6 | 
 7 | ## Issue organization
 8 | 
 9 | 我们有3个阶段标签来尝试组织Issue:
10 | 
11 | * Stage 1: 只是由项目新手创建的，我们还不知道它是否值得实现/修复
12 | * Stage 2: 有希望的想法，但在实施前需要更多思考
13 | * Stage 3: 想法被精确地指定了，就剩写代码了
14 | 
15 | 链接如 https://github.com/PrismarineJS/mineflayer/issues?q=is%3Aopen+is%3Aissue+-label%3AStage1 can be used to filter out stage 1 if you're looking for things that are ready for contribution
16 | 
17 | ## 创建测试
18 | Mineflayer 有两种测试 :
19 | 
20 |  * [internal tests](test/internalTest.js) : 针对使用node-minecraft-protocol创建的简单服务器进行的测试
21 |  * [external tests](test/externalTests/) : 针对原版服务器进行的测试
22 | 
23 | The objective of these tests is to know automatically what works and what doesn't in mineflayer, so it's easier to make mineflayer work.
24 | 
25 | ### 创建外部测试
26 | 
27 | In order to add an external test now you only need to create a file in [test/externalTests](test/externalTests)
28 | 
29 | 一个例子 : [test/externalTests/digAndBuild.js](https://github.com/PrismarineJS/mineflayer/blob/master/test/externalTests/digAndBuild.js)
30 | 
31 | That file needs to export a function returning a function or an array of function taking as parameter the bot object and a done callback,
32 |  it should contain asserts to test if the tested functionality failed.
33 | 
34 | 
35 | ## 创建第三方插件
36 | Mineflayer 是可扩展的插件化的； 任何人都可以创建一个插件，在 Mineflayer 之上添加更高级别的 API。
37 | 
38 | 已经开发了几个这样的第三方插件 [查看](https://github.com/andrewrk/mineflayer#third-party-plugins)
39 | 
40 | 为了创建一个新的，您需要 :
41 | 
42 | 1. 创建一个新的 repo
43 | 2. 在你的 index.js 文件中, 导出一个接受参数 mineflayer 的 init 函数 ([查看例子](https://github.com/andrewrk/mineflayer-navigate/blob/e24cb6a868ce64ae43bea2d035832c15ed01d301/index.js#L18))
44 | 3. that function returns a inject function taking in argument the bot object ([example](https://github.com/andrewrk/mineflayer-navigate/blob/e24cb6a868ce64ae43bea2d035832c15ed01d301/index.js#L23))
45 | 4. that inject function add functionalities to the bot object ([example](https://github.com/andrewrk/mineflayer-navigate/blob/e24cb6a868ce64ae43bea2d035832c15ed01d301/index.js#L32))
46 | 
47 | Since the mineflayer object is passed in parameter, that new package doesn't need to depend on mineflayer (no mineflayer dependency in the package.json)
48 | 
49 | 参考 [全部示例](https://github.com/andrewrk/mineflayer-navigate/tree/e24cb6a868ce64ae43bea2d035832c15ed01d301) 
50 | 
51 | ## 反馈Bug
52 | Mineflayer 在大多数情况下都能很好地工作，但有时仍然存在bug.
53 | 
54 | 找到一个问题时，最好报告一个提供这些信息的问题 :
55 | 
56 | * 你想做什么 (英语目标)
57 | * 你尝试过什么 (代码)
58 | * 发生了什么事
59 | * 你期望会发生什么
60 | 
61 | ## Mineflayer 代码
62 | 提交请求或提交提交时需要考虑的一些事情 :
63 | 
64 | ### 错误处理
65 | 在大多数情况下，mineflayer不会让机器人崩溃。即使有些东西失败了，机器人也可以选择另一条路线来达到它的目标。
66 | 
67 | 这意味着我们不应该使用 `throw(new Error("error"))` 而是使用node.js约定在回调中传递错误。
68 | 
69 | 例如 : 
70 | 
71 | ```js
72 | function myfunction (param1, callback) {
73 |   // do stuff
74 |   let toDo = 1
75 |   toDo = 2
76 |   if (toDo === 2) { // 一切正常
77 |     callback()
78 |   } else {
79 |     callback(new Error('什么东西出错了'))
80 |   }
81 | }
82 | ```
83 | 
84 | 请参考另一个例子 [mineflayer code](https://github.com/andrewrk/mineflayer/blob/a8736c4ea473cf1a609c5a29046c0cdad006d429/lib/plugins/bed.js#L10)
85 | 
86 | ### 更新文档
87 | docs/api.md 的内容是用doctoc制作的。更新该文件后，应运行 `doctoc docs/api.md` 以更新目录。
88 | 
89 | 没有doctoc命令使用下面的命令安装
90 | 
91 | ```bash
92 | npm install -g doctoc
93 | ```
94 | 


--------------------------------------------------------------------------------
/docs/zh/FAQ.md:
--------------------------------------------------------------------------------
  1 | ## FAQ
  2 | 
  3 | 本文档旨在帮助人们解决常见问题
  4 | 
  5 | ### 如何隐藏报错 ?
  6 | 
  7 | 在createBot选项中使用`hideErrors:true`
  8 | 您也可以选择添加这些监听事件:
  9 | 
 10 | ```js
 11 | client.on('error', () => {})
 12 | client.on('end', () => {})
 13 | ```
 14 | 
 15 | ### 我无法在自定义服务器上获取聊天事件，如何解决?
 16 | 
 17 | Spigot 服务器, 特别是一些插件, 使用的是自定义聊天格式,您需要使用自定义正则表达式/解析器对其进行解析。
 18 | 阅读并改编[chat_parsing.js](https://github.com/PrismarineJS/mineflayer/blob/master/examples/chat_parsing.js)使其适用于您的特定聊天插件. 或者阅读 http://prismarinejs.github.io/mineflayer/#/tutorial?id=custom-chat
 19 | 
 20 | ### 如何用自定义插件在聊天中收集信息 ?
 21 | 
 22 | 大多数定制的Minecraft服务器都有插件支持，很多插件会在聊天中说一些事情. 如果只是一条信息, 最好使用上述解决方案中讨论的解决方案, 但是当这些消息被分成许多小消息时, 另一个选择是使用 `"messagestr"` 事件 因为它允许轻松解析多行消息.
 23 | 
 24 | **例子:**
 25 | 
 26 | 聊天栏中的信息看起来像:
 27 | ```
 28 | (!) U9G has won the /jackpot and received
 29 | $26,418,402,450! They purchased 2,350,000 (76.32%) ticket(s) out of the
 30 | 3,079,185 ticket(s) sold!
 31 | ```
 32 | ```js
 33 | const regex = {
 34 |   first: /\(!\) (.+) has won the \/jackpot and received +/,
 35 |   second: /\$(.+)! They purchased (.+) \((.+)%\) ticket\(s\) out of the /,
 36 |   third: /(.+) ticket\(s\) sold!/
 37 | }
 38 | 
 39 | let jackpot = {}
 40 | bot.on('messagestr', msg => {
 41 |   if (regex.first.test(msg)) {
 42 |     const username = msg.match(regex.first)[1]
 43 |     jackpot.username = username
 44 |   } else if (regex.second.test(msg)) {
 45 |     const [, moneyWon, boughtTickets, winPercent] = msg.match(regex.second)
 46 |     jackpot.moneyWon = parseInt(moneyWon.replace(/,/g, ''))
 47 |     jackpot.boughtTickets = parseInt(boughtTickets.replace(/,/g, ''))
 48 |     jackpot.winPercent = parseFloat(winPercent)
 49 |   } else if (regex.third.test(msg)) {
 50 |     const totalTickets = msg.match(regex.third)[1]
 51 |     jackpot.totalTickets = parseInt(totalTickets.replace(/,/g, ''))
 52 |     onDone(jackpot)
 53 |     jackpot = {}
 54 |   }
 55 | })
 56 | ```
 57 | ### 如何发送命令 ?
 58 | 
 59 | 使用  `bot.chat()`.
 60 | 
 61 | **例子:**
 62 | 
 63 | ```js
 64 | bot.chat('/give @p minecraft:diamond_sword')
 65 | ```
 66 | 
 67 | ### 是否可以使用bot = mineflayer.createbot登录多个帐户  同时分别控制它们 ?
 68 | 
 69 | 通过调用createBot创建不同的bot实例，然后为每个实例执行不同的操作，请参考 multiple.js
 70 | 
 71 | ### 如何让机器人丢出它的全部背包物品?
 72 | 
 73 | bot.inventory.items() 返回机器人的物品数组. 您可以使用递归函数循环遍历它们，并使用 `bot.toss()`.  [点这里](https://gist.github.com/dada513/3d88f772be4224b40f9e5d1787bd63e9) 查看例子
 74 | 
 75 | ### 如何检查发送/接收的数据包 ?
 76 | 
 77 | 启用调试模式 https://github.com/PrismarineJS/mineflayer#debug
 78 | 
 79 | ### 我希望即使在服务器有延迟的情况下也能避免断开连接，如何实现这一点 ?
 80 | 
 81 | 一种方法是增加 [checkTimeoutInterval](https://github.com/PrismarineJS/node-minecraft-protocol/blob/master/docs/API.md#mccreateclientoptions) 选项的值(在createBot中设置)  (例如 `300*1000` 这是5分钟，而不是默认的30秒). 如果仍然断开连接，可以使用类似于此示例的方法自动重新连接 https://github.com/PrismarineJS/mineflayer/blob/master/examples/reconnector.js
 82 | 
 83 | ### 如何获取物品的 lore / text?
 84 | 
 85 | 你可以使用 `item.nbt` 属性. 此外建议使用 `prismarine-nbt` 库.   `nbt.simplify()` 方法可能有用
 86 | 
 87 | **例子:**
 88 | 
 89 | ```js
 90 | function getLore (item) {
 91 |   let message = ''
 92 |   if (item.nbt == null) return message
 93 | 
 94 |   const nbt = require('prismarine-nbt')
 95 |   const ChatMessage = require('prismarine-chat')(bot.version)
 96 | 
 97 |   const data = nbt.simplify(item.nbt)
 98 |   const display = data.display
 99 |   if (display == null) return message
100 | 
101 |   const lore = display.Lore
102 |   if (lore == null) return message
103 |   for (const line of lore) {
104 |     message += new ChatMessage(line).toString()
105 |     message += '\n'
106 |   }
107 | 
108 |   return message
109 | }
110 | ```
111 | 
112 | ### 如何从控制台发送消息到服务器?
113 | 
114 | 您可以使用类似`repl`的库来读取控制台输入的内容并用`bot.chat()`发送它。 你可以在这查看例子 [点这里](https://github.com/PrismarineJS/mineflayer/blob/master/examples/repl.js)
115 | 
116 | ### 创建插件时，如何将另一个插件指定为依赖项？
117 | 
118 | 在插件的`inject()`函数中，您可以安全地调用`bot.loadPlugin(anotherPlugin)`确保已加载该插件。如果插件之前已经加载，则不会发生任何事情。
119 | 
120 | 请注意，加载插件的顺序是动态的, 因此，永远不要在`inject()`函数中调用其他插件.
121 | 
122 | ### 如何使用socks5代理？
123 | 
124 | 在对象的选项中 `mineflayer.createBot(options)`,从选项对象中删除你的 `host` 选项,声明以下变量 `PROXY_IP, PROXY_PORT, PROXY_USERNAME, PROXY_PASSWORD, MC_SERVER_IP, MC_SERVER_PORT` 并将其添加到选项对象中:
125 | ```js
126 | connect: (client) => {
127 |   socks.createConnection({
128 |     proxy: {
129 |       host: PROXY_IP,
130 |       port: PROXY_PORT,
131 |       type: 5,
132 |       userId: PROXY_USERNAME,
133 |       password: PROXY_PASSWORD
134 |     },
135 |     command: 'connect',
136 |     destination: {
137 |       host: MC_SERVER_IP,
138 |       port: MC_SERVER_PORT
139 |     }
140 |   }, (err, info) => {
141 |     if (err) {
142 |       console.log(err)
143 |       return
144 |     }
145 |     client.setSocket(info.socket)
146 |     client.emit('connect')
147 |   })
148 | }
149 | ```
150 |   `socks` 用 `const socks = require('socks').SocksClient` 声明 使用的是[这个](https://www.npmjs.com/package/socks) 包.
151 | 
152 | # 常见错误
153 | 
154 | ### `UnhandledPromiseRejectionWarning: Error: Failed to read asymmetric key`
155 | 
156 | 当你给 mineflayer 设定了错误的服务器版本，或者 mineflayer 检测到错误的服务器版本时会发生这种情况
157 | 
158 | ### `TypeError: Cannot read property '?' of undefined`
159 | 
160 | 您可能正在尝试在 bot 对象上使用尚不存在的内容，请尝试在 `spawn` 事件之后调用该语句
161 | 
162 | ### `SyntaxError: Unexpected token '?'`
163 | 
164 | 更新node版本
165 | 
166 | ### The bot can't break/place blocks or open chests
167 | 
168 | 检查出生点保护是否阻止了机器人的操作
169 | 
170 | 


--------------------------------------------------------------------------------
/docs/zh/README_ZH_CN.md:
--------------------------------------------------------------------------------
  1 | # Mineflayer
  2 | 
  3 | [![NPM version](https://badge.fury.io/js/mineflayer.svg)](http://badge.fury.io/js/mineflayer)
  4 | [![Build Status](https://github.com/PrismarineJS/mineflayer/workflows/CI/badge.svg)](https://github.com/PrismarineJS/mineflayer/actions?query=workflow%3A%22CI%22)
  5 | [![Discord](https://img.shields.io/badge/chat-on%20discord-brightgreen.svg)](https://discord.gg/GsEFRM8)
  6 | [![Gitter](https://img.shields.io/badge/chat-on%20gitter-brightgreen.svg)](https://gitter.im/PrismarineJS/general)
  7 | [![Irc](https://img.shields.io/badge/chat-on%20irc-brightgreen.svg)](https://irc.gitter.im/)
  8 | [![Issue Hunt](https://github.com/BoostIO/issuehunt-materials/blob/master/v1/issuehunt-shield-v1.svg)](https://issuehunt.io/r/PrismarineJS/mineflayer)
  9 | 
 10 | [![Try it on gitpod](https://img.shields.io/badge/try-on%20gitpod-brightgreen.svg)](https://gitpod.io/#https://github.com/PrismarineJS/mineflayer)
 11 | [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/PrismarineJS/mineflayer/blob/master/docs/mineflayer.ipynb)
 12 | 
 13 | | <sub>EN</sub> [English](../README.md) | <sub>RU</sub> [русский](../ru/README_RU.md) | <sub>ES</sub> [Español](../es/README_ES.md) | <sub>FR</sub> [Français](../fr/README_FR.md) | <sub>TR</sub> [Türkçe](../tr/README_TR.md) | <sub>ZH</sub> [中文](../zh/README_ZH_CN.md) | <sub>BR</sub> [Portuguese](../br/README_BR.md) |
 14 | |-------------------------|----------------------------|----------------------------|----------------------------|----------------------------|----------------------------|----------------------------|
 15 | 
 16 | 使用强大、稳定、高级的 JavaScript [API](../api.md) 来开发 Minecraft 机器人，同时支持 Python。
 17 | 
 18 | 第一次使用 node.js ？你可以先看看 [使用教程](../tutorial.md) 。了解过 Python？这里有一些 [Python 实例](https://github.com/PrismarineJS/mineflayer/tree/master/examples/python)，同时你也可以[在谷歌 Colab 中运行 Mineflayer](https://colab.research.google.com/github/PrismarineJS/mineflayer/blob/master/docs/mineflayer.ipynb) 来体验一下。
 19 | 
 20 | ## 特点
 21 | 
 22 |  * 支持版本：Minecraft 1.8, 1.9, 1.10, 1.11, 1.12, 1.13, 1.14, 1.15, 1.16, 1.17, 1.18, 1.19 和 1.20 
 23 |  * 实体感知与追踪
 24 |  * 方块感知，你可以在几毫秒内查找到bot周围的任何方块
 25 |  * 物理和运动引擎 - 支持所有的碰撞箱
 26 |  * 攻击实体，使用交通工具
 27 |  * 背包管理
 28 |  * 使用工作台、箱子、酿造台、附魔台
 29 |  * 挖掘和建造
 30 |  * 各种各样的的信息接口，比如查看你的血量或是否下雨
 31 |  * 激活方块和使用物品
 32 |  * 进行聊天
 33 | 
 34 | ### 路线图
 35 | 
 36 |  [点这里](https://github.com/PrismarineJS/mineflayer/wiki/Big-Prismarine-projects) 看看目前我们有哪些实用的项目
 37 | 
 38 | ## 安装
 39 | 
 40 | 首先，从 [nodejs.org](https://nodejs.org/) 安装 nodejs（版本要求 >= 18），
 41 | 
 42 | 然后在你创建的bot项目目录中，使用命令行运行：
 43 | 
 44 | `npm install mineflayer`
 45 | 
 46 | ## 文档
 47 | 
 48 | | 链接 | 描述 |
 49 | |---|---|
 50 | | [使用教程](../tutorial.md) | node.js 和 mineflayer 入门 |
 51 | | [FAQ](../FAQ.md) | 使用中出现问题？先看看这个文档吧 |
 52 | | [api](../api.md)、[不稳定的api](../unstable_api.md) | 完整的接口参考文档 |
 53 | | [更新日志](../history.md) | mineflayer 的更新日志 |
 54 | | [示例/](https://github.com/PrismarineJS/mineflayer/tree/master/examples) | 我们为你准备的 mineflayer 使用实例 |
 55 | 
 56 | ## 参与贡献
 57 | 
 58 | 请参阅 [为本项目贡献](../CONTRIBUTING.md)，以及[为 Prismarine 贡献](https://github.com/PrismarineJS/prismarine-contribute)
 59 | 
 60 | ## 如何使用
 61 | 
 62 | **视频**（Youtube）
 63 | 
 64 | [这里](https://www.youtube.com/watch?v=ltWosy4Z0Kw) 是一个解释bot基本设置过程的教程视频。
 65 | 
 66 | 如果你想了解更多，更多的视频教程可以在 [这里](https://www.youtube.com/playlist?list=PLh_alXmxHmzGy3FKbo95AkPp5D8849PEV) 找到，视频的相应的源码在 [这里](https://github.com/TheDudeFromCI/Mineflayer-Youtube-Tutorials) 。
 67 | 
 68 | [<img src="https://img.youtube.com/vi/ltWosy4Z0Kw/0.jpg" alt="tutorial 1" width="200">](https://www.youtube.com/watch?v=ltWosy4Z0Kw)
 69 | [<img src="https://img.youtube.com/vi/UWGSf08wQSc/0.jpg" alt="tutorial 2" width="200">](https://www.youtube.com/watch?v=UWGSf08wQSc)
 70 | [<img src="https://img.youtube.com/vi/ssWE0kXDGJE/0.jpg" alt="tutorial 3" width="200">](https://www.youtube.com/watch?v=ssWE0kXDGJE)
 71 | [<img src="https://img.youtube.com/vi/walbRk20KYU/0.jpg" alt="tutorial 4" width="200">](https://www.youtube.com/watch?v=walbRk20KYU)
 72 | 
 73 | **开始使用**
 74 | 
 75 | 如果没有指定特定版本，使用的服务器版本将自动判断并使用。  
 76 | 如果没有指定登录类型，默认使用 mojang 账户认证登录。
 77 | 
 78 | ### 例子：复读机
 79 | 
 80 | ```js
 81 | const mineflayer = require('mineflayer')
 82 | 
 83 | const bot = mineflayer.createBot({
 84 |   host: 'localhost', // minecraft 服务器的 IP 地址
 85 |   username: 'email@example.com', // minecraft 用户名
 86 |   password: '12345678' // minecraft 密码, 如果你玩的是不需要正版验证的服务器，请注释掉。
 87 |   // port: 25565,                // 默认使用 25565，如果你的服务器端口不是这个请取消注释并填写。
 88 |   // version: false,             // 如果需要指定使用一个版本或快照时，请取消注释并手动填写（如："1.8.9" 或 "1.16.5"），否则会自动设置。
 89 |   // auth: 'mojang'              // 如果需要使用微软账号登录时，请取消注释，然后将值设置为 'microsoft'，否则会自动设置为 'mojang'。
 90 | })
 91 | 
 92 | bot.on('chat', (username, message) => {
 93 |   if (username === bot.username) return
 94 |   bot.chat(message)
 95 | })
 96 | 
 97 | // 记录错误和被踢出服务器的原因:
 98 | bot.on('kicked', console.log)
 99 | bot.on('error', console.log)
100 | ```
101 | 
102 | ### 看看你的 bot 在做什么
103 | 
104 | 感谢 [prismarine-viewer](https://github.com/PrismarineJS/prismarine-viewer)项目，它可以在浏览器窗口显示你的机器人正在做什么。  
105 | 只需要运行 `npm install prismarine-viewer` 并将其添加到你的 bot 代码中。
106 | 
107 | ```js
108 | const { mineflayer: mineflayerViewer } = require('prismarine-viewer')
109 | bot.once('spawn', () => {
110 |   mineflayerViewer(bot, { port: 3007, firstPerson: true }) // port 是本地网页运行的端口 ，如果 firstPerson: false，那么将会显示鸟瞰图。
111 | })
112 | ```
113 | 
114 | 然后你会得到一个看起来像这样的*实时视图*：
115 | 
116 | [<img src="https://prismarinejs.github.io/prismarine-viewer/test_1.16.1.png" alt="viewer" width="500">](https://prismarinejs.github.io/prismarine-viewer/)
117 | 
118 | #### 更多示例
119 | 
120 | | 例子 | 描述 |
121 | |---|---|
122 | |[viewer](https://github.com/PrismarineJS/mineflayer/tree/master/examples/viewer) | 在浏览器中显示 bot 的视角 |
123 | |[pathfinder](https://github.com/PrismarineJS/mineflayer/tree/master/examples/pathfinder) | 让你的 bot 自动前往任何地点  |
124 | |[chest](https://github.com/PrismarineJS/mineflayer/blob/master/examples/chest.js) | 使用箱子、熔炉、酿造台、附魔台 |
125 | |[digger](https://github.com/PrismarineJS/mineflayer/blob/master/examples/digger.js) | 学习如何创建一个能够挖掘方块的简单bot |
126 | |[discord](https://github.com/PrismarineJS/mineflayer/blob/master/examples/discord.js) | 将 discord bot 与 mineflayer bot 进行消息互通 |
127 | |[jumper](https://github.com/PrismarineJS/mineflayer/blob/master/examples/jumper.js) | 学习如何移动、跳跃、骑乘载具、攻击附近的实体 |
128 | |[ansi](https://github.com/PrismarineJS/mineflayer/blob/master/examples/ansi.js) | 使用全彩色在命令行中显示 bot 的聊天记录 |
129 | |[guard](https://github.com/PrismarineJS/mineflayer/blob/master/examples/guard.js) | 让bot守卫一个指定的区域，不让附近的生物进入。 |
130 | |[multiple-from-file](https://github.com/PrismarineJS/mineflayer/blob/master/examples/multiple_from_file.js) | 创建一个包含账户信息的文本文件，让它们全部同时登录 |
131 | 
132 | 还有更多的例子在 [examples](https://github.com/PrismarineJS/mineflayer/tree/master/examples) 文件夹中
133 | 
134 | ### 模块
135 | 
136 | 很多活跃的开发都发生在 mineflayer 所使用的小型 npm 包内
137 | 
138 | #### The Node Way & trade;
139 | 
140 | > "当你很好的编写了一个应用程序，此时它的价值仅限于这些特定的需求。你要知道，真正好的、可重复使用的优秀组件都会升华到github和npm上，在那里，每个人都可以合作来推进公共事业。" — [《 how I write modules 》 - substack](https://gist.github.com/substack/5075355)
141 | 
142 | #### 子模块
143 | 
144 | 这些是 构成 mineflayer 的主要模块：
145 | 
146 | | 模块 | 描述 |
147 | |---|---|
148 | | [minecraft-protocol](https://github.com/PrismarineJS/node-minecraft-protocol) | 解析和序列化 minecraft 数据包，以及身份验证和加密。
149 | | [minecraft-data](https://github.com/PrismarineJS/minecraft-data) | 为 minecraft 客户端、服务器和库提供 minecraft 数据的语言独立模块。
150 | | [prismarine-physics](https://github.com/PrismarineJS/prismarine-physics) |  为 minecraft 实体提供物理引擎
151 | | [prismarine-chunk](https://github.com/PrismarineJS/prismarine-chunk) | 一个为 Minecraft 保存区块数据的类
152 | | [node-vec3](https://github.com/PrismarineJS/node-vec3) | 具有强大单元测试的 3d 矢量数学
153 | | [prismarine-block](https://github.com/PrismarineJS/prismarine-block) | 用相关数据表示一个 minecraft 方块
154 | | [prismarine-chat](https://github.com/PrismarineJS/prismarine-chat) | minecraft 聊天消息解析器（从 mineflayer 中提取）
155 | | [node-yggdrasil](https://github.com/PrismarineJS/node-yggdrasil) | Node.js 库与 Mojang 的身份验证系统交互
156 | | [prismarine-world](https://github.com/PrismarineJS/prismarine-world) | prismarine 世界的核心实现
157 | | [prismarine-windows](https://github.com/PrismarineJS/prismarine-windows) | 表示 minecraft 窗口
158 | | [prismarine-item](https://github.com/PrismarineJS/prismarine-item) | 用相关数据表示一个 minecraft 物品
159 | | [prismarine-nbt](https://github.com/PrismarineJS/prismarine-nbt) | node-minecraft-protocol 的 NBT 解析器
160 | | [prismarine-recipe](https://github.com/PrismarineJS/prismarine-recipe) | 展示我的世界合成表
161 | | [prismarine-biome](https://github.com/PrismarineJS/prismarine-biome) | 用相关数据表示 minecraft 生物群落
162 | | [prismarine-entity](https://github.com/PrismarineJS/prismarine-entity) |  表示一个 minecraft 实体
163 | 
164 | ### 调试
165 | 
166 | 您可以使用 `DEBUG` 环境变量启用某些协议调试输出：
167 | 
168 | ```bash
169 | DEBUG="minecraft-protocol" node [...]
170 | ```
171 | 
172 | 在 windows 上:
173 | 
174 | ```powershell
175 | set DEBUG=minecraft-protocol
176 | node your_script.js
177 | ```
178 | 
179 | ## 第三方插件
180 | 
181 | mineflayer 支持插件；任何人都可以创建一个插件，在 mineflayer 之上添加更高级别的 API。
182 | 
183 | 最新和最有用的有：
184 | 
185 | * [pathfinder](https://github.com/Karang/mineflayer-pathfinder) - 具有许多可配置功能的高级 A* 寻路
186 | * [prismarine-viewer](https://github.com/PrismarineJS/prismarine-viewer) - 简单的在线区块查看器
187 | * [web-inventory](https://github.com/ImHarvol/mineflayer-web-inventory) - 在线背包查看器
188 | * [statemachine](https://github.com/TheDudeFromCI/mineflayer-statemachine) - 用于更复杂机器人行为的状态机 API
189 | * [Armor Manager](https://github.com/G07cha/MineflayerArmorManager) - 自动护甲管理
190 | * [Collect Block](https://github.com/TheDudeFromCI/mineflayer-collectblock) - 快速简单的块收集 API
191 | * [Dashboard](https://github.com/wvffle/mineflayer-dashboard) - mineflayer bot 的前端仪表板
192 | * [PVP](https://github.com/TheDudeFromCI/mineflayer-pvp) - 用于基本 PVP 和 PVE 的简单 API
193 | * [auto-eat](https://github.com/LINKdiscordd/mineflayer-auto-eat) - 自动进食
194 |  * [Auto Crystal](https://github.com/link-discord/mineflayer-autocrystal) - 自动放置和破碎结
195 |  * [Tool](https://github.com/TheDudeFromCI/mineflayer-tool) - 一个具有高级API的工具/武器自动选择工具的工具
196 |  * [Hawkeye](https://github.com/sefirosweb/minecraftHawkEye) - 一个使用自动瞄准弓的工具
197 |  * [GUI](https://github.com/firejoust/mineflayer-GUI) - 简化了嵌套箱子GUI窗口的导航和管理
198 |  * [Projectile](https://github.com/firejoust/mineflayer-projectile) - 以投射物为基础的战斗的可配置插件
199 | 
200 | 
201 |  也可以看看这些 :
202 | 
203 | * [radar](https://github.com/andrewrk/mineflayer-radar/) - 使用 canvas 和 socket.io 的基于 Web 的雷达界面 [YouTube 演示](https://www.youtube.com/watch?v=FjDmAfcVulQ)
204 | * [blockfinder](https://github.com/Darthfett/mineflayer-blockFinder) - 在 3D 世界中寻找方块
205 | * [scaffold](https://github.com/andrewrk/mineflayer-scaffold) - 到达目标目的地，即使您必须建造或破坏块才能这样做 [YouTube 演示](http://youtu.be/jkg6psMUSE0)
206 | * [auto-auth](https://github.com/G07cha/MineflayerAutoAuth) - 基于聊天的bot身份验证
207 | * [Bloodhound](https://github.com/Nixes/mineflayer-bloodhound) - 确定谁和什么对另一个实体的损害负责
208 | * [tps](https://github.com/SiebeDW/mineflayer-tps) - 获取当前的 tps（已处理的 tps）
209 | * [panorama](https://github.com/IceTank/mineflayer-panorama) - 拍摄您的世界的全景图像
210 |  * [player-death-event](https://github.com/tuanzisama/mineflayer-death-event) - 在 Mineflayer 里监听玩家死亡事件
211 | 
212 | ## 正在使用 mineflayer 的项目
213 | 
214 | * [rom1504/rbot](https://github.com/rom1504/rbot)
215 |   * [YouTube - 建造旋转楼梯](https://www.youtube.com/watch?v=UM1ZV5200S0)
216 |   * [YouTube - 复制一个建筑](https://www.youtube.com/watch?v=0cQxg9uDnzA)
217 | * [Darthfett/Helperbot](https://github.com/Darthfett/Helperbot) - 完成一些简单指令
218 | * [vogonistic/voxel](https://github.com/vogonistic/mineflayer-voxel) - 使用 voxel.js 可视化机器人正在做什么
219 | * [JonnyD/Skynet](https://github.com/JonnyD/Skynet) -  将玩家活动记录到在线 API 上
220 | * [MinecraftChat](https://github.com/rom1504/MinecraftChat) （最后一个开源版本，由 AlexKvazos 构建）——基于 Minecraft 网络的聊天客户端 <https://minecraftchat.net/>
221 | * [Cheese Bot](https://github.com/Minecheesecraft/Cheese-Bot) -  基于插件的机器人，具有干净的 GUI。使用 Node-Webkit 制作。
222 | * [Chaoscraft](https://github.com/schematical/chaoscraft) - 使用遗传算法的 Minecraft 机器人，请参阅 [Youtube](https://www.youtube.com/playlist?list=PLLkpLgU9B5xJ7Qy4kOyBJl5J6zsDIMceH)
223 | * [hexatester/minetelegram](https://github.com/hexatester/minetelegram) -  Minecraft - Telegram 消息互通，基于 mineflayer & telegraf.
224 | * [PrismarineJS/mineflayer-builder](https://github.com/PrismarineJS/mineflayer-builder) - 在生存中打印我的世界示意图，保持方向
225 | * [以及数千个](https://github.com/PrismarineJS/mineflayer/network/dependents) - github 检测到的在使用 mineflayer 的项目
226 | 
227 | ## 测试
228 | 
229 | ### 完整测试
230 | 
231 | 运行
232 | ```bash
233 | npm test
234 | ````
235 | 
236 | ### 测试指定版本
237 | 
238 | 运行 
239 | 
240 | ```bash
241 | npm mocha_test -- -g <version>
242 | ```
243 | 
244 | 其中 `<version>` 表示 minecraft 版本号 如 `1.12`, `1.15.2`...
245 | 
246 | ### 测试指定测试脚本
247 | 
248 | 运行 
249 | 
250 | ```bash
251 | npm mocha_test -- -g <test_name>
252 | ```
253 | 
254 | 其中 `<test_name>` 是测试名称，例如 `bed`, `useChests`, `rayTrace`...
255 | 
256 | ### 示例
257 | 
258 | ```bash
259 | npm run mocha_test -- -g "1.18.1.*BlockFinder"
260 | ```
261 | 
262 | 进行 1.18.1 寻路测试
263 | 
264 | ## 许可证
265 | 
266 | [MIT](../../LICENSE)
267 | 


--------------------------------------------------------------------------------
/docs/zh/_sidebar.md:
--------------------------------------------------------------------------------
 1 | - 入门手册
 2 |   - [介绍](zh/README_ZH_CN.md)
 3 |   - [API](zh/api.md)
 4 |   - [FAQ](zh/FAQ.md)
 5 |   - [演示](zh/demos.md)
 6 |   - [教程](zh/tutorial.md)
 7 |   - [不稳定的API](unstable_api.md)
 8 |   - [贡献](zh/CONTRIBUTING.md)
 9 |   - [更新历史](history.md)
10 | 


--------------------------------------------------------------------------------
/docs/zh/api.md:
--------------------------------------------------------------------------------
   1 | <!-- START doctoc generated TOC please keep comment here to allow auto update -->
   2 | <!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
   3 | **Table of Contents**  *generated with [DocToc](https://github.com/thlorenz/doctoc)*
   4 | 
   5 | - [API](#api)
   6 |   - [Enums](#enums)
   7 |     - [minecraft-data](#minecraft-data)
   8 |     - [mcdata.blocks](#mcdatablocks)
   9 |     - [mcdata.items](#mcdataitems)
  10 |     - [mcdata.materials](#mcdatamaterials)
  11 |     - [mcdata.recipes](#mcdatarecipes)
  12 |     - [mcdata.instruments](#mcdatainstruments)
  13 |     - [mcdata.biomes](#mcdatabiomes)
  14 |     - [mcdata.entities](#mcdataentities)
  15 |   - [Classes](#classes)
  16 |     - [vec3](#vec3)
  17 |     - [mineflayer.Location](#mineflayerlocation)
  18 |     - [Entity](#entity)
  19 |     - [Block](#block)
  20 |     - [Biome](#biome)
  21 |     - [Item](#item)
  22 |     - [windows.Window (base class)](#windowswindow-base-class)
  23 |       - [window.deposit(itemType, metadata, count, [callback])](#windowdeposititemtype-metadata-count-callback)
  24 |       - [window.withdraw(itemType, metadata, count, [callback])](#windowwithdrawitemtype-metadata-count-callback)
  25 |       - [window.close()](#windowclose)
  26 |     - [Recipe](#recipe)
  27 |     - [mineflayer.Container](#mineflayercontainer)
  28 |     - [mineflayer.Furnace](#mineflayerfurnace)
  29 |       - [furnace "update"](#furnace-update)
  30 |       - [furnace.takeInput([callback])](#furnacetakeinputcallback)
  31 |       - [furnace.takeFuel([callback])](#furnacetakefuelcallback)
  32 |       - [furnace.takeOutput([callback])](#furnacetakeoutputcallback)
  33 |       - [furnace.putInput(itemType, metadata, count, [cb])](#furnaceputinputitemtype-metadata-count-cb)
  34 |       - [furnace.putFuel(itemType, metadata, count, [cb])](#furnaceputfuelitemtype-metadata-count-cb)
  35 |       - [furnace.inputItem()](#furnaceinputitem)
  36 |       - [furnace.fuelItem()](#furnacefuelitem)
  37 |       - [furnace.outputItem()](#furnaceoutputitem)
  38 |       - [furnace.fuel](#furnacefuel)
  39 |       - [furnace.progress](#furnaceprogress)
  40 |     - [mineflayer.EnchantmentTable](#mineflayerenchantmenttable)
  41 |       - [enchantmentTable "ready"](#enchantmenttable-ready)
  42 |       - [enchantmentTable.targetItem()](#enchantmenttabletargetitem)
  43 |       - [enchantmentTable.xpseed](#enchantmenttablexpseed)
  44 |       - [enchantmentTable.enchantments](#enchantmenttableenchantments)
  45 |       - [enchantmentTable.enchant(choice, [callback])](#enchantmenttableenchantchoice-callback)
  46 |       - [enchantmentTable.takeTargetItem([callback])](#enchantmenttabletaketargetitemcallback)
  47 |       - [enchantmentTable.putTargetItem(item, [callback])](#enchantmenttableputtargetitemitem-callback)
  48 |       - [enchantmentTable.putLapis(item, [callback])](#enchantmenttableputlapisitem-callback)
  49 |     - [mineflayer.anvil](#mineflayeranvil)
  50 |       - [anvil.combine(itemOne, itemTwo[, name, callback])](#anvilcombineitemone-itemtwo-name-callback)
  51 |       - [anvil.combine(item[, name, callback])](#anvilcombineitem-name-callback)
  52 |       - [villager "ready"](#villager-ready)
  53 |       - [villager.trades](#villagertrades)
  54 |       - [villager.trade(tradeIndex, [times], [cb])](#villagertradetradeindex-times-cb)
  55 |     - [mineflayer.ScoreBoard](#mineflayerscoreboard)
  56 |       - [ScoreBoard.name](#scoreboardname)
  57 |       - [ScoreBoard.title](#scoreboardtitle)
  58 |       - [ScoreBoard.itemsMap](#scoreboarditemsmap)
  59 |       - [ScoreBoard.items](#scoreboarditems)
  60 |     - [mineflayer.Team](#mineflayerteam)
  61 |       - [Team.name](#teamname)
  62 |       - [Team.friendlyFire](#teamfriendlyfire)
  63 |       - [Team.nameTagVisibility](#teamnametagvisibility)
  64 |       - [Team.collisionRule](#teamcollisionrule)
  65 |       - [Team.color](#teamcolor)
  66 |       - [Team.prefix](#teamprefix)
  67 |       - [Team.suffix](#teamsuffix)
  68 |       - [Team.members](#teammembers)
  69 |     - [mineflayer.BossBar](#mineflayerbossbar)
  70 |       - [BossBar.title](#bossbartitle)
  71 |       - [BossBar.health](#bossbarhealth)
  72 |       - [BossBar.dividers](#bossbardividers)
  73 |       - [BossBar.entityUUID](#bossbarentityuuid)
  74 |       - [BossBar.shouldDarkenSky](#bossbarshoulddarkensky)
  75 |       - [BossBar.isDragonBar](#bossbarisdragonbar)
  76 |       - [BossBar.createFog](#bossbarcreatefog)
  77 |       - [BossBar.color](#bossbarcolor)
  78 |   - [Bot](#bot)
  79 |     - [mineflayer.createBot(options)](#mineflayercreatebotoptions)
  80 |     - [Properties](#properties)
  81 |       - [bot.world](#botworld)
  82 |         - [world "blockUpdate" (oldBlock, newBlock)](#world-blockupdate-oldblock-newblock)
  83 |         - [world "blockUpdate:(x, y, z)" (oldBlock, newBlock)](#world-blockupdatex-y-z-oldblock-newblock)
  84 |       - [bot.entity](#botentity)
  85 |       - [bot.entities](#botentities)
  86 |       - [bot.username](#botusername)
  87 |       - [bot.spawnPoint](#botspawnpoint)
  88 |       - [bot.heldItem](#bothelditem)
  89 |       - [bot.usingHeldItem](#botusinghelditem)
  90 |       - [bot.game.levelType](#botgameleveltype)
  91 |       - [bot.game.dimension](#botgamedimension)
  92 |       - [bot.game.difficulty](#botgamedifficulty)
  93 |       - [bot.game.gameMode](#botgamegamemode)
  94 |       - [bot.game.hardcore](#botgamehardcore)
  95 |       - [bot.game.maxPlayers](#botgamemaxplayers)
  96 |       - [bot.game.serverBrand](#botgameserverbrand)
  97 |     - [bot.physicsEnabled](#botphysicsenabled)
  98 |     - [bot.player](#botplayer)
  99 |       - [bot.players](#botplayers)
 100 |       - [bot.isRaining](#botisraining)
 101 |       - [bot.rainState](#botrainstate)
 102 |       - [bot.thunderState](#botthunderstate)
 103 |       - [bot.chatPatterns](#botchatpatterns)
 104 |       - [bot.settings.chat](#botsettingschat)
 105 |       - [bot.settings.colorsEnabled](#botsettingscolorsenabled)
 106 |       - [bot.settings.viewDistance](#botsettingsviewdistance)
 107 |       - [bot.settings.difficulty](#botsettingsdifficulty)
 108 |       - [bot.settings.skinParts](#botsettingsskinparts)
 109 |         - [bot.settings.skinParts.showCape - boolean](#botsettingsskinpartsshowcape---boolean)
 110 |         - [bot.settings.skinParts.showJacket - boolean](#botsettingsskinpartsshowjacket---boolean)
 111 |         - [bot.settings.skinParts.showLeftSleeve - boolean](#botsettingsskinpartsshowleftsleeve---boolean)
 112 |         - [bot.settings.skinParts.showRightSleeve - boolean](#botsettingsskinpartsshowrightsleeve---boolean)
 113 |         - [bot.settings.skinParts.showLeftPants - boolean](#botsettingsskinpartsshowleftpants---boolean)
 114 |         - [bot.settings.skinParts.showRightPants - boolean](#botsettingsskinpartsshowrightpants---boolean)
 115 |         - [bot.settings.skinParts.showHat - boolean](#botsettingsskinpartsshowhat---boolean)
 116 |       - [bot.experience.level](#botexperiencelevel)
 117 |       - [bot.experience.points](#botexperiencepoints)
 118 |       - [bot.experience.progress](#botexperienceprogress)
 119 |       - [bot.health](#bothealth)
 120 |       - [bot.food](#botfood)
 121 |       - [bot.foodSaturation](#botfoodsaturation)
 122 |       - [bot.oxygenLevel](#botoxygenlevel)
 123 |       - [bot.physics](#botphysics)
 124 |       - [bot.simpleClick.leftMouse (slot)](#botsimpleclickleftmouse-slot)
 125 |       - [bot.simpleClick.rightMouse (slot)](#botsimpleclickrightmouse-slot)
 126 |       - [bot.time.doDaylightCycle](#bottimedodaylightcycle)
 127 |       - [bot.time.bigTime](#bottimebigtime)
 128 |       - [bot.time.time](#bottimetime)
 129 |       - [bot.time.timeOfDay](#bottimetimeofday)
 130 |       - [bot.time.day](#bottimeday)
 131 |       - [bot.time.isDay](#bottimeisday)
 132 |       - [bot.time.moonPhase](#bottimemoonphase)
 133 |       - [bot.time.bigAge](#bottimebigage)
 134 |       - [bot.time.age](#bottimeage)
 135 |       - [bot.quickBarSlot](#botquickbarslot)
 136 |       - [bot.inventory](#botinventory)
 137 |       - [bot.targetDigBlock](#bottargetdigblock)
 138 |       - [bot.isSleeping](#botissleeping)
 139 |       - [bot.scoreboards](#botscoreboards)
 140 |       - [bot.scoreboard](#botscoreboard)
 141 |       - [bot.teams](#botteams)
 142 |       - [bot.teamMap](#botteammap)
 143 |       - [bot.controlState](#botcontrolstate)
 144 |     - [Events](#events)
 145 |       - ["chat" (username, message, translate, jsonMsg, matches)](#chat-username-message-translate-jsonmsg-matches)
 146 |       - ["whisper" (username, message, translate, jsonMsg, matches)](#whisper-username-message-translate-jsonmsg-matches)
 147 |       - ["actionBar" (jsonMsg)](#actionbar-jsonmsg)
 148 |       - ["message" (jsonMsg, position)](#message-jsonmsg-position)
 149 |       - ["messagestr" (message, messagePosition, jsonMsg)](#messagestr-message-messageposition-jsonmsg)
 150 |       - ["inject_allowed"](#inject_allowed)
 151 |       - ["login"](#login)
 152 |       - ["spawn"](#spawn)
 153 |       - ["respawn"](#respawn)
 154 |       - ["game"](#game)
 155 |       - ["resourcePack" (url, hash)](#resourcepack-url-hash)
 156 |       - ["title" (title, type)](#title-title-type)
 157 |       - ["rain"](#rain)
 158 |       - ["weatherUpdate"](#weatherupdate)
 159 |       - ["time"](#time)
 160 |       - ["kicked" (reason, loggedIn)](#kicked-reason-loggedin)
 161 |       - ["end" (reason)](#end-reason)
 162 |       - ["error" (err)](#error-err)
 163 |       - ["spawnReset"](#spawnreset)
 164 |       - ["death"](#death)
 165 |       - ["health"](#health)
 166 |       - ["breath"](#breath)
 167 |       - ["entityAttributes" (entity)](#entityattributes-entity)
 168 |       - ["entitySwingArm" (entity)](#entityswingarm-entity)
 169 |       - ["entityHurt" (entity)](#entityhurt-entity)
 170 |       - ["entityDead" (entity)](#entitydead-entity)
 171 |       - ["entityTaming" (entity)](#entitytaming-entity)
 172 |       - ["entityTamed" (entity)](#entitytamed-entity)
 173 |       - ["entityShakingOffWater" (entity)](#entityshakingoffwater-entity)
 174 |       - ["entityEatingGrass" (entity)](#entityeatinggrass-entity)
 175 |       - ["entityWake" (entity)](#entitywake-entity)
 176 |       - ["entityEat" (entity)](#entityeat-entity)
 177 |       - ["entityCriticalEffect" (entity)](#entitycriticaleffect-entity)
 178 |       - ["entityMagicCriticalEffect" (entity)](#entitymagiccriticaleffect-entity)
 179 |       - ["entityCrouch" (entity)](#entitycrouch-entity)
 180 |       - ["entityUncrouch" (entity)](#entityuncrouch-entity)
 181 |       - ["entityEquip" (entity)](#entityequip-entity)
 182 |       - ["entitySleep" (entity)](#entitysleep-entity)
 183 |       - ["entitySpawn" (entity)](#entityspawn-entity)
 184 |       - ["itemDrop" (entity)](#itemdrop-entity)
 185 |       - ["playerCollect" (collector, collected)](#playercollect-collector-collected)
 186 |       - ["entityGone" (entity)](#entitygone-entity)
 187 |       - ["entityMoved" (entity)](#entitymoved-entity)
 188 |       - ["entityDetach" (entity, vehicle)](#entitydetach-entity-vehicle)
 189 |       - ["entityAttach" (entity, vehicle)](#entityattach-entity-vehicle)
 190 |       - ["entityUpdate" (entity)](#entityupdate-entity)
 191 |       - ["entityEffect" (entity, effect)](#entityeffect-entity-effect)
 192 |       - ["entityEffectEnd" (entity, effect)](#entityeffectend-entity-effect)
 193 |       - ["playerJoined" (player)](#playerjoined-player)
 194 |       - ["playerUpdated" (player)](#playerupdated-player)
 195 |       - ["playerLeft" (player)](#playerleft-player)
 196 |       - ["blockUpdate" (oldBlock, newBlock)](#blockupdate-oldblock-newblock)
 197 |       - ["blockUpdate:(x, y, z)" (oldBlock, newBlock)](#blockupdatex-y-z-oldblock-newblock)
 198 |       - ["blockPlaced" (oldBlock, newBlock)](#blockplaced-oldblock-newblock)
 199 |       - ["chunkColumnLoad" (point)](#chunkcolumnload-point)
 200 |       - ["chunkColumnUnload" (point)](#chunkcolumnunload-point)
 201 |       - ["soundEffectHeard" (soundName, position, volume, pitch)](#soundeffectheard-soundname-position-volume-pitch)
 202 |       - ["hardcodedSoundEffectHeard" (soundId, soundCategory, position, volume, pitch)](#hardcodedsoundeffectheard-soundid-soundcategory-position-volume-pitch)
 203 |       - ["noteHeard" (block, instrument, pitch)](#noteheard-block-instrument-pitch)
 204 |       - ["pistonMove" (block, isPulling, direction)](#pistonmove-block-ispulling-direction)
 205 |       - ["chestLidMove" (block, isOpen, block2)](#chestlidmove-block-isopen-block2)
 206 |       - ["blockBreakProgressObserved" (block, destroyStage)](#blockbreakprogressobserved-block-destroystage)
 207 |       - ["blockBreakProgressEnd" (block)](#blockbreakprogressend-block)
 208 |       - ["diggingCompleted" (block)](#diggingcompleted-block)
 209 |       - ["diggingAborted" (block)](#diggingaborted-block)
 210 |       - ["move"](#move)
 211 |       - ["forcedMove"](#forcedmove)
 212 |       - ["mount"](#mount)
 213 |       - ["dismount" (vehicle)](#dismount-vehicle)
 214 |       - ["windowOpen" (window)](#windowopen-window)
 215 |       - ["windowClose" (window)](#windowclose-window)
 216 |       - ["sleep"](#sleep)
 217 |       - ["wake"](#wake)
 218 |       - ["experience"](#experience)
 219 |       - ["scoreboardCreated" (scoreboard)](#scoreboardcreated-scoreboard)
 220 |       - ["scoreboardDeleted" (scoreboard)](#scoreboarddeleted-scoreboard)
 221 |       - ["scoreboardTitleChanged" (scoreboard)](#scoreboardtitlechanged-scoreboard)
 222 |       - ["scoreUpdated" (scoreboard, item)](#scoreupdated-scoreboard-item)
 223 |       - ["scoreRemoved" (scoreboard, item)](#scoreremoved-scoreboard-item)
 224 |       - ["scoreboardPosition" (position, scoreboard)](#scoreboardposition-position-scoreboard)
 225 |       - ["teamCreated" (team)](#teamcreated-team)
 226 |       - ["teamRemoved" (team)](#teamremoved-team)
 227 |       - ["teamUpdated" (team)](#teamupdated-team)
 228 |       - ["teamMemberAdded" (team)](#teammemberadded-team)
 229 |       - ["teamMemberRemoved" (team)](#teammemberremoved-team)
 230 |       - ["bossBarCreated" (bossBar)](#bossbarcreated-bossbar)
 231 |       - ["bossBarDeleted" (bossBar)](#bossbardeleted-bossbar)
 232 |       - ["bossBarUpdated" (bossBar)](#bossbarupdated-bossbar)
 233 |       - ["heldItemChanged" (heldItem)](#helditemchanged-helditem)
 234 |       - ["physicsTick" ()](#physicstick-)
 235 |       - ["chat:name" (matches)](#chatname-matches)
 236 |     - [Functions](#functions)
 237 |       - [bot.blockAt(point, extraInfos=true)](#botblockatpoint-extrainfostrue)
 238 |       - [bot.waitForChunksToLoad(cb)](#botwaitforchunkstoloadcb)
 239 |       - [bot.blockInSight(maxSteps, vectorLength)](#botblockinsightmaxsteps-vectorlength)
 240 |       - [bot.blockAtCursor(maxDistance=256)](#botblockatcursormaxdistance256)
 241 |       - [bot.blockAtEntityCursor(entity=bot.entity, maxDistance=256)](#botblockatentitycursorentitybotentity-maxdistance256)
 242 |       - [bot.canSeeBlock(block)](#botcanseeblockblock)
 243 |       - [bot.findBlocks(options)](#botfindblocksoptions)
 244 |       - [bot.findBlock(options)](#botfindblockoptions)
 245 |       - [bot.canDigBlock(block)](#botcandigblockblock)
 246 |       - [bot.recipesFor(itemType, metadata, minResultCount, craftingTable)](#botrecipesforitemtype-metadata-minresultcount-craftingtable)
 247 |       - [bot.recipesAll(itemType, metadata, craftingTable)](#botrecipesallitemtype-metadata-craftingtable)
 248 |       - [bot.nearestEntity(match = (entity) => { return true })](#botnearestentitymatch--entity---return-true-)
 249 |     - [Methods](#methods)
 250 |       - [bot.end(reason)](#botendreason)
 251 |       - [bot.quit(reason)](#botquitreason)
 252 |       - [bot.tabComplete(str, cb, [assumeCommand], [sendBlockInSight])](#bottabcompletestr-cb-assumecommand-sendblockinsight)
 253 |       - [bot.chat(message)](#botchatmessage)
 254 |       - [bot.whisper(username, message)](#botwhisperusername-message)
 255 |       - [bot.chatAddPattern(pattern, chatType, description)](#botchataddpatternpattern-chattype-description)
 256 |       - [bot.addChatPattern(name, pattern, chatPatternOptions)](#botaddchatpatternname-pattern-chatpatternoptions)
 257 |       - [bot.addChatPatternSet(name, patterns, chatPatternOptions)](#botaddchatpatternsetname-patterns-chatpatternoptions)
 258 |       - [bot.removeChatPattern(name)](#botremovechatpatternname)
 259 |       - [bot.awaitMessage(...args)](#botawaitmessageargs)
 260 |       - [bot.setSettings(options)](#botsetsettingsoptions)
 261 |       - [bot.loadPlugin(plugin)](#botloadpluginplugin)
 262 |       - [bot.loadPlugins(plugins)](#botloadpluginsplugins)
 263 |       - [bot.hasPlugin(plugin)](#bothaspluginplugin)
 264 |       - [bot.sleep(bedBlock, [cb])](#botsleepbedblock-cb)
 265 |       - [bot.isABed(bedBlock)](#botisabedbedblock)
 266 |       - [bot.wake([cb])](#botwakecb)
 267 |       - [bot.setControlState(control, state)](#botsetcontrolstatecontrol-state)
 268 |       - [bot.getControlState(control)](#botgetcontrolstatecontrol)
 269 |       - [bot.clearControlStates()](#botclearcontrolstates)
 270 |       - [bot.getExplosionDamages(entity, position, radius, [rawDamages])](#botgetexplosiondamagesentity-position-radius-rawdamages)
 271 |       - [bot.lookAt(point, [force], [callback])](#botlookatpoint-force-callback)
 272 |       - [bot.look(yaw, pitch, [force], [callback])](#botlookyaw-pitch-force-callback)
 273 |       - [bot.updateSign(block, text)](#botupdatesignblock-text)
 274 |       - [bot.equip(item, destination, [callback])](#botequipitem-destination-callback)
 275 |       - [bot.unequip(destination, [callback])](#botunequipdestination-callback)
 276 |       - [bot.tossStack(item, [callback])](#bottossstackitem-callback)
 277 |       - [bot.toss(itemType, metadata, count, [callback])](#bottossitemtype-metadata-count-callback)
 278 |       - [bot.dig(block, [forceLook = true], [digFace], [callback])](#botdigblock-forcelook--true-digface-callback)
 279 |       - [bot.stopDigging()](#botstopdigging)
 280 |       - [bot.digTime(block)](#botdigtimeblock)
 281 |       - [bot.acceptResourcePack()](#botacceptresourcepack)
 282 |       - [bot.denyResourcePack()](#botdenyresourcepack)
 283 |       - [bot.placeBlock(referenceBlock, faceVector, cb)](#botplaceblockreferenceblock-facevector-cb)
 284 |       - [bot.placeEntity(referenceBlock, faceVector)](#botplaceentityreferenceblock-facevector)
 285 |       - [bot.activateBlock(block, [callback])](#botactivateblockblock-callback)
 286 |       - [bot.activateEntity(entity, [callback])](#botactivateentityentity-callback)
 287 |       - [bot.activateEntityAt(entity, position, [callback])](#botactivateentityatentity-position-callback)
 288 |       - [bot.consume(callback)](#botconsumecallback)
 289 |       - [bot.fish(callback)](#botfishcallback)
 290 |       - [bot.activateItem(offHand=false)](#botactivateitemoffhandfalse)
 291 |       - [bot.deactivateItem()](#botdeactivateitem)
 292 |       - [bot.useOn(targetEntity)](#botuseontargetentity)
 293 |       - [bot.attack(entity, swing = true)](#botattackentity-swing--true)
 294 |       - [bot.swingArm([hand], showHand)](#botswingarmhand-showhand)
 295 |       - [bot.mount(entity)](#botmountentity)
 296 |       - [bot.dismount()](#botdismount)
 297 |       - [bot.moveVehicle(left,forward)](#botmovevehicleleftforward)
 298 |       - [bot.setQuickBarSlot(slot)](#botsetquickbarslotslot)
 299 |       - [bot.craft(recipe, count, craftingTable, [callback])](#botcraftrecipe-count-craftingtable-callback)
 300 |       - [bot.writeBook(slot, pages, [callback])](#botwritebookslot-pages-callback)
 301 |       - [bot.openContainer(containerBlock or containerEntity)](#botopencontainercontainerblock-or-containerentity)
 302 |       - [bot.openChest(chestBlock or minecartchestEntity)](#botopenchestchestblock-or-minecartchestentity)
 303 |       - [bot.openFurnace(furnaceBlock)](#botopenfurnacefurnaceblock)
 304 |       - [bot.openDispenser(dispenserBlock)](#botopendispenserdispenserblock)
 305 |       - [bot.openEnchantmentTable(enchantmentTableBlock)](#botopenenchantmenttableenchantmenttableblock)
 306 |       - [bot.openAnvil(anvilBlock)](#botopenanvilanvilblock)
 307 |       - [bot.openVillager(villagerEntity)](#botopenvillagervillagerentity)
 308 |       - [bot.trade(villagerInstance, tradeIndex, [times], [cb])](#bottradevillagerinstance-tradeindex-times-cb)
 309 |       - [bot.setCommandBlock(pos, command, [options])](#botsetcommandblockpos-command-options)
 310 |       - [bot.supportFeature(name)](#botsupportfeaturename)
 311 |       - [bot.waitForTicks(ticks)](#botwaitforticksticks)
 312 |     - [Lower level inventory methods](#lower-level-inventory-methods)
 313 |       - [bot.clickWindow(slot, mouseButton, mode, cb)](#botclickwindowslot-mousebutton-mode-cb)
 314 |       - [bot.putSelectedItemRange(start, end, window, slot)](#botputselecteditemrangestart-end-window-slot)
 315 |       - [bot.putAway(slot)](#botputawayslot)
 316 |       - [bot.closeWindow(window)](#botclosewindowwindow)
 317 |       - [bot.transfer(options, cb)](#bottransferoptions-cb)
 318 |       - [bot.openBlock(block)](#botopenblockblock)
 319 |       - [bot.openEntity(entity)](#botopenentityentity)
 320 |       - [bot.moveSlotItem(sourceSlot, destSlot, cb)](#botmoveslotitemsourceslot-destslot-cb)
 321 |       - [bot.updateHeldItem()](#botupdatehelditem)
 322 |       - [bot.getEquipmentDestSlot(destination)](#botgetequipmentdestslotdestination)
 323 |     - [bot.creative](#botcreative)
 324 |       - [bot.creative.setInventorySlot(slot, item, [callback])](#botcreativesetinventoryslotslot-item-callback)
 325 |       - [bot.creative.flyTo(destination, [cb])](#botcreativeflytodestination-cb)
 326 |       - [bot.creative.startFlying()](#botcreativestartflying)
 327 |       - [bot.creative.stopFlying()](#botcreativestopflying)
 328 | 
 329 | <!-- END doctoc generated TOC please keep comment here to allow auto update -->
 330 | 
 331 | # API
 332 | 
 333 | ## Enums
 334 | 
 335 | These enums are stored in the language independent [minecraft-data](https://github.com/PrismarineJS/minecraft-data) project,
 336 |  and accessed through [node-minecraft-data](https://github.com/PrismarineJS/node-minecraft-data).
 337 | 
 338 | ### minecraft-data
 339 | The data is available in [node-minecraft-data](https://github.com/PrismarineJS/node-minecraft-data) module
 340 | 
 341 | `require('minecraft-data')(bot.version)` gives you access to it.
 342 | 
 343 | ### mcdata.blocks
 344 | blocks indexed by id
 345 | 
 346 | ### mcdata.items
 347 | items indexed by id
 348 | 
 349 | ### mcdata.materials
 350 | 
 351 | The key is the material. The value is an object with the key as the item id
 352 | of the tool and the value as the efficiency multiplier.
 353 | 
 354 | ### mcdata.recipes
 355 | recipes indexed by id
 356 | 
 357 | ### mcdata.instruments
 358 | instruments indexed by id
 359 | 
 360 | ### mcdata.biomes
 361 | biomes indexed by id
 362 | 
 363 | ### mcdata.entities
 364 | entities indexed by id
 365 | 
 366 | ## Classes
 367 | 
 368 | ### vec3
 369 | 
 370 | See [andrewrk/node-vec3](https://github.com/andrewrk/node-vec3)
 371 | 
 372 | All points in mineflayer are supplied as instances of this class.
 373 | 
 374 |  * x - south
 375 |  * y - up
 376 |  * z - west
 377 | 
 378 | Functions and methods which require a point argument accept `Vec3` instances
 379 | as well as an array with 3 values, and an object with `x`, `y`, and `z`
 380 | properties.
 381 | 
 382 | ### mineflayer.Location
 383 | 
 384 | ### Entity
 385 | 
 386 | 实体表示玩家、怪物和对象.
 387 | 
 388 | 它们在许多事件中被触发, 您可以使用 `bot.entity`.访问自己的实体
 389 | 见 [prismarine-entity](https://github.com/PrismarineJS/prismarine-entity)
 390 | 
 391 | ### Block
 392 | 
 393 | See [prismarine-block](https://github.com/PrismarineJS/prismarine-block)
 394 | 
 395 | Also `block.blockEntity` is additional field with block entity data as `Object`
 396 | ```js
 397 | // sign.blockEntity
 398 | {
 399 |   x: -53,
 400 |   y: 88,
 401 |   z: 66,
 402 |   id: 'minecraft:sign', // 'Sign' in 1.10
 403 |   Text1: { toString: Function }, // ChatMessage object
 404 |   Text2: { toString: Function }, // ChatMessage object
 405 |   Text3: { toString: Function }, // ChatMessage object
 406 |   Text4: { toString: Function } // ChatMessage object
 407 | }
 408 | ```
 409 | 
 410 | ### Biome
 411 | 
 412 | See [prismarine-biome](https://github.com/PrismarineJS/prismarine-biome)
 413 | 
 414 | ### Item
 415 | 
 416 | See [prismarine-item](https://github.com/PrismarineJS/prismarine-item)
 417 | 
 418 | ### windows.Window (base class)
 419 | 
 420 | See [prismarine-windows](https://github.com/PrismarineJS/prismarine-windows)
 421 | 
 422 | #### window.deposit(itemType, metadata, count, [callback])
 423 | 
 424 | This function also returns a `Promise`, with `void` as its argument upon completion.
 425 | 
 426 |  * `itemType` - numerical item id
 427 |  * `metadata` - numerical value. `null` means match anything.
 428 |  * `count` - how many to deposit. `null` is an alias to 1.
 429 |  * `callback(err)` - (optional) - called when done depositing
 430 | 
 431 | #### window.withdraw(itemType, metadata, count, [callback])
 432 | 
 433 | This function also returns a `Promise`, with `void` as its argument upon completion.
 434 | 
 435 |  * `itemType` - numerical item id
 436 |  * `metadata` - numerical value. `null` means match anything.
 437 |  * `count` - how many to withdraw. `null` is an alias to 1.
 438 |  * `callback(err)` - (optional) - called when done withdrawing
 439 | 
 440 | #### window.close()
 441 | 
 442 | ### Recipe
 443 | 
 444 | See [prismarine-recipe](https://github.com/PrismarineJS/prismarine-recipe)
 445 | 
 446 | ### mineflayer.Container
 447 | 
 448 | Extends windows.Window for chests, dispensers, etc...
 449 | See `bot.openContainer(chestBlock or minecartchestEntity)`.
 450 | 
 451 | ### mineflayer.Furnace
 452 | 
 453 | Extends windows.Window for furnace, smelter, etc...
 454 | See `bot.openFurnace(furnaceBlock)`.
 455 | 
 456 | #### furnace "update"
 457 | 
 458 | Fires when `furnace.fuel` and/or `furnace.progress` update.
 459 | 
 460 | #### furnace.takeInput([callback])
 461 | 
 462 | This function also returns a `Promise`, with `item` as its argument upon completion.
 463 | 
 464 |  * `callback(err, item)`
 465 | 
 466 | #### furnace.takeFuel([callback])
 467 | 
 468 | This function also returns a `Promise`, with `item` as its argument upon completion.
 469 | 
 470 |  * `callback(err, item)`
 471 | 
 472 | #### furnace.takeOutput([callback])
 473 | 
 474 | This function also returns a `Promise`, with `item` as its argument upon completion.
 475 | 
 476 |  * `callback(err, item)`
 477 | 
 478 | #### furnace.putInput(itemType, metadata, count, [cb])
 479 | 
 480 | This function also returns a `Promise`, with `void` as its argument upon completion.
 481 | 
 482 | #### furnace.putFuel(itemType, metadata, count, [cb])
 483 | 
 484 | This function also returns a `Promise`, with `void` as its argument upon completion.
 485 | 
 486 | #### furnace.inputItem()
 487 | 
 488 | Returns `Item` instance which is the input.
 489 | 
 490 | #### furnace.fuelItem()
 491 | 
 492 | Returns `Item` instance which is the fuel.
 493 | 
 494 | #### furnace.outputItem()
 495 | 
 496 | Returns `Item` instance which is the output.
 497 | 
 498 | #### furnace.fuel
 499 | 
 500 | How much fuel is left between 0 and 1.
 501 | 
 502 | #### furnace.progress
 503 | 
 504 | How much cooked the input is between 0 and 1.
 505 | 
 506 | ### mineflayer.EnchantmentTable
 507 | 
 508 | Extends windows.Window for enchantment tables
 509 | See `bot.openEnchantmentTable(enchantmentTableBlock)`.
 510 | 
 511 | #### enchantmentTable "ready"
 512 | 
 513 | Fires when `enchantmentTable.enchantments` is fully populated and you
 514 | may make a selection by calling `enchantmentTable.enchant(choice)`.
 515 | 
 516 | #### enchantmentTable.targetItem()
 517 | 
 518 | Gets the target item. This is both the input and the output of the
 519 | enchantment table.
 520 | 
 521 | #### enchantmentTable.xpseed
 522 | 
 523 | The 16 bits xpseed sent by the server.
 524 | 
 525 | #### enchantmentTable.enchantments
 526 | 
 527 | Array of length 3 which are the 3 enchantments to choose from.
 528 | `level` can be `-1` if the server has not sent the data yet.
 529 | 
 530 | Looks like:
 531 | 
 532 | ```js
 533 | [
 534 |   {
 535 |     level: 3
 536 |   },
 537 |   {
 538 |     level: 4
 539 |   },
 540 |   {
 541 |     level: 9
 542 |   }
 543 | ]
 544 | ```
 545 | 
 546 | #### enchantmentTable.enchant(choice, [callback])
 547 | 
 548 | This function also returns a `Promise`, with `item` as its argument upon completion.
 549 | 
 550 |  * `choice` - [0-2], the index of the enchantment you want to pick.
 551 |  * `callback(err, item)` - (optional) called when the item has been enchanted
 552 | 
 553 | #### enchantmentTable.takeTargetItem([callback])
 554 | 
 555 | This function also returns a `Promise`, with `item` as its argument upon completion.
 556 | 
 557 |  * `callback(err, item)`
 558 | 
 559 | #### enchantmentTable.putTargetItem(item, [callback])
 560 | 
 561 | This function also returns a `Promise`, with `void` as its argument upon completion.
 562 | 
 563 |  * `callback(err)`
 564 | 
 565 | #### enchantmentTable.putLapis(item, [callback])
 566 | 
 567 | This function also returns a `Promise`, with `void` as its argument upon completion.
 568 | 
 569 |  * `callback(err)`
 570 | 
 571 | ### mineflayer.anvil
 572 | 
 573 | Extends windows.Window for anvils
 574 | See `bot.openAnvil(anvilBlock)`.
 575 | 
 576 | #### anvil.combine(itemOne, itemTwo[, name, callback])
 577 | 
 578 | This function also returns a `Promise`, with `void` as its argument upon completion.
 579 | 
 580 |  * `callback(err)` - in order to use callback, pass an empty string ('') for name
 581 | 
 582 | #### anvil.combine(item[, name, callback])
 583 | 
 584 | This function also returns a `Promise`, with `void` as its argument upon completion.
 585 | 
 586 |  * `callback(err)`
 587 | 
 588 | #### villager "ready"
 589 | 
 590 | Fires when `villager.trades` is loaded.
 591 | 
 592 | #### villager.trades
 593 | 
 594 | Array of trades.
 595 | 
 596 | Looks like:
 597 | 
 598 | ```js
 599 | [
 600 |   {
 601 |     firstInput: Item,
 602 |     output: Item,
 603 |     hasSecondItem: false,
 604 |     secondaryInput: null,
 605 |     disabled: false,
 606 |     tooluses: 0,
 607 |     maxTradeuses: 7
 608 |   },
 609 |   {
 610 |     firstInput: Item,
 611 |     output: Item,
 612 |     hasSecondItem: false,
 613 |     secondaryInput: null,
 614 |     disabled: false,
 615 |     tooluses: 0,
 616 |     maxTradeuses: 7
 617 |   },
 618 |   {
 619 |     firstInput: Item,
 620 |     output: Item,
 621 |     hasSecondItem: true,
 622 |     secondaryInput: Item,
 623 |     disabled: false,
 624 |     tooluses: 0,
 625 |     maxTradeuses: 7
 626 |   }
 627 | ]
 628 | ```
 629 | 
 630 | #### villager.trade(tradeIndex, [times], [cb])
 631 | Is the same as [bot.trade(villagerInstance, tradeIndex, [times], [cb])](#bottradevillagerinstance-tradeindex-times-cb)
 632 | 
 633 | ### mineflayer.ScoreBoard
 634 | 
 635 | #### ScoreBoard.name
 636 | 
 637 | 记分牌的名称
 638 | 
 639 | #### ScoreBoard.title
 640 | 
 641 | 记分牌的标题 (does not always equal the name)
 642 | 
 643 | #### ScoreBoard.itemsMap
 644 | 
 645 | 记分板中包含所有项目的对象
 646 | ```js
 647 | {
 648 |   wvffle: { name: 'wvffle', value: 3 },
 649 |   dzikoysk: { name: 'dzikoysk', value: 6 }
 650 | }
 651 | ```
 652 | 
 653 | #### ScoreBoard.items
 654 | 
 655 | 记分板中包含所有已排序项的数组
 656 | ```js
 657 | [
 658 |   { name: 'dzikoysk', value: 6 },
 659 |   { name: 'wvffle', value: 3 }
 660 | ]
 661 | ```
 662 | 
 663 | ### mineflayer.Team
 664 | 
 665 | #### Team.name
 666 | 
 667 | 队伍名称
 668 | 
 669 | #### Team.friendlyFire
 670 | 
 671 | #### Team.nameTagVisibility
 672 | 
 673 | `always`, `hideForOtherTeams`, `hideForOwnTeam` 其中一个
 674 | 
 675 | #### Team.collisionRule
 676 | 
 677 |  `always`, `pushOtherTeams`, `pushOwnTeam ` 其中一个
 678 | 
 679 | #### Team.color
 680 | 
 681 | Color (or formatting) name of team, 如 `dark_green`, `red`, `underlined`
 682 | 
 683 | #### Team.prefix
 684 | 
 685 | 一个聊天组件，包含队伍前缀
 686 | 
 687 | #### Team.suffix
 688 | 
 689 | 一个聊天组件，包含队伍后缀
 690 | 
 691 | #### Team.members
 692 | 
 693 | Array of team members. Usernames for players and UUIDs for other entities.
 694 | 
 695 | ### mineflayer.BossBar
 696 | 
 697 | #### BossBar.title
 698 | 
 699 | boss 栏标题,  ChatMessage 有例子
 700 | 
 701 | #### BossBar.health
 702 | 
 703 | boss 生命百分比, 从`0` 到`1`
 704 | 
 705 | #### BossBar.dividers
 706 | 
 707 | Number of boss bar dividers, one of `0`, `6`, `10`, `12`, `20`
 708 | 
 709 | #### BossBar.entityUUID
 710 | 
 711 | Boss 栏实体 uuid
 712 | 
 713 | #### BossBar.shouldDarkenSky
 714 | 
 715 | Determines whether or not to darken the sky
 716 | 
 717 | #### BossBar.isDragonBar
 718 | 
 719 | Determines whether or not boss bar is dragon bar
 720 | 
 721 | #### BossBar.createFog
 722 | 
 723 | Determines whether or not boss bar creates fog
 724 | 
 725 | #### BossBar.color
 726 | 
 727 | Determines what color the boss bar color is,  `pink`, `blue`, `red`, `green`, `yellow`, `purple`, `white `之中的一个
 728 | 
 729 | ## Bot
 730 | 
 731 | ### mineflayer.createBot(options)
 732 | 
 733 | 创建并返回bot类的实例。
 734 | `options` 是包含可选属性的对象 :
 735 | 
 736 |  * username : 用户名，默认为 'Player'
 737 |  * port : 端口，默认为 25565
 738 |  * password : 可以省略 (如果token也被省略，那么它将尝试以离线模式连接)
 739 |  * host : 默认为 localhost
 740 |  * version : 默认为自动猜测服务器的版本。值示例：“1.12.2”
 741 |  * auth : 默认为“mojang”，也可以是“microsoft”
 742 |  * clientToken : 如果给定密码，则生成
 743 |  * accessToken : 如果给定密码，则生成
 744 |  * logErrors : 默认情况下为true，捕获错误并记录它们
 745 |  * hideErrors : 默认情况下为true，不记录错误（即使logErrors为true）
 746 |  * keepAlive : 发送保持活动的数据包：默认为true
 747 |  * checkTimeoutInterval : 默认 `30*1000` (30s), 检查是否在此期间收到keepalive，否则断开连接。
 748 |  * loadInternalPlugins : 默认为true
 749 |  * storageBuilder : 可选功能,将version和worldName作为参数，并返回与prismarine-provider-anvil具有相同API的某个对象的实例 ，将被用来保存世界
 750 |  * client : node-minecraft-protocol 实例, 如果未指定，mineflayer将创建自己的客户端.这可用于通过许多客户端的代理或普通客户端和mineflayer客户端来启用mineflayer
 751 |  * plugins : object : 默认为{}
 752 |    - pluginName : false : don't load internal plugin with given name ie. `pluginName`
 753 |    - pluginName : true : load internal plugin with given name ie. `pluginName` 即使loadInternalplugins设置为false
 754 |    - pluginName : 外部插件注入函数: 加载外部插件, overrides internal plugin with given name ie. `pluginName`
 755 |  * physicsEnabled : 默认为true, 机器人应该受到物理的影响吗？ 以后可以通过 bot.physicsEnabled 修改
 756 |  * [chat](#bot.settings.chat)
 757 |  * [colorsEnabled](#bot.settings.colorsEnabled)
 758 |  * [viewDistance](#bot.settings.viewDistance)
 759 |  * [difficulty](#bot.settings.difficulty)
 760 |  * [skinParts](#bot.settings.skinParts)
 761 |  * chatLengthLimit : 单个消息中可以发送的最大字符数. 如果没有设置， 那么游戏版本在 < 1.11 为100  在 >= 1.11 为256
 762 |  * defaultChatPatterns: 默认为true, 设置为false不添加聊天和私信等模式
 763 | 
 764 | ### Properties
 765 | 
 766 | #### bot.world
 767 | 
 768 | A sync representation of the world. 查看以下位置的文档： http://github.com/PrismarineJS/prismarine-world
 769 | 
 770 | ##### world "blockUpdate" (oldBlock, newBlock)
 771 | 
 772 | 当方块更新时触发. Both `oldBlock` and `newBlock` provided for
 773 | comparison.
 774 | 
 775 | 注意 `oldBlock` 可能是 `null`.
 776 | 
 777 | ##### world "blockUpdate:(x, y, z)" (oldBlock, newBlock)
 778 | 
 779 | Fires for a specific point. Both `oldBlock` and `newBlock` provided for
 780 | comparison.
 781 | 
 782 | 注意:  `oldBlock` 可能为 `null`
 783 | 
 784 | 
 785 | #### bot.entity
 786 | 
 787 | Bot自己的实体. 见 `Entity`.
 788 | 
 789 | #### bot.entities
 790 | 
 791 | 所有附近的实体。 This object is a map of entityId to entity.
 792 | 
 793 | #### bot.username
 794 | 
 795 | 机器人自己的名字
 796 | 
 797 | #### bot.spawnPoint
 798 | 
 799 | 到主出生点的坐标, 所有指南针指向的地方。
 800 | 
 801 | #### bot.heldItem
 802 | 
 803 | 机器人手中的物品, represented as a [prismarine-item](https://github.com/PrismarineJS/prismarine-item) instance specified with arbitrary metadata, nbtdata, etc.
 804 | 
 805 | #### bot.usingHeldItem
 806 | 
 807 | 机器人是否正在使用其持有的物品，例如吃食物或使用盾牌。
 808 | 
 809 | #### bot.game.levelType
 810 | 
 811 | #### bot.game.dimension
 812 | 
 813 | #### bot.game.difficulty
 814 | 
 815 | #### bot.game.gameMode
 816 | 
 817 | #### bot.game.hardcore
 818 | 
 819 | #### bot.game.maxPlayers
 820 | 
 821 | #### bot.game.serverBrand
 822 | 
 823 | ### bot.physicsEnabled
 824 | 
 825 | 启用物理，默认为true。
 826 | 
 827 | ### bot.player
 828 | 
 829 | 机器人的玩家对象
 830 | ```js
 831 | {
 832 |   username: 'player',
 833 |   displayName: { toString: Function }, // ChatMessage object.
 834 |   gamemode: 0,
 835 |   ping: 28,
 836 |   entity: entity // 如果距离太远，则为空
 837 | }
 838 | ```
 839 | 
 840 | 一个玩家的ping值从0开始,您可能需要等待服务器发送实际的ping
 841 | 
 842 | #### bot.players
 843 | 
 844 | Map of username to people playing the game.
 845 | 
 846 | #### bot.isRaining
 847 | 
 848 | #### bot.rainState
 849 | 
 850 | 指示当前降雨量的数字。不下雨的时候，这个
 851 | 将等于0。 当开始下雨时，该值将增加
 852 | 逐渐上升到1。当雨停时，该值逐渐减小回0。
 853 | 
 854 | Each time `bot.rainState` is changed, the "weatherUpdate" event is emitted.
 855 | 
 856 | #### bot.thunderState
 857 | 
 858 | A number indicating the current thunder level. When there isn't a thunderstorm, this
 859 | will be equal to 0. When a thunderstorm starts, this value will increase
 860 | gradually up to 1. When the thunderstorm stops, this value gradually decreases back to 0.
 861 | 
 862 | Each time `bot.thunderState` is changed, the "weatherUpdate" event is emitted.
 863 | 
 864 | This is the same as `bot.rainState`, but for thunderstorms.
 865 | For thunderstorms, both `bot.rainState` and `bot.thunderState` will change.
 866 | 
 867 | #### bot.chatPatterns
 868 | 
 869 | This is an array of pattern objects, of the following format:
 870 | { /regex/, "chattype", "description")
 871 |  * /regex/ - a regular expression pattern, that should have at least two capture groups
 872 |  * 'chattype' - the type of chat the pattern matches, ex "chat" or "whisper", but can be anything.
 873 |  * 'description' - description of what the pattern is for, optional.
 874 | 
 875 | #### bot.settings.chat
 876 | 
 877 | 选项:
 878 | 
 879 |  * `enabled` (默认)
 880 |  * `commandsOnly`
 881 |  * `disabled`
 882 | 
 883 | #### bot.settings.colorsEnabled
 884 | 
 885 | 默认为true，无论您是否从服务器接收聊天中的颜色代码。
 886 | 
 887 | #### bot.settings.viewDistance
 888 | 
 889 | 选项:
 890 |  * `far` (默认)
 891 |  * `normal`
 892 |  * `short`
 893 |  * `tiny`
 894 | 
 895 | #### bot.settings.difficulty
 896 | 
 897 | Same as from server.properties.
 898 | 
 899 | #### bot.settings.skinParts
 900 | 
 901 | 这些boolean设置控制玩家皮肤上的额外皮肤细节是否可见
 902 | 
 903 | ##### bot.settings.skinParts.showCape - boolean
 904 | 
 905 | 如果您有披风，可以将其设置为false来关闭它
 906 | 
 907 | ##### bot.settings.skinParts.showJacket - boolean
 908 | 
 909 | ##### bot.settings.skinParts.showLeftSleeve - boolean
 910 | 
 911 | ##### bot.settings.skinParts.showRightSleeve - boolean
 912 | 
 913 | ##### bot.settings.skinParts.showLeftPants - boolean
 914 | 
 915 | ##### bot.settings.skinParts.showRightPants - boolean
 916 | 
 917 | ##### bot.settings.skinParts.showHat - boolean
 918 | 
 919 | 
 920 | #### bot.experience.level
 921 | 
 922 | #### bot.experience.points
 923 | 
 924 | 总经验点数
 925 | 
 926 | #### bot.experience.progress
 927 | 
 928 | Between 0 and 1 - amount to get to the next level.
 929 | 
 930 | #### bot.health
 931 | 
 932 | [0,20]范围内的数字，表示半颗心的数量。
 933 | 
 934 | #### bot.food
 935 | 
 936 |  [0, 20] 范围内的数字，表示半个鸡腿的数量。
 937 | 
 938 | #### bot.foodSaturation
 939 | 
 940 | Food saturation acts as a food "overcharge". Food values will not decrease
 941 | while the saturation is over zero. Players logging in automatically get a
 942 | saturation of 5.0. Eating food increases the saturation as well as the food bar.
 943 | 
 944 | #### bot.oxygenLevel
 945 | 
 946 | Number in the range [0, 20] respresenting the number of water-icons known as oxygen level.
 947 | 
 948 | #### bot.physics
 949 | 
 950 | 编辑这些数字以调整重力、跳跃速度、终点速度等。
 951 | 这样做的风险由你自己承担。
 952 | 
 953 | #### bot.simpleClick.leftMouse (slot)
 954 | 
 955 | abstraction over `bot.clickWindow(slot, 0, 0)`
 956 | 
 957 | #### bot.simpleClick.rightMouse (slot)
 958 | 
 959 | abstraction over `bot.clickWindow(slot, 1, 0)`
 960 | 
 961 | #### bot.time.doDaylightCycle
 962 | 
 963 | Whether or not the gamerule doDaylightCycle is true or false.
 964 | 
 965 | #### bot.time.bigTime
 966 | 
 967 | The total number of ticks since day 0.
 968 | 
 969 | This value is of type BigInt and is accurate even at very large values. (more than 2^51 - 1 ticks)
 970 | 
 971 | #### bot.time.time
 972 | 
 973 | The total numbers of ticks since day 0.
 974 | 
 975 | Because the Number limit of Javascript is at 2^51 - 1 bot.time.time becomes inaccurate higher than this limit and the use of bot.time.bigTime is recommended.
 976 | Realistically though you'll probably never need to use bot.time.bigTime as it will only reach 2^51 - 1 ticks naturally after ~14280821 real years.
 977 | 
 978 | #### bot.time.timeOfDay
 979 | 
 980 | 一天中的时间，单位为Tick
 981 | 
 982 | Time is based on ticks, where 20 ticks happen every second. There are 24000
 983 | ticks in a day, making Minecraft days exactly 20 minutes long.
 984 | 
 985 | The time of day is based on the timestamp modulo 24000. 0 is sunrise, 6000
 986 | is noon, 12000 is sunset, and 18000 is midnight.
 987 | 
 988 | #### bot.time.day
 989 | 
 990 | 世界中的一天
 991 | 
 992 | #### bot.time.isDay
 993 | 
 994 | Whether it is day or not.
 995 | 
 996 | Based on whether the current time of day is between 13000 and 23000 ticks.
 997 | 
 998 | #### bot.time.moonPhase
 999 | 
1000 | 月相
1001 | 
1002 | 0-7，其中0表示满月
1003 | 
1004 | #### bot.time.bigAge
1005 | 
1006 | 世界的年龄以tick为单位
1007 | 
1008 | 此值为BigInt类型，即使在非常大的值下也准确。 (more than 2^51 - 1 ticks)
1009 | 
1010 | #### bot.time.age
1011 | 
1012 | Age of the world, in ticks.
1013 | 
1014 | Because the Number limit of Javascript is at 2^51 - 1 bot.time.age becomes inaccurate higher than this limit and the use of bot.time.bigAge is recommended.
1015 | Realistically though you'll probably never need to use bot.time.bigAge as it will only reach 2^51 - 1 ticks naturally after ~14280821 real years.
1016 | 
1017 | #### bot.quickBarSlot
1018 | 
1019 | 选择了哪个物品栏位 (0 - 8)
1020 | 
1021 | #### bot.inventory
1022 | 
1023 | A [`Window`](https://github.com/PrismarineJS/prismarine-windows#windowswindow-base-class) instance representing your inventory.
1024 | 
1025 | #### bot.targetDigBlock
1026 | 
1027 | The `block` that you are currently digging, or `null`.
1028 | 
1029 | #### bot.isSleeping
1030 | 
1031 | Boolean, whether or not you are in bed.
1032 | 
1033 | #### bot.scoreboards
1034 | 
1035 | All scoreboards known to the bot in an object scoreboard name -> scoreboard.
1036 | 
1037 | #### bot.scoreboard
1038 | 
1039 | All scoreboards known to the bot in an object scoreboard displaySlot -> scoreboard.
1040 | 
1041 |  * `belowName` - scoreboard placed in belowName
1042 |  * `sidebar` - scoreboard placed in sidebar
1043 |  * `list` - scoreboard placed in list
1044 |  * `0-18` - slots defined in [protocol](https://wiki.vg/Protocol#Display_Scoreboard)
1045 | 
1046 | #### bot.teams
1047 | 
1048 | 机器人已知的所有队伍
1049 | 
1050 | #### bot.teamMap
1051 | 
1052 | Mapping of member to team. Uses usernames for players and UUIDs for entities.
1053 | 
1054 | #### bot.controlState
1055 | 
1056 | An object whose keys are the main control states: ['forward', 'back', 'left', 'right', 'jump', 'sprint', 'sneak'].
1057 | 
1058 | Setting values for this object internally calls [bot.setControlState](#botsetcontrolstatecontrol-state).
1059 | 
1060 | ### Events
1061 | 
1062 | #### "chat" (username, message, translate, jsonMsg, matches)
1063 | 
1064 | 仅在玩家公开聊天时触发
1065 | 
1066 |  * `username` - who said the message (compare with `bot.username` to ignore your own chat)
1067 |  * `message` - stripped of all color and control characters
1068 |  * `translate` - chat message type. Null for most bukkit chat messages
1069 |  * `jsonMsg` - unmodified JSON message from the server
1070 |  * `matches` - array of returned matches from regular expressions. May be null
1071 | 
1072 | #### "whisper" (username, message, translate, jsonMsg, matches)
1073 | 
1074 | 仅当玩家私下与您聊天时触发
1075 | 
1076 |  * `username` - 谁发的消息
1077 |  * `message` - 去除所有颜色和控制字符
1078 |  * `translate` - 聊天信息类型. 大多数bukkit聊天信息为空
1079 |  * `jsonMsg` - 来自服务器的未修改的JSON消息
1080 |  * `matches` - 返回从正则表达式的匹配项数组。可能为空
1081 | 
1082 | #### "actionBar" (jsonMsg)
1083 | 
1084 | Emitted for every server message which appears on the Action Bar.
1085 | 
1086 |  * `jsonMsg` - 来自服务器的未修改的JSON消息
1087 | 
1088 | #### "message" (jsonMsg, position)
1089 | 
1090 | Emitted for every server message, including chats.
1091 | 
1092 |  * `jsonMsg` - unmodified JSON message from the server
1093 | 
1094 |  * `position` - (>= 1.8.1): 聊天信息的position可以是
1095 |    * chat
1096 |    * system
1097 |    * game_info
1098 | 
1099 | #### "messagestr" (message, messagePosition, jsonMsg)
1100 | 
1101 | `message`事件的别名，但它调用消息对象上的toString()，以在发出前获取消息的字符串。
1102 | 
1103 | #### "inject_allowed"
1104 | 加载索引文件后触发，您可以在此处加载mcData和插件，但最好等待`spawn`事件。
1105 | 
1106 | #### "login"
1107 | 
1108 | 成功登录到服务器后触发。
1109 | 在做任何事情之前 您可能要等待"spawn"事件。
1110 | 
1111 | #### "spawn"
1112 | 
1113 | 在您首次登录和出生后触发一次然后在你死后重生时触发。
1114 | 
1115 | 这通常是您想要监听的事件在服务器上执行任何操作之前.
1116 | 
1117 | #### "respawn"
1118 | 
1119 | 在改变维度时和出生之前触发。
1120 | 一般忽略此事件并等待"spawn"事件。
1121 | 
1122 | #### "game"
1123 | 
1124 | 服务器更改任何游戏属性时触发。
1125 | 
1126 | #### "resourcePack" (url, hash)
1127 | 
1128 | 当服务器发送资源包时触发
1129 | 
1130 | #### "title" (title, type)
1131 | 
1132 | 当服务器发送标题时触发
1133 | 
1134 |  * `title` - 标题文本
1135 |  * `type` - 标题类型 "subtitle" 或 "title"
1136 | 
1137 | #### "rain"
1138 | 
1139 | 开始或停止下雨时触发. 如果你加入已在下雨的服务器上，将触发此事件。
1140 | 
1141 | #### "weatherUpdate"
1142 | 
1143 | Emitted when either `bot.thunderState` or `bot.rainState` changes.
1144 | If you join a server where it is already raining, this event will fire.
1145 | 
1146 | #### "time"
1147 | 
1148 | 当服务器发送时间更新时触发. 见 `bot.time`
1149 | 
1150 | #### "kicked" (reason, loggedIn)
1151 | 
1152 | 当bot从服务器被踢出时触发
1153 | 
1154 |  `reason`是一条解释你被踢的原因的聊天信息.
1155 | 
1156 | `loggedIn`
1157 |  如果客户端在成功登录后被踢出则为`true`
1158 | 如果kick发生在登录阶段则为 `false`
1159 | 
1160 | #### "end" (reason)
1161 | 
1162 | 当您不再连接到服务器时触发
1163 | `reason` 是一个字符串，用于解释客户端断开连接的原因。 (默认为 'socketClosed')
1164 | 
1165 | #### "error" (err)
1166 | 
1167 | 发生错误时触发
1168 | 
1169 | #### "spawnReset"
1170 | 
1171 | 当你不能在床上出生并且出生点重置时触发
1172 | 
1173 | #### "death"
1174 | 
1175 | 当你死亡时触发
1176 | 
1177 | #### "health"
1178 | 
1179 | 当你的血量或饥饿发生变化时触发
1180 | 
1181 | #### "breath"
1182 | 
1183 | 当你的氧气水平改变时触发
1184 | 
1185 | #### "entityAttributes" (entity)
1186 | 
1187 | 当实体的属性更改时触发
1188 | 
1189 | #### "entitySwingArm" (entity)
1190 | #### "entityHurt" (entity)
1191 | 
1192 | 实体被攻击（指被攻击不是受到伤害
1193 | 
1194 | #### "entityDead" (entity)
1195 | #### "entityTaming" (entity)
1196 | #### "entityTamed" (entity)
1197 | #### "entityShakingOffWater" (entity)
1198 | #### "entityEatingGrass" (entity)
1199 | 
1200 | 实体吃草
1201 | 
1202 | #### "entityWake" (entity)
1203 | 
1204 | 实体睡醒
1205 | 
1206 | #### "entityEat" (entity)
1207 | 
1208 | 实体进食
1209 | 
1210 | #### "entityCriticalEffect" (entity)
1211 | 
1212 | 实体暴击效果
1213 | 
1214 | #### "entityMagicCriticalEffect" (entity)
1215 | #### "entityCrouch" (entity)
1216 | #### "entityUncrouch" (entity)
1217 | #### "entityEquip" (entity)
1218 | #### "entitySleep" (entity)
1219 | #### "entitySpawn" (entity)
1220 | #### "itemDrop" (entity)
1221 | #### "playerCollect" (collector, collected)
1222 | 
1223 | 某实体拾取一个物品
1224 | 
1225 |  * `collector` - 拾取物品的实体
1226 |  * `collected` - 地面上的物品所在的实体
1227 | 
1228 | #### "entityGone" (entity)
1229 | #### "entityMoved" (entity)
1230 | 
1231 | 已移动的实体
1232 | 
1233 | #### "entityDetach" (entity, vehicle)
1234 | #### "entityAttach" (entity, vehicle)
1235 | 
1236 | 实体乘骑在交通工具上, 例如矿车和船
1237 | 
1238 |  * `entity` - 搭便车的实体
1239 |  * `vehicle` - 作为车辆的实体
1240 | 
1241 | #### "entityUpdate" (entity)
1242 | #### "entityEffect" (entity, effect)
1243 | 
1244 | 实体获得buff效果
1245 | 
1246 | #### "entityEffectEnd" (entity, effect)
1247 | #### "playerJoined" (player)
1248 | 
1249 | 玩家加入游戏后触发
1250 | 
1251 | #### "playerUpdated" (player)
1252 | #### "playerLeft" (player)
1253 | 
1254 | 玩家离开游戏触发
1255 | 
1256 | #### "blockUpdate" (oldBlock, newBlock)
1257 | 
1258 | (It is better to use this event from bot.world instead of bot directly) Fires when a block updates. Both `oldBlock` and `newBlock` provided for
1259 | comparison.
1260 | 
1261 | 注意:  `oldBlock` 可能为 `null`
1262 | 
1263 | #### "blockUpdate:(x, y, z)" (oldBlock, newBlock)
1264 | 
1265 | (It is better to use this event from bot.world instead of bot directly) Fires for a specific point. Both `oldBlock` and `newBlock` provided for
1266 | comparison.
1267 | 
1268 | 注意:  `oldBlock` 可能为 `null`
1269 | 
1270 | #### "blockPlaced" (oldBlock, newBlock)
1271 | 
1272 | 当机器人放置方块时触发. Both `oldBlock` and `newBlock` provided for
1273 | comparison.
1274 | 
1275 | 注意:  `oldBlock` 可能为 `null`
1276 | 
1277 | #### "chunkColumnLoad" (point)
1278 | #### "chunkColumnUnload" (point)
1279 | 
1280 | 当区块已更新时触发. `point` is the coordinates to the corner of the chunk with the smallest x, y, and z values.
1281 | 
1282 | #### "soundEffectHeard" (soundName, position, volume, pitch)
1283 | 
1284 | 当客户端听到指定的音效时触发
1285 | 
1286 |  * `soundName`: 音效名称
1287 |  * `position`:  Vec3 实例，声音从哪里发出（译者注：vec3即 x,y,z坐标
1288 |  * `volume`: 浮点数音量, 1.0 为100%
1289 |  * `pitch`: 整数音高，63为100%
1290 | 
1291 | #### "hardcodedSoundEffectHeard" (soundId, soundCategory, position, volume, pitch)
1292 | 
1293 |   Fires when the client hears a hardcoded sound effect.
1294 | 
1295 |    * `soundId`: id of the sound effect
1296 |    * `soundCategory`: category of the sound effect
1297 |    * `position`: a Vec3 instance where the sound originates
1298 |    * `volume`: floating point volume, 1.0 is 100%
1299 |    * `pitch`: integer pitch, 63 is 100%
1300 | 
1301 | #### "noteHeard" (block, instrument, pitch)
1302 | 
1303 | 当一个音符块在某处响起时触发
1304 | 
1305 |  * `block`: a Block instance, the block that emitted the noise
1306 |  * `instrument`:
1307 |    - `id`: integer id
1308 |    - `name`: one of [`harp`, `doubleBass`, `snareDrum`, `sticks`, `bassDrum`].
1309 |  * `pitch`: The pitch of the note (between 0-24 inclusive where 0 is the
1310 |    lowest and 24 is the highest). More information about how the pitch values
1311 |    correspond to notes in real life are available on the
1312 |    [official Minecraft wiki](http://minecraft.wiki/w/Note_Block).
1313 | 
1314 | #### "pistonMove" (block, isPulling, direction)
1315 | 
1316 | #### "chestLidMove" (block, isOpen, block2)
1317 | * `block`: a Block instance, the block whose lid opened. The right block if it's a double chest
1318 | * `isOpen`: number of players that have the chest open. 0 if it's closed
1319 | * `block2`: a Block instance, the other half of the block whose lid opened. null if it's not a double chest
1320 | 
1321 | #### "blockBreakProgressObserved" (block, destroyStage)
1322 | 
1323 | Fires when the client observes a block in the process of being broken.
1324 | 
1325 |  * `block`: a Block instance, the block being broken
1326 |  * `destroyStage`: integer corresponding to the destroy progress (0-9)
1327 | 
1328 | #### "blockBreakProgressEnd" (block)
1329 | 
1330 | Fires when the client observes a block stops being broken.
1331 | This occurs whether the process was completed or aborted.
1332 | 
1333 |  * `block`: a Block instance, the block no longer being broken
1334 | 
1335 | #### "diggingCompleted" (block)
1336 | 
1337 |  * `block` - 方块不再存在
1338 | 
1339 | #### "diggingAborted" (block)
1340 | 
1341 |  * `block` - 方块仍然存在
1342 | 
1343 | #### "usedFirework" (fireworkEntityId)
1344 | 
1345 | 在机器人在鞘翅飞行时使用烟花火箭时触发
1346 | 
1347 |  * `fireworkEntityId` - 烟花火箭的实体编号
1348 | 
1349 | #### "move"
1350 | 
1351 | 当机器人移动时触发. 如果需要当前位置，请使用
1352 | `bot.entity.position` 对于正常移动，如果您想要上一个位置，请使用
1353 | `bot.entity.position.minus(bot.entity.velocity)`.
1354 | 
1355 | #### "forcedMove"
1356 | 
1357 | Fires when the bot is force moved by the server (teleport, spawning, ...). If you want the current position, use
1358 | `bot.entity.position`.
1359 | 
1360 | #### "mount"
1361 | 
1362 | 乘骑实体（如矿车）时触发
1363 | 
1364 | 要访问实体，请使用 `bot.vehicle`.
1365 | 
1366 | 要乘骑实体, 请使用 `mount`.
1367 | 
1368 | #### "dismount" (vehicle)
1369 | 
1370 | 实体从坐骑上下马时触发
1371 | 
1372 | #### "windowOpen" (window)
1373 | 
1374 | Fires when you begin using a workbench, chest, brewing stand, etc.
1375 | 
1376 | #### "windowClose" (window)
1377 | 
1378 | Fires when you may no longer work with a workbench, chest, etc.
1379 | 
1380 | #### "sleep"
1381 | 
1382 | 睡觉时触发
1383 | 
1384 | #### "wake"
1385 | 
1386 | 当你醒来的时候触发
1387 | 
1388 | #### "experience"
1389 | 
1390 | 当 `bot.experience.*` 经验点数变化时触发
1391 | 
1392 | #### "scoreboardCreated" (scoreboard)
1393 | 
1394 | 记分牌被添加时触发
1395 | 
1396 | #### "scoreboardDeleted" (scoreboard)
1397 | 
1398 | 记分板被删除时触发
1399 | 
1400 | #### "scoreboardTitleChanged" (scoreboard)
1401 | 
1402 | 当记分牌标题更新时触发
1403 | 
1404 | #### "scoreUpdated" (scoreboard, item)
1405 | 
1406 | Fires when the score of a item in a scoreboard is updated.
1407 | 
1408 | #### "scoreRemoved" (scoreboard, item)
1409 | 
1410 | Fires when the score of a item in a scoreboard is removed.
1411 | 
1412 | #### "scoreboardPosition" (position, scoreboard)
1413 | 
1414 | Fires when the position of a scoreboard is updated.
1415 | 
1416 | #### "teamCreated" (team)
1417 | 
1418 | 添加队伍时触发
1419 | 
1420 | #### "teamRemoved" (team)
1421 | 
1422 | 队伍被移除触发
1423 | 
1424 | #### "teamUpdated" (team)
1425 | 
1426 | 更新队伍触发
1427 | 
1428 | #### "teamMemberAdded" (team)
1429 | 
1430 | Fires when a team member or multiple members are added to a team.
1431 | 
1432 | #### "teamMemberRemoved" (team)
1433 | 
1434 | Fires when a team member or multiple members are removed from a team.
1435 | 
1436 | #### "bossBarCreated" (bossBar)
1437 | 
1438 | 新boss栏创建时触发
1439 | 
1440 | #### "bossBarDeleted" (bossBar)
1441 | 
1442 | 新boss栏删除时激发。
1443 | 
1444 | #### "bossBarUpdated" (bossBar)
1445 | 
1446 | 更新新boss栏时触发
1447 | 
1448 | #### "heldItemChanged" (heldItem)
1449 | 
1450 | 手持物品变动时触发
1451 | 
1452 | #### "physicsTick" ()
1453 | 
1454 | 如果 bot.physicsEnabled 设为true则每tick触发一次
1455 | 
1456 | #### "chat:name" (matches)
1457 | 
1458 | Fires when the all of a chat pattern's regexs have matches
1459 | 
1460 | ### Functions
1461 | 
1462 | #### bot.blockAt(point, extraInfos=true)
1463 | 
1464 | Returns the block at `point` or `null` if that point is not loaded. If `extraInfos` set to true, also returns informations about signs, paintings and block entities (slower).
1465 | See `Block`.
1466 | 
1467 | #### bot.waitForChunksToLoad(cb)
1468 | 
1469 | This function also returns a `Promise`, with `void` as its argument upon completion.
1470 | 
1471 | The cb gets called when many chunks have loaded.
1472 | 
1473 | #### bot.blockInSight(maxSteps, vectorLength)
1474 | 
1475 | Deprecated, use `blockAtCursor` instead.
1476 | 
1477 | Returns the block at which bot is looking at or `null`
1478 |  * `maxSteps` - Number of steps to raytrace, defaults to 256.
1479 |  * `vectorLength` - Length of raytracing vector, defaults to `5/16`.
1480 | 
1481 | #### bot.blockAtCursor(maxDistance=256)
1482 | 
1483 | Returns the block at which bot is looking at or `null`
1484 |  * `maxDistance` - The maximum distance the block can be from the eye, defaults to 256.
1485 | 
1486 | #### bot.blockAtEntityCursor(entity=bot.entity, maxDistance=256)
1487 | 
1488 | Returns the block at which specific entity is looking at or `null`
1489 |  * `entity` - Entity data as `Object`
1490 |  * `maxDistance` - The maximum distance the block can be from the eye, defaults to 256.
1491 | 
1492 | #### bot.canSeeBlock(block)
1493 | 
1494 | Returns true or false depending on whether the bot can see the specified `block`.
1495 | 
1496 | #### bot.findBlocks(options)
1497 | 
1498 | Finds the closest blocks from the given point.
1499 |  * `options` - Options for the search:
1500 |    - `point` - The start position of the search (center). Default is the bot position.
1501 |    - `matching` - A function that returns true if the given block is a match. Also supports this value being a block id or array of block ids.
1502 |    - `useExtraInfo` - To preserve backward compatibility can result in two behavior depending on the type
1503 |       - **boolean** - Provide your `matching` function more data - noticeably slower aproach
1504 |       - **function** - Creates two stage maching, if block passes `matching` function it is passed further to `useExtraInfo` with additional info
1505 |    - `maxDistance` - The furthest distance for the search, defaults to 16.
1506 |    - `count` - Number of blocks to find before returning the search. Default to 1. Can return less if not enough blocks are found exploring the whole area.
1507 | 
1508 | Returns an array (possibly empty) with the found block coordinates (not the blocks). The array is sorted (closest first)
1509 | 
1510 | #### bot.findBlock(options)
1511 | 
1512 | Alias for `bot.blockAt(bot.findBlocks(options)[0])`. Return a single block or `null`.
1513 | 
1514 | #### bot.canDigBlock(block)
1515 | 
1516 | Returns whether `block` is diggable and within range.
1517 | 
1518 | #### bot.recipesFor(itemType, metadata, minResultCount, craftingTable)
1519 | 
1520 | Returns a list of `Recipe` instances that you could use to craft `itemType`
1521 | with `metadata`.
1522 | 
1523 |  * `itemType` - numerical item id of the thing you want to craft
1524 |  * `metadata` - the numerical metadata value of the item you want to craft
1525 |    `null` matches any metadata.
1526 |  * `minResultCount` - based on your current inventory, any recipe from the
1527 |    returned list will be able to produce this many items. `null` is an
1528 |    alias for `1`.
1529 |  * `craftingTable` - a `Block` instance. If `null`, only recipes that can
1530 |    be performed in your inventory window will be included in the list.
1531 | 
1532 | #### bot.recipesAll(itemType, metadata, craftingTable)
1533 | 
1534 | The same as bot.recipesFor except that it does not check wether the bot has enough materials for the recipe.
1535 | 
1536 | #### bot.nearestEntity(match = (entity) => { return true })
1537 | 
1538 | Return the nearest entity to the bot, matching the function (default to all entities). Return null if no entity is found.
1539 | 
1540 | 示例:
1541 | ```js
1542 | const cow = bot.nearestEntity(entity => entity.name.toLowerCase() === 'cow') // 我们使用 .toLowercase() 因为在1.8版本中，cow是大写的，这样可以适用于新版本
1543 | ```
1544 | 
1545 | ### Methods
1546 | 
1547 | #### bot.end(reason)
1548 | 
1549 | End the connection with the server.
1550 | * `reason` - Optional string that states the reason of the end.
1551 | 
1552 | #### bot.quit(reason)
1553 | 
1554 | Gracefully disconnect from the server with the given reason (defaults to 'disconnect.quitting').
1555 | 
1556 | #### bot.tabComplete(str, cb, [assumeCommand], [sendBlockInSight])
1557 | 
1558 | This function also returns a `Promise`, with `matches` as its argument upon completion.
1559 | 
1560 | Requests chat completion from the server.
1561 |  * `str` - String to complete.
1562 |  * `callback(matches)`
1563 |    - `matches` - Array of matching strings.
1564 |  * `assumeCommand` - Field sent to server, defaults to false.
1565 |  * `sendBlockInSight` - Field sent to server, defaults to true. Set this option to false if you want more performance.
1566 | 
1567 | #### bot.chat(message)
1568 | 
1569 | Sends a publicly broadcast chat message. Breaks up big messages into multiple chat messages as necessary.
1570 | 
1571 | #### bot.whisper(username, message)
1572 | 
1573 | Shortcut for "/tell <username>". All split messages will be whispered to username.
1574 | 
1575 | #### bot.chatAddPattern(pattern, chatType, description)
1576 | 
1577 | Deprecated, use `addChatPattern` instead.
1578 | 
1579 | Adds a regex pattern to the bot's chat matching. Useful for bukkit servers where the chat format changes a lot.
1580 |  * `pattern` - regular expression to match chat
1581 |  * `chatType` - the event the bot emits when the pattern matches. Eg: "chat" or "whisper"
1582 |  * 'description ' - Optional, describes what the pattern is for
1583 | 
1584 | #### bot.addChatPattern(name, pattern, chatPatternOptions)
1585 | 
1586 | ** this is an alias of `bot.addChatPatternSet(name, [pattern], chatPatternOptions)`
1587 | 
1588 | make an event that is called every time the pattern is matched to a message,
1589 | the event will be called `"chat:name"`, with name being the name passed
1590 | * `name` - the name used to listen for the event
1591 | * `pattern` - regular expression to match to messages recieved
1592 | * `chatPatternOptions` - object
1593 |   * `repeat` - defaults to true, whether to listen for this event after the first match
1594 |   * `parse` - instead of returning the actual message that was matched, return the capture groups from the regex
1595 |   * `deprecated` - (**unstable**) used by bot.chatAddPattern to keep compatability, likely to be removed
1596 | 
1597 | returns a number which can be used with bot.removeChatPattern() to only delete this pattern
1598 | 
1599 | #### bot.addChatPatternSet(name, patterns, chatPatternOptions)
1600 | 
1601 | make an event that is called every time all patterns havee been matched to messages,
1602 | the event will be called `"chat:name"`, with name being the name passed
1603 | * `name` - the name used to listen for the event
1604 | * `patterns` - array of regular expression to match to messages recieved
1605 | * `chatPatternOptions` - object
1606 |   * `repeat` - defaults to true, whether to listen for this event after the first match
1607 |   * `parse` - instead of returning the actual message that was matched, return the capture groups from the regex
1608 | 
1609 | returns a number which can be used with bot.removeChatPattern() to only delete this patternset
1610 | 
1611 | #### bot.removeChatPattern(name)
1612 | 
1613 | removes a chat pattern(s)
1614 | * `name` : string or number
1615 | 
1616 | if name is a string, all patterns that have that name will be removed
1617 | else if name is a number, only that exact pattern will be removed
1618 | 
1619 | #### bot.awaitMessage(...args)
1620 | 
1621 | promise that is resolved when one of the messages passed as an arg is resolved
1622 | 
1623 | Example:
1624 | 
1625 | ```js
1626 | async function wait () {
1627 |   await bot.awaitMessage('<flatbot> hello world') // resolves on "hello world" in chat by flatbot
1628 |   await bot.awaitMessage(['<flatbot> hello', '<flatbot> world']) // resolves on "hello" or "world" in chat by flatbot
1629 |   await bot.awaitMessage(['<flatbot> hello', '<flatbot> world'], ['<flatbot> im', '<flatbot> batman']) // resolves on "hello" or "world" or "im" or "batman" in chat by flatbot
1630 |   await bot.awaitMessage('<flatbot> hello', '<flatbot> world') // resolves on "hello" or "world" in chat by flatbot
1631 |   await bot.awaitMessage(/<flatbot> (.+)/) // resolves on first message matching the regex
1632 | }
1633 | ```
1634 | 
1635 | #### bot.setSettings(options)
1636 | 
1637 | See the `bot.settings` property.
1638 | 
1639 | #### bot.loadPlugin(plugin)
1640 | 
1641 | Injects a Plugin. Does nothing if the plugin is already loaded.
1642 | 
1643 |  * `plugin` - function
1644 | 
1645 | ```js
1646 | function somePlugin (bot, options) {
1647 |   function someFunction () {
1648 |     bot.chat('Yay!')
1649 |   }
1650 | 
1651 |   bot.myPlugin = {} // Good practice to namespace plugin API
1652 |   bot.myPlugin.someFunction = someFunction
1653 | }
1654 | 
1655 | const bot = mineflayer.createBot({})
1656 | bot.loadPlugin(somePlugin)
1657 | bot.once('login', function () {
1658 |   bot.myPlugin.someFunction() // Yay!
1659 | })
1660 | ```
1661 | 
1662 | #### bot.loadPlugins(plugins)
1663 | 
1664 | Injects plugins see `bot.loadPlugin`.
1665 |  * `plugins` - array of functions
1666 | 
1667 | #### bot.hasPlugin(plugin)
1668 | 
1669 | Checks if the given plugin is loaded (or scheduled to be loaded) on this bot.
1670 | 
1671 | #### bot.sleep(bedBlock, [cb])
1672 | 
1673 | This function also returns a `Promise`, with `void` as its argument upon completion.
1674 | 
1675 | Sleep in a bed. `bedBlock` should be a `Block` instance which is a bed. `cb` can have an err parameter if the bot cannot sleep.
1676 | 
1677 | #### bot.isABed(bedBlock)
1678 | 
1679 | Return true if `bedBlock` is a bed
1680 | 
1681 | #### bot.wake([cb])
1682 | 
1683 | This function also returns a `Promise`, with `void` as its argument upon completion.
1684 | 
1685 | Get out of bed. `cb` can have an err parameter if the bot cannot wake up.
1686 | 
1687 | #### bot.setControlState(control, state)
1688 | 
1689 | This is the main method controlling the bot movements. It works similarly to pressing keys in minecraft.
1690 | For example forward with state true will make the bot move forward. Forward with state false will make the bot stop moving forward.
1691 | You may use bot.lookAt in conjunction with this to control movement. The jumper.js example shows how to use this.
1692 | 
1693 |  * `control` - one of ['forward', 'back', 'left', 'right', 'jump', 'sprint', 'sneak']
1694 |  * `state` - `true` or `false`
1695 | 
1696 | #### bot.getControlState(control)
1697 | 
1698 | Returns true if a control state is toggled.
1699 | 
1700 | * `control` - one of ['forward', 'back', 'left', 'right', 'jump', 'sprint', 'sneak']
1701 | 
1702 | #### bot.clearControlStates()
1703 | 
1704 | Sets all controls to off.
1705 | 
1706 | #### bot.getExplosionDamages(entity, position, radius, [rawDamages])
1707 | 
1708 | Returns how much damage will be done to the entity in a radius around the position of the explosion.
1709 | It will return `null` if the entity has no armor and rawDamages is not set to true, since the function can't calculate the damage with armor if there is no armor.
1710 | 
1711 | * `entity` - Entity instance
1712 | * `position` - [Vec3](https://github.com/andrewrk/node-vec3) instance
1713 | * `radius` - the explosion radius as a number
1714 | * `rawDamages` - optional, if true it ignores armor in the calculation
1715 | 
1716 | #### bot.lookAt(point, [force], [callback])
1717 | 
1718 | This function also returns a `Promise`, with `void` as its argument upon completion.
1719 | 
1720 |  * `point` [Vec3](https://github.com/andrewrk/node-vec3) instance - tilts your head so that it is directly facing this point.
1721 |  * `force` - See `force` in `bot.look`
1722 |  * `callback()` optional, called when you are looking at `point`
1723 | 
1724 | #### bot.look(yaw, pitch, [force], [callback])
1725 | 
1726 | This function also returns a `Promise`, with `void` as its argument upon completion.
1727 | 
1728 | Set the direction your head is facing.
1729 | 
1730 |  * `yaw` - The number of radians to rotate around the vertical axis, starting
1731 |    from due east. Counter clockwise.
1732 |  * `pitch` - Number of radians to point up or down. 0 means straight forward.
1733 |    pi / 2 means straight up. -pi / 2 means straight down.
1734 |  * `force` - If present and true, skips the smooth server-side transition.
1735 |    Specify this to true if you need the server to know exactly where you
1736 |    are looking, such as for dropping items or shooting arrows. This is not
1737 |    needed for client-side calculation such as walking direction.
1738 |  * `callback()` optional, called when you are looking at `yaw` and `pitch`
1739 | 
1740 | #### bot.updateSign(block, text)
1741 | 
1742 | Changes the text on the sign.
1743 | 
1744 | #### bot.equip(item, destination, [callback])
1745 | 
1746 | This function also returns a `Promise`, with `void` as its argument upon completion.
1747 | 
1748 | Equips an item from your inventory. If the argument `item` is of Instance `Item` equip will equip this specific item from its window slot. If the argument `item` is of type `number` equip will equip the first item found with that id searched by rising slot id (Hotbar is searched last. Armor, crafting, crafting result and off-hand slots are excluded).
1749 | 
1750 |  * `item` - `Item` instance or `number` for item id. See `window.items()`.
1751 |  * `destination`
1752 |    - `"hand"` - `null` aliases to this
1753 |    - `"head"`
1754 |    - `"torso"`
1755 |    - `"legs"`
1756 |    - `"feet"`
1757 |    - `"off-hand"` - when available
1758 |  * `callback(error)` - optional. called when you have successfully equipped
1759 |    the item or when you learn that you have failed to equip the item.
1760 | 
1761 | #### bot.unequip(destination, [callback])
1762 | 
1763 | This function also returns a `Promise`, with `void` as its argument upon completion.
1764 | 
1765 | Remove an article of equipment.
1766 | 
1767 | #### bot.tossStack(item, [callback])
1768 | 
1769 | This function also returns a `Promise`, with `void` as its argument upon completion.
1770 | 
1771 |  * `item` - the stack of items you wish to toss
1772 |  * `callback(error)` - optional, called when tossing is done. if error is
1773 |    truthy, you were not able to complete the toss.
1774 | 
1775 | #### bot.toss(itemType, metadata, count, [callback])
1776 | 
1777 | This function also returns a `Promise`, with `void` as its argument upon completion.
1778 | 
1779 |  * `itemType` - numerical id of the item you wish to toss
1780 |  * `metadata` - metadata of the item you wish to toss. Use `null`
1781 |    to match any metadata
1782 |  * `count` - how many you want to toss. `null` is an alias for `1`.
1783 |  * `callback(err)` - (optional) called once tossing is complete
1784 | 
1785 | #### bot.dig(block, [forceLook = true], [digFace], [callback])
1786 | 
1787 | This function also returns a `Promise`, with `void` as its argument upon completion.
1788 | 
1789 | Begin digging into `block` with the currently equipped item.
1790 | See also "diggingCompleted" and "diggingAborted" events.
1791 | 
1792 | Note that once you begin digging into a block, you may not
1793 | dig any other blocks until the block has been broken, or you call
1794 | `bot.stopDigging()`.
1795 | 
1796 |  * `block` - the block to start digging into
1797 |  * `forceLook` - (optional) if true, look at the block and start mining instantly. If false, the bot will slowly turn to the block to mine. Additionally, this can be assigned to 'ignore' to prevent the bot from moving it's head at all. Also, this can be assigned to 'raycast' to raycast from the bots head to place where the bot is looking.
1798 |  * `digFace` - (optional) Default is 'auto' looks at the center of the block and mines the top face. Can also be a vec3 vector
1799 |  of the face the bot should be looking at when digging the block. For example: ```vec3(0, 1, 0)``` when mining the top. Can also be 'raycast' raycast checks if there is a face visible by the bot and mines that face. Useful for servers with anti cheat.
1800 |  * `callback(err)` - (optional) called when the block is broken or you
1801 |    are interrupted.
1802 | 
1803 | If you call bot.dig twice before the first dig is finished, you will get a fatal 'diggingAborted' error.
1804 | 
1805 | #### bot.stopDigging()
1806 | 
1807 | #### bot.digTime(block)
1808 | 
1809 | Tells you how long it will take to dig the block, in milliseconds.
1810 | 
1811 | #### bot.acceptResourcePack()
1812 | 
1813 | Accepts resource pack.
1814 | 
1815 | #### bot.denyResourcePack()
1816 | 
1817 | Denies resource pack.
1818 | 
1819 | #### bot.placeBlock(referenceBlock, faceVector, cb)
1820 | 
1821 | This function also returns a `Promise`, with `void` as its argument upon completion.
1822 | 
1823 |  * `referenceBlock` - the block you want to place a new block next to
1824 |  * `faceVector` - one of the six cardinal directions, such as `new Vec3(0, 1, 0)` for the top face,
1825 |    indicating which face of the `referenceBlock` to place the block against.
1826 |  * `cb` will be called when the server confirms that the block has indeed been placed
1827 | 
1828 | The new block will be placed at `referenceBlock.position.plus(faceVector)`.
1829 | 
1830 | #### bot.placeEntity(referenceBlock, faceVector)
1831 | 
1832 | This function also returns a `Promise`, with `Entity` as its argument upon completion.
1833 | 
1834 |  * `referenceBlock` - the block you want to place the entity next to
1835 |  * `faceVector` - one of the six cardinal directions, such as `new Vec3(0, 1, 0)` for the top face,
1836 |    indicating which face of the `referenceBlock` to place the block against.
1837 | 
1838 | The new block will be placed at `referenceBlock.position.plus(faceVector)`.
1839 | 
1840 | #### bot.activateBlock(block, [callback])
1841 | 
1842 | This function also returns a `Promise`, with `void` as its argument upon completion.
1843 | 
1844 | Punch a note block, open a door, etc.
1845 | 
1846 |  * `block` - the block to activate
1847 |  * `callback(err)` - (optional) called when the block has been activated
1848 | 
1849 | #### bot.activateEntity(entity, [callback])
1850 | 
1851 | This function also returns a `Promise`, with `void` as its argument upon completion.
1852 | 
1853 | Activate an entity, useful for villager for example.
1854 | 
1855 |  * `entity` - the entity to activate
1856 |  * `callback(err)` - (optional) called when the entity has been activated
1857 | 
1858 | #### bot.activateEntityAt(entity, position, [callback])
1859 | 
1860 | This function also returns a `Promise`, with `void` as its argument upon completion.
1861 | 
1862 | Activate an entity at the given position, useful for armor stands.
1863 | 
1864 |  * `entity` - the entity to activate
1865 |  * `position` - the world position to click at
1866 |  * `callback(err)` - (optional) called when the entity has been activated
1867 | 
1868 | #### bot.consume(callback)
1869 | 
1870 | This function also returns a `Promise`, with `void` as its argument upon completion.
1871 | 
1872 | Eat / drink currently held item
1873 | 
1874 |  * `callback(error)` - called when consume ends
1875 | 
1876 | #### bot.fish(callback)
1877 | 
1878 | This function also returns a `Promise`, with `void` as its argument upon completion.
1879 | 
1880 | Use fishing rod
1881 | 
1882 |  * `callback(error)` - called when fishing ends
1883 | 
1884 | #### bot.activateItem(offHand=false)
1885 | 
1886 | Activates the currently held item. This is how you eat, shoot bows, throw an egg, etc.
1887 | Optional parameter is `false` for main hand and `true` for off hand.
1888 | 
1889 | #### bot.deactivateItem()
1890 | 
1891 | Deactivates the currently held item. This is how you release an arrow, stop eating, etc.
1892 | 
1893 | #### bot.useOn(targetEntity)
1894 | 
1895 | Use the currently held item on an `Entity` instance. This is how you apply a saddle and
1896 | use shears.
1897 | 
1898 | #### bot.attack(entity, swing = true)
1899 | 
1900 | Attack a player or a mob.
1901 | 
1902 |  * `entity` is a type of entity. To get a specific entity use [bot.nearestEntity()](#botnearestentitymatch--entity---return-true-) or [bot.entities](#botentities).
1903 |  * `swing` Default `true`. If false the bot does not swing is arm when attacking.
1904 | 
1905 | #### bot.swingArm([hand], showHand)
1906 | 
1907 | Play an arm swing animation.
1908 | 
1909 |  * `hand` can take `left` or `right` which is arm that is animated. Default: `right`
1910 |  * `showHand` is a boolean whether to add the hand to the packet, Default: `true`
1911 | 
1912 | #### bot.mount(entity)
1913 | 
1914 | Mount a vehicle. To get back out, use `bot.dismount`.
1915 | 
1916 | #### bot.dismount()
1917 | 
1918 | Dismounts from the vehicle you are in.
1919 | 
1920 | #### bot.moveVehicle(left,forward)
1921 | 
1922 | Moves the vehicle :
1923 | 
1924 |  * left can take -1 or 1 : -1 means right, 1 means left
1925 |  * forward can take -1 or 1 : -1 means backward, 1 means forward
1926 | 
1927 | All the direction are relative to where the bot is looking at
1928 | 
1929 | #### bot.setQuickBarSlot(slot)
1930 | 
1931 |  * `slot` - 0-8 the quick bar slot to select.
1932 | 
1933 | #### bot.craft(recipe, count, craftingTable, [callback])
1934 | 
1935 | This function also returns a `Promise`, with `void` as its argument upon completion.
1936 | 
1937 |  * `recipe` - A `Recipe` instance. See `bot.recipesFor`.
1938 |  * `count` - How many times you wish to perform the operation.
1939 |    If you want to craft planks into `8` sticks, you would set
1940 |    `count` to `2`. `null` is an alias for `1`.
1941 |  * `craftingTable` - A `Block` instance, the crafting table you wish to
1942 |    use. If the recipe does not require a crafting table, you may use
1943 |    `null` for this argument.
1944 |  * `callback` - (optional) Called when the crafting is complete and your
1945 |    inventory is updated.
1946 | 
1947 | #### bot.writeBook(slot, pages, [callback])
1948 | 
1949 | This function also returns a `Promise`, with `void` as its argument upon completion.
1950 | 
1951 |  * `slot` is in inventory window coordinates (where 36 is the first quickbar slot, etc.).
1952 |  * `pages` is an array of strings represents the pages.
1953 |  * `callback(error)` - optional. called when the writing was successfully or an error occurred.
1954 | 
1955 | #### bot.openContainer(containerBlock or containerEntity)
1956 | 
1957 | Returns a promise on a `Container` instance which represents the container you are opening.
1958 | 
1959 | #### bot.openChest(chestBlock or minecartchestEntity)
1960 | 
1961 | Deprecated. Same as `openContainer`
1962 | 
1963 | #### bot.openFurnace(furnaceBlock)
1964 | 
1965 | Returns a promise on a `Furnace` instance which represents the furnace you are opening.
1966 | 
1967 | #### bot.openDispenser(dispenserBlock)
1968 | 
1969 | Deprecated. Same as `openContainer`
1970 | 
1971 | #### bot.openEnchantmentTable(enchantmentTableBlock)
1972 | 
1973 | Returns a promise on an `EnchantmentTable` instance which represents the enchantment table
1974 | you are opening.
1975 | 
1976 | #### bot.openAnvil(anvilBlock)
1977 | 
1978 | Returns a promise on an `anvil` instance which represents the anvil you are opening.
1979 | 
1980 | #### bot.openVillager(villagerEntity)
1981 | 
1982 | Returns a promise on a `Villager` instance which represents the trading window you are opening.
1983 | You can listen to the `ready` event on this `Villager` to know when it's ready
1984 | 
1985 | #### bot.trade(villagerInstance, tradeIndex, [times], [cb])
1986 | 
1987 | This function also returns a `Promise`, with `void` as its argument upon completion.
1988 | 
1989 | Uses the open `villagerInstance` to trade.
1990 | 
1991 | #### bot.setCommandBlock(pos, command, [options])
1992 | 
1993 | Set a command block's properties at `pos`.
1994 | Example `options` argument:
1995 | 
1996 | ```js
1997 | {
1998 |   mode: 2,
1999 |   trackOutput: true,
2000 |   conditional: false,
2001 |   alwaysActive: true
2002 | }
2003 | ```
2004 | options.mode can have 3 values: 0 (SEQUENCE), 1 (AUTO), 2 (REDSTONE)
2005 | All options attributes are false by default, except mode which is 2 (as to replicate the default command block in Minecraft).
2006 | 
2007 | #### bot.supportFeature(name)
2008 | 
2009 | This can be used to check is a specific feature is available in the current Minecraft version. This is usually only required for handling version-specific functionality.
2010 | 
2011 | The list of available features can be found inside the [./lib/features.json](https://github.com/PrismarineJS/mineflayer/blob/master/lib/features.json) file.
2012 | 
2013 | #### bot.waitForTicks(ticks)
2014 | 
2015 | This is a promise-based function that waits for a given number of in-game ticks to pass before continuing. This is useful for quick timers that need to function with specific timing, regardless of the given physics tick speed of the bot. This is similar to the standard Javascript setTimeout function, but runs on the physics timer of the bot specifically.
2016 | 
2017 | ### Lower level inventory methods
2018 | 
2019 | These are lower level methods for the inventory, they can be useful sometimes but prefer the inventory methods presented above if you can.
2020 | 
2021 | #### bot.clickWindow(slot, mouseButton, mode, cb)
2022 | 
2023 | This function also returns a `Promise`, with `void` as its argument upon completion.
2024 | 
2025 | Click on the current window. See details at https://wiki.vg/Protocol#Click_Window
2026 | 
2027 | #### bot.putSelectedItemRange(start, end, window, slot)
2028 | 
2029 | This function also returns a `Promise`, with `void` as its argument upon completion.
2030 | 
2031 | Put the item at `slot` in the specified range.
2032 | 
2033 | #### bot.putAway(slot)
2034 | 
2035 | This function also returns a `Promise`, with `void` as its argument upon completion.
2036 | 
2037 | Put the item at `slot` in the inventory.
2038 | 
2039 | #### bot.closeWindow(window)
2040 | 
2041 | Close the `window`.
2042 | 
2043 | #### bot.transfer(options, cb)
2044 | 
2045 | This function also returns a `Promise`, with `void` as its argument upon completion.
2046 | 
2047 | Transfer some kind of item from one range to an other. `options` is an object containing :
2048 | 
2049 |  * `window` : the window where the item will be moved
2050 |  * `itemType` : the type of the moved items
2051 |  * `metadata` : the metadata of the moved items
2052 |  * `sourceStart` and `sourceEnd` : the source range
2053 |  * `destStart` and `destEnd` : the dest Range
2054 |  * `count` : the amount of items to transfer. Default: `1`
2055 |  * `nbt` : nbt data of the item to transfer. Default: `nullish` (ignores nbt)
2056 | 
2057 | #### bot.openBlock(block)
2058 | 
2059 | Open a block, for example a chest, returns a promise on the opening `Window`.
2060 | 
2061 |  * `block` is the block the bot will open
2062 | 
2063 | #### bot.openEntity(entity)
2064 | 
2065 | Open an entity with an inventory, for example a villager, returns a promise on the opening `Window`.
2066 | 
2067 |  * `entity` is the entity the bot will open
2068 | 
2069 | #### bot.moveSlotItem(sourceSlot, destSlot, cb)
2070 | 
2071 | This function also returns a `Promise`, with `void` as its argument upon completion.
2072 | 
2073 | Move an item from `sourceSlot` to `destSlot` in the current window.
2074 | 
2075 | #### bot.updateHeldItem()
2076 | 
2077 | Update `bot.heldItem`.
2078 | 
2079 | #### bot.getEquipmentDestSlot(destination)
2080 | 
2081 | Gets the inventory equipment slot id for the given equipment destination name.
2082 | 
2083 | Available destinations are:
2084 | * head
2085 | * torso
2086 | * legs
2087 | * feet
2088 | * hand
2089 | * off-hand
2090 | 
2091 | ### bot.creative
2092 | 
2093 | This collection of apis is useful in creative mode.
2094 | Detecting and changing gamemodes is not implemented here,
2095 | but it is assumed and often required that the bot be in creative mode for these features to work.
2096 | 
2097 | #### bot.creative.setInventorySlot(slot, item, [callback])
2098 | 
2099 | This function also returns a `Promise`, with `void` as its argument upon completion.
2100 | 
2101 | Gives the bot the specified item in the specified inventory slot.
2102 | If called twice on the same slot before first callback exceeds, first callback will have an error parameter
2103 | 
2104 |  * `slot` is in inventory window coordinates (where 36 is the first quickbar slot, etc.).
2105 |  * `item` is a [prismarine-item](https://github.com/PrismarineJS/prismarine-item) instance specified with arbitrary metadata, nbtdata, etc.
2106 |     If `item` is `null`, the item at the specified slot is deleted.
2107 |  * `callback(err)` (optional) is a callback which gets fired when the servers sets the slot
2108 | 
2109 | If this method changes anything, you can be notified via `bot.inventory.on("updateSlot")`.
2110 | 
2111 | #### bot.creative.flyTo(destination, [cb])
2112 | 
2113 | This function also returns a `Promise`, with `void` as its argument upon completion.
2114 | 
2115 | Calls `startFlying()` and moves at a constant speed through 3d space in a straight line to the destination.
2116 | `destination` is a `Vec3`, and often the `x` and `z` coordinates will end with `.5`.
2117 | This operation will not work if there is an obstacle in the way,
2118 | so it is advised to fly very short distances at a time.
2119 | 
2120 | When the bot arrives at the destination, `cb` is called.
2121 | 
2122 | This method does not attempt any path finding.
2123 | It is expected that a path finding implementation will use this method to move < 2 blocks at a time.
2124 | 
2125 | To resume normal physics, call `stopFlying()`.
2126 | 
2127 | #### bot.creative.startFlying()
2128 | 
2129 | Sets `bot.physics.gravity` to `0`.
2130 | To resume normal physics, call `stopFlying()`.
2131 | 
2132 | This method is useful if you want to hover while digging the ground below you.
2133 | It is not necessary to call this function before calling `flyTo()`.
2134 | 
2135 | Note that while flying, `bot.entity.velocity` will not be accurate.
2136 | 
2137 | #### bot.creative.stopFlying()
2138 | 
2139 | Restores `bot.physics.gravity` to it's original value.
2140 | 


--------------------------------------------------------------------------------
/docs/zh/demos.md:
--------------------------------------------------------------------------------
 1 | ## mineflayer-navigate
 2 | 
 3 | [navigate](https://github.com/andrewrk/mineflayer-navigate/) -  轻松使用A*寻路
 4 | 
 5 | <iframe type="text/html" width="640" height="360" src="http://www.youtube.com/embed/O6lQdmRz8eE" frameborder="0"></iframe>
 6 | 
 7 | ## rbot
 8 | 
 9 | [rom1504/rbot](https://github.com/rom1504/rbot) 基于mineflayer的智能机器人
10 | 
11 | <iframe type="text/html" width="640" height="360" src="http://www.youtube.com/embed/0cQxg9uDnzA" frameborder="0"></iframe>
12 | 
13 | ## chaoscraft
14 | 
15 | [Chaoscraft](https://github.com/schematical/chaoscraft) 基于genetic算法的Minecraft机器人
16 | 
17 | 
18 | <iframe width="640" height="360" src="https://www.youtube.com/embed/videoseries?list=PLLkpLgU9B5xJ7Qy4kOyBJl5J6zsDIMceH" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>


--------------------------------------------------------------------------------
/docs/zh/history.md:
--------------------------------------------------------------------------------
  1 | ## 3.14.0
  2 | 
  3 | * Make prismarine-entity versioned (@u9g)
  4 | * fix(typings): Added OpenContainer (@SaubereSache)
  5 | 
  6 | ## 3.13.1
  7 | 
  8 | * Fix bug with force lastSentPitch in bot.look (@KadaverBrutalo10)
  9 | * Fix typo harming type safety (@Eagle-Anne)
 10 | 
 11 | ## 3.13.0
 12 | 
 13 | * 动态计算记分板显示名称displayName  (@U9G)
 14 | * 修复 SkinsRestorer(@U5B)
 15 | * 修复机器人放置方块时不摆臂 (@IceTank)
 16 | 
 17 | ## 3.12.0
 18 | 
 19 | * Bypass anticheats that detect sensitivity (@mat-1)
 20 | * 修复了一次从tab列表中删除多个玩家的问题 (@mat-1)
 21 | * Added blockAtEntityCursor function (@DatArnoGuy)
 22 | * add option to disable default chat patterns (@U5B)
 23 | * Fixed wrong arm swinging (@IceTank)
 24 | * Add pitch speed to look (@IceTank)
 25 | * 修复控制台垃圾信息 (@IceTank)
 26 | * Update openVillager function to return a promise (@amoraschi)
 27 | * Send arm_animation before use_entity (@aesthetic0001)
 28 | * Add reason for the end of a mineflayer bot (@U5B)
 29 | * added rejection of invalid transaction packets (anticheat fix) (@U5B)
 30 | 
 31 | ## 3.11.2
 32 | * Remove unnecessary and buggy inventory check in place block (@Karang)
 33 | * Make all events allow async cb typings (@u9g)
 34 | 
 35 | ## 3.11.1
 36 | * Get rid of nowaiting (@nickelpro)
 37 | * 更新readme文件 (@inthmafr)
 38 | * 修复打字相关(@link-discord, @IceTank, @u9g)
 39 | 
 40 | ## 3.11.0
 41 | * 优化聊天, 装备和消耗错误 (@u9g)
 42 | * 增加 bot.usingHeldItem (@mat1)
 43 | * 支持 1.17.1 (主要工作是 @nickelpro 和 @u9g 完成的, 还有 @Archengius @extremeheat @imharvol @willocn @rom1504)
 44 | 
 45 | ## 3.10.0
 46 | * 添加中文翻译 (@Nyaasu66)
 47 | * Fix bot.equip failing with off-hand (@IceTank)
 48 | * window.withdraw no longer will drop items if it takes too many items (@Zn10plays)
 49 | * No longer have to await ready for enchanting (@u9g)
 50 | * Remove polling, recursive calling, rechecks for bot.waitForChunksToLoad (@u9g)
 51 | * Add crystal placing example (@u9g)
 52 | * Fixes physicsEnabled check for knockback (@u9g)
 53 | * Default swingArm to left hand (@u9g)
 54 | * Add support for teams (@builder-247)
 55 | * Add missing bot.transfer documentation (@IceTank)
 56 | 
 57 | ## 3.9.0
 58 | * Fix crash on blocks without registered blockId (@Furry)
 59 | * Move when hit by an explsion (@u9g)
 60 | * Add getExplosionDamages() function (@Karang)
 61 | * doc of get explosion (@link-discord)
 62 | 
 63 | ## 3.8.0
 64 | * 改进 index.d.ts (@DrMoraschi)
 65 | * 增加资源包支持 (@kaffinpx)
 66 | * 修复 bot.dig 错误(@MoneyMakingTornado)
 67 | * Added timeout to #consume (@SeanmcCord)
 68 | * 增加资源包示例 (@u9g)
 69 | * 改进工作流程 (@u9g)
 70 | * Linted JS in md files (@u9g)
 71 | * Added bot oxygen Level management (@kaffinpx)
 72 | * Improved links (@satyamedh)
 73 | * Improved links (@AwesomestCode)
 74 | * Improved typing (@u9g)
 75 | * Refactored chat.js (@u9g)
 76 | * Expanded placeBlockWith Options to offhand (@aestetic)
 77 | * Added anvil test (@u9g)
 78 | * Added placeEntity() (@u9g)
 79 | * Improved oxygen typings (@DrMoraschi)
 80 | * Improved socket snippet (@iceTank)
 81 | * Improved placeEntity (@u9g)
 82 | * Renamed bot.quit to end (@u9g)
 83 | * Updated Spanish readme (@DrMoraschi)
 84 | * Added French Translations (@creeper09)
 85 | * Corrected java version in gitpod (@rom)
 86 | * Improved readme lint (@rom)
 87 | * Added container and dropper to allowWindowTypes (@IceTank)
 88 | 
 89 | 
 90 | ## 3.7.0
 91 | * Add bot.removeChatPattern() (@BlueBurgersTDD)
 92 | * Add events to typings (@DrMoraschi)
 93 | * Add TR translation (@KaffinPX)
 94 | * Create plugin example (@Zn10plays)
 95 | * Revise readme (@IceTank)
 96 | * Revise chat_parsing example comments (@U5B)
 97 | * Revise raycast example (@IceTank)
 98 | * allow passing nmpclient as an option in createbot (@u9g)
 99 | * Add bot.awaitMessage() (@u9g)
100 | * Add modular example (@u9g)
101 | * Fix bug with chat patterns (@u9g)
102 | * Fix bug with game event (@u9g)
103 | 
104 | ## 3.6.0
105 | * add bot.addChatPattern() & bot.addChatPatternSet() & deprecate bot.chatAddPattern() (@U9G)
106 | 
107 | ## 3.5.0
108 | * Add common errors to FAQ (@U9G)
109 | * Move mosts of index.js to lib/loader.js (@U9G)
110 | * Improve packet_info handling (@Karang)
111 | * Add getControlState function (@Camezza)
112 | 
113 | ## 3.4.0
114 | * fix once leak in placeBlock (@Karang)
115 | * allow sleeping during rain/thunderstorms (@qrvd)
116 | * Change transaction apology packet to match vanilla client (@FeldrinH)
117 | 
118 | ## 3.3.3
119 | * fix world switch leak
120 | 
121 | ## 3.3.2
122 | * 修复实体名称
123 | 
124 | ## 3.3.1
125 | * 修复停止挖掘 (@Karang)
126 | 
127 | ## 3.3.0
128 | * 修复交易相关 (@validgem)
129 | * 修复附魔相关 (@goncharovchik)
130 | * fix newListener and removeListener stacking on world change (@U5B)
131 | * 增加 'messagestr' 事件(@U9G)
132 | * Add an option forceLook for place block similar to the digging one (@CyberPatrick)
133 | * Can see block add intersect match (@sefirosweb)
134 | * Add ability to use an anvil fully (@U9G)
135 | 
136 | ## 3.2.0
137 | * Fix position in getBlock()
138 | 
139 | ## 3.1.0
140 | * Fix typings of findBlock and findBlocks (@csorfab)
141 | * place block improvements (@Karang)
142 | * add face option to dig (@IceTank)
143 | * trading fixes (@validgem)
144 | * world events exposed by pworld (@u9g)
145 | * fix wait for ticks and expose physicsEnabled (@Karang)
146 | 
147 | ## 3.0.0
148 | * added null or undefined check in inventory (@u9g)
149 | * Removed broken use of "this" in physics.js (@TheDudeFromCI)
150 | * Promisify testCommon (@ArcticZeroo)
151 | * Fixed Bot not skipping end credits (@IceTank)
152 | * BREAKING: Simplify windows API and promisify tests (@Karang) : several methods and events from window API were changed:
153 |   * Removed Chest, EnchantmentTable, Furnace, Dispenser and Villager classes (they all are Windows now)
154 |   * Dispensers are now handled by the same code as other containers, hopper too (they were missing)
155 |   * There is now only 2 events signaling a slot update ("updateSlot" and "updateSlot:slotId" of the Window class) (before there was: "setSlot", "setSlot:windowId", "windowUpdate", "updateSlot", on 3 different eventEmitter (and not all of them were working properly))
156 |   * All windows (present and future) now have a withdraw and deposit function
157 | 
158 | ## 2.41.0
159 | * Fix Time type definition (@hivivo)
160 | * Add face for block in sight result (@Karang)
161 | * Fix skin restorer bug (@TheDudeFromCI)
162 | * Improve enchantment table info (@Karang)
163 | * 支持 1.16.5 (@rom1504)
164 | 
165 | ## 2.40.1
166 | * Fix for not handling negative numbers in time plugin (@Naomi)
167 | * Fix typescript Bot definition (@rom1504)
168 | 
169 | ## 2.40.0
170 | * fix for dig ignore (@TheDudeFromCI)
171 | * better calculation of digging range (@goncharovchik)
172 | * emit death once (@extremeheat)
173 | * add waitForTicks function (@TheDudeFromCI)
174 | * add null check for sign text (@u9g)
175 | 
176 | ## 2.39.2
177 | * explicit node 14 support
178 | 
179 | ## 2.39.1
180 | * add null check in bot.dig (@rom1504)
181 | * Fix deprecation warning for block in sight (@Karang)
182 | 
183 | ## 2.39.0
184 | * Add number support to bot.chat (@BlueBurgersTDD)
185 | * Fixed && Improved blockFind function with useExtraInfo = true (@magicaltoast)
186 | * Added option to allow the bot to keep it's head in place when mining. (@TheDudeFromCI)
187 | 
188 | ## 2.38.0
189 | * Add bot.game.serverBrand property (@Karang)
190 | * set extraInfos to false in blockIsNotEmpty (@mat-1)
191 | * make the ChatMessage.toAnsi:lang argument optional (@Antonio32A)
192 | * Fixed message types (@TheDudeFromCI)
193 | * by default hideErrors is now true (@rom1504)
194 | 
195 | ## 2.37.1
196 | * Optimize lookAt promise behavior (@ph0t0shop)
197 | 
198 | ## 2.37.0
199 | * Promisify villager & Trader (thanks @ph0t0shop)
200 | * protect against action id going over 32767 (@rom1504)
201 | * fix incorrect handling of username definition (@rom1504)
202 | 
203 | ## 2.36.0
204 | * all async method now both return promises and take a callback (thanks @ph0t0shop for this great improvement)
205 | 
206 | ## 2.35.0
207 | * Extra position packet after TP
208 | * Add blockAtCursor
209 | * Deprecate blockInSight
210 | * TS typing fixes
211 | 
212 | ## 2.34.0
213 | * 支持 1.16.4
214 | 
215 | ## 2.33.0
216 | * block_actions fix (thanks @SpikeThatMike)
217 | * typescript fixes (thanks @TheDudeFromCI and @NotSugden)
218 | * add uuid by objectUUID handling (thanks @Rob9315)
219 | * fix bed packet (thanks @imharvol)
220 | * better plugin handling (thanks @TheDudeFromCI)
221 | 
222 | ## 2.32.0
223 | * 支持 1.16.3 (感谢@GroobleDierne 和 @TheDudeFromCI)
224 | * fix bug with entity width (thanks @TheDudeFromCI)
225 | * Add ability to call openChest on shulker boxes (thanks @efunneko)
226 | 
227 | ## 2.31.0
228 | * Fix furnace and add tests (thanks @ImHarvol)
229 | * Add offhand param to d.ts (thanks @TheDudeFromCI)
230 | * Add hasAttackCooldown feature (thanks @TheDudeFromCI)
231 | * Add type validation for bot.chat (thanks @BlueBurgersTDD)
232 | * Add chat position to message event (thanks @larspapen)
233 | 
234 | ## 2.30.0
235 | * Add support for Barrel (#1344) (thanks @ImHarvol)
236 | * Fix attack cooldown bug (thanks @TheDudeFromCI)
237 | * Exposed getDestSlot (thanks @TheDudeFromCI)
238 | * Simplify setCommandBlock arguments (thanks @ImHarvol)
239 | * hide unknown transaction warning if hideErrors option is enabled
240 | 
241 | ## 2.29.1
242 | * fix findblock typescript def (thanks @TheDudeFromCI)
243 | * fix setCommandBlock for recent versions (thanks @ImHarvol)
244 | 
245 | ## 2.29.0
246 | * Add hand parameter to activateItem (thanks @Karang)
247 | * remove _chunkColumn from the api (bot.world should now be used)
248 | * Handle MC|AdvCmd misspelling (thanks @ImHarvol)
249 | 
250 | ## 2.28.1
251 | * 修复 findBlocks (感谢 @Karang)
252 | 
253 | ## 2.28.0
254 | * 增加 nearestEntity function (感谢 @Karang)
255 | 
256 | ## 2.27.0
257 | * add heldItemChanged
258 | 
259 | ## 2.26.0
260 | * use and expose prismarine-world as bot.world
261 | * add itemDrop event (thanks @ImHarvol)
262 | * fix bot.fish callback (thanks @GroobleDierne)
263 | * parse entity metadata for crouching (thanks @IdanHo)
264 | * fix bot.time.day (thanks @Naomi-alt)
265 | * improve find blocks options (thanks @Karang)
266 | 
267 | ## 2.25.0
268 | * emit chestLidMove (thanks @imharvol)
269 | * add options for main hand selection (thanks @Colten-Covington)
270 | * fix respawning columns issues (thanks @Karang)
271 | 
272 | ## 2.24.0
273 | * Fix getBlockAt when outside bounds
274 | * Improve documentation and examples
275 | * Add ability to change the skin parts of a bot (thanks @Naomi-alt)
276 | 
277 | ## 2.23.0
278 | * 1.16 support
279 | * fix noteheard (thanks @Naomi-alt)
280 | 
281 | ## 2.22.1
282 | * better typedef (thanks @Konstantin)
283 | * fix off by 1 error in findBlocks (thanks @Karang)
284 | * physics.js look fix (thanks @thesourceoferror)
285 | * fix chat message bracketing (thanks @Nurutomo)
286 | * use prismarine-physics
287 | 
288 | ## 2.22.0
289 | * Improve digTime computation (thanks @Karang)
290 | * expose blockEntity.raw (thanks @SiebeDW)
291 | * improve typedef for find block options (thanks @TheDudeFromCI)
292 | 
293 | ## 2.21.0
294 | * don't log errors if hideErrors is true
295 | 
296 | ## 2.20.0
297 | * add extra infos option in find block
298 | 
299 | ## 2.19.2
300 | * fix ground up for 1.13->1.15
301 | 
302 | ## 2.19.1
303 | * 修复 find block (感谢 @Karang)
304 | * improve sign parsing (thanks @cookiedragon234)
305 | 
306 | ## 2.19.0
307 | * much faster findBlock (thanks @Karang)
308 | 
309 | ## 2.18.0
310 | * fix bugs in lookAt and setQuickBarSlot
311 | * add auto_totem example (thanks @AlexProgrammerDE)
312 | * improve blockAt speed
313 | 
314 | ## 2.17.0
315 | * physics engine refactor (thanks @Karang)
316 | * mcdata update for better 1.14 and 1.15 support
317 | 
318 | ## 2.16.0
319 | * use protodef compiler (thanks @Karang)
320 | * off-hand support (thanks @Karang)
321 | * fix type definitions (thanks @dada513)
322 | 
323 | ## 2.15.0
324 | * fix transfer bugs (thanks @Karang)
325 | * add typescript definitions (thanks @IdanHo)
326 | 
327 | ## 2.14.1
328 | * fix openVillager
329 | 
330 | ## 2.14.0
331 | * 1.15 support
332 | * russian translation (thanks @shketov)
333 | 
334 | ## 2.13.0
335 | * 1.14 support : more tests, refactored pwindows, feature flags (thanks @Karang)
336 | * Look at the center of the face when placing block
337 | * improve bot.sleep : don't sleep if mob are present (thanks @ImHarvol)
338 | 
339 | ## 2.12.0
340 | * 1.13 support (thanks @Karang, @hornta, @SiebeDW)
341 | * better fishing support (thanks @hutu13879513663)
342 | 
343 | ## 2.11.0
344 | * Expose columns & blockEntities (thanks @SiebeDW)
345 | * Create discord.js (thanks @SiebeDW)
346 | * change amount of slots based on version (thanks @IdanHo)
347 | * Fix 'respawn' event (thanks @ImHarvol)
348 | * Add callback to creative set block (thanks @wvffle)
349 | 
350 | ## 2.10.0
351 | Lot of fixes from @wvffle in this release :
352 | * more checks when digging
353 | * expose a bot.swingArgm() function
354 | * better toString to chat message
355 | * fix handling of empty signs
356 | * correct handling of entity metadata change
357 | And some others :
358 | * new tps plugin by @SiebeDW
359 | * correct handling of chunk unloading by @IdanHo
360 | 
361 | ## 2.9.6
362 | * fix logErrors option
363 | 
364 | ## 2.9.5
365 | * fix logErrors
366 | 
367 | ## 2.9.4
368 | * enable catching and logging of errors by default
369 | 
370 | ## 2.9.3
371 | * fix typo in variable name actionId
372 | 
373 | ## 2.9.2
374 | * improve pushback (thanks @Vap0r1ze)
375 | * more robust handling of tablist (thanks @wvffle)
376 | * ignore (with a warning) transaction without previous click
377 | 
378 | ## 2.9.1
379 | * improve boss bar
380 | * add checks in scoreboard implementation
381 | 
382 | ## 2.9.0
383 | 
384 | * add universal chat patterns to support more chat plugins
385 | 
386 | ## 2.8.1
387 | 
388 | * fix error on scoreboard removal
389 | 
390 | ## 2.8.0
391 | 
392 | lot of new features from @wvffle :
393 | 
394 | * support for block entities
395 | * improved block bars support
396 | * add block in sight
397 | * fix scoreboard support
398 | * add eating support
399 | * add tab complete support
400 | * add fishing support
401 | * better sign text support
402 | * repl example
403 | 
404 | ## 2.7.5
405 | 
406 | * improve basic find block a bit
407 | 
408 | ## 2.7.4
409 | 
410 | * start the bot alive in all cases
411 | * correct run speed and use it to limit the speed properly (thanks @CheezBarger)
412 | * emit error instead of throwing when loading a chunk (thanks @ArcticZeroo)
413 | 
414 | ## 2.7.3
415 | 
416 | * use docsify for docs
417 | 
418 | ## 2.7.2
419 | 
420 | * don't do anything if transaction.action < 0 (fix for some non-vanilla plugins)
421 | 
422 | ## 2.7.1
423 | 
424 | * include fixes from pchunk, protodef and mcdata
425 | 
426 | ## 2.7.0
427 | 
428 | * fix cannot jump repeatedly
429 | * fix spaces in chatmessage (thanks @Gjum)
430 | * add bot.getControlStates (thanks @ArcticZeroo)
431 | * Support end dimension (thanks @iRath96)
432 | * Added sneaking option to controll states (thanks @Meldiron)
433 | * add title event (thanks @yario-o)
434 | * Update sound.js to include hardcoded sound effects (thanks @jeresuikkila)
435 | * Support for the new launcher_profiles.json format  (thanks @Amezylst)
436 | * update api about checkTimeoutInterval
437 | 
438 | ## 2.6.1
439 | 
440 | * fix chatmessage
441 | * add plugins to bot options to be able to disable an internal plugin
442 | 
443 | ## 2.6.0
444 | 
445 | * improve ChatMessage translation functionality (thanks @plexigras)
446 | * added eslint
447 | * es6
448 | * fix autoversion in online mode
449 | 
450 | ## 2.5.0
451 | 
452 | * don't swing arm when activating an entity
453 | * new plugin loading api
454 | 
455 | ## 2.4.1
456 | 
457 | * better 1.12 support
458 | 
459 | ## 2.4.0
460 | 
461 | * auto version detection (thanks @plexigras)
462 | 
463 | ## 2.3.0
464 | 
465 | * support version 1.12 (thanks @jonathanperret)
466 | * add example to use minecraft session file for auth (thanks @plexigras)
467 | 
468 | ## 2.2.0
469 | 
470 | * added book writing plugin (thanks @plexigras)
471 | * Make sure bot.time.day is between 0 and 24000 (thanks @roblabla)
472 | * Pass skyLightSent to Chunk.load (thanks @iRath96)
473 | 
474 | ## 2.1.1
475 | 
476 | * use protodef aliases to properly define channels
477 | 
478 | ## 2.1.0
479 | 
480 | * add bot.canSeeBlock (thanks @Nixes)
481 | * handle unknown entities and entities sent with their internal id
482 | * add bloodhound to plugin list
483 | * fix chat hoverEvent for 1.9
484 | 
485 | ## 2.0.0
486 | 
487 | * added support for minecraft chests (thanks @plexigras)
488 | * cross version support : 1.8, 1.9, 1.10 and 1.11 now supported
489 | * [BREAKING] prismarine classes (Block, Entity, Recipe, ...) are now available only by requiring them, not in mineflayer.X. It was required to make cross version possible. minecraft-data is also to be required directly and not available as mineflayer.blocks. The code depending on this should be updated, hence the major version.
490 | 
491 | ## 1.8.0
492 | 
493 | * add actionBar event (thanks @ArcticZeroo)
494 | * added support for villager trading (thanks @plexigras)
495 | 
496 | ## 1.7.5
497 | 
498 | * bump dependencies
499 | 
500 | ## 1.7.4
501 | 
502 | * update minecraft-data
503 | 
504 | ## 1.7.3
505 | 
506 | * add callback to activateBlock
507 | 
508 | ## 1.7.2
509 | 
510 | * update dependencies
511 | 
512 | ## 1.7.1
513 | 
514 |  * update minecraft-protocol, minecraft-data and protodef
515 | 
516 | ## 1.7.0
517 | 
518 |  * listen for disconnect in login phase (thanks @deathcap)
519 |  * fix multi_block_change (thanks @Corgano)
520 |  * remove chat filter : fix utf8 in chat
521 |  * add extra tolerance for malformed sign packets (thanks @G07cha)
522 |  * adapt to new minecraft data entities format
523 |  * update minecraft-protocol to 0.17.2
524 | 
525 | 
526 | ## 1.6.0
527 | 
528 |  * add functionalities to use scoreboard (thanks @jakibaki)
529 |  * update to minecraft-data 0.16.3
530 |  * 50 -> 20 tps for physics
531 |  * Remove requireindex, for browserify support
532 |  * add bot.setCommandBlock
533 | 
534 | ## 1.5.3
535 | 
536 |  * fix entity_status
537 | 
538 | ## 1.5.2
539 | 
540 |  * use prismarine-recipe and prismarine-windows
541 |  * use require-self to be able to do require('mineflayer') in the examples
542 |  * fix viewDistance sending
543 | 
544 | ## 1.5.1
545 | 
546 |  * add checkTimeoutInterval to createBot
547 | 
548 | ## 1.5.0
549 | 
550 |  * fix achievements parsing in toString()
551 |  * update to nmp 0.16
552 |  * use prismarine-item
553 |  * add example to run multiple bots
554 |  * uuid is now a dashed string
555 |  * remove digging interruption : this doesn't happen in 1.8 servers (and caused problem in some spigot servers)
556 | 
557 | ## 1.4.0
558 | 
559 |  * improve placeBlock : now use lookAt before placing and has a callback
560 |  * fix soulsand speed
561 |  * use new multi-version version of (node-)minecraft-data
562 | 
563 | ## 1.3.0
564 | 
565 |  * swing arm on placing a block, look at center of block when activating a block (thanks gipsy-king)
566 |  * refactor examples (thanks Pietro210)
567 |  * add clickWindow support to ContainerWindow (thanks Gnomesley)
568 |  * fix skylight in the nether
569 |  * update node-mojangson to display unparsed text in case of error
570 | 
571 | ## 1.2.1
572 | 
573 |  * Prevent crash when an unknown entity is spawned
574 |  * add createBot to api.md
575 | 
576 | ## 1.2.0
577 | 
578 |  * update minecraft-protocol to 0.14.0 : several fixes (error are now catchable, packets are in-order, packets fixes, etc.)
579 |  * add ContainerWindow to support non-Vanilla plugins and add /invsee example (thanks Pietro210)
580 |  * add a callback to bot.look and bot.lookAt
581 |  * when receiving a remove effect packet : if the corresponding effect doesn't exist yet, emit an event with just the id of the effect (thanks Pietro210)
582 |  * swing arm immediately when digging (thanks gipsy-king)
583 |  * now updates bot.entity.heldItem when bot.heldItem is updated
584 |  * fix cli args in examples
585 |  * add forcedMove event
586 |  * fix equipment api
587 |  * new minecraft data version : better metadata handling
588 | 
589 | ## 1.1.2
590 | 
591 |  * a small fix in chat.js
592 |  * add a licence file
593 | 
594 | ## 1.1.1
595 | 
596 |  * bot.transfer is faster
597 |  * fix arm_animation
598 |  * using mojangson parser for chat hoverevent
599 |  * add chat patterns for unidentified chat messages
600 |  * fix player leaving
601 | 
602 | ## 1.1.0
603 | 
604 | Lot of fixes and improvements in this version in order to support mineflayer 1.8.3, including :
605 | 
606 |  * minecraft 1.8.3 support
607 |  * update minecraft protocol to 0.13.4
608 |  * move enums data to minecraft-data
609 |  * add automatic testing with a vanilla minecraft server on circle ci
610 |  * add argv arguments to examples
611 |  * refactor inventory.js
612 |  * use new recipe format handling metadata better
613 |  * fix lot of things to support 1.8.3 including :
614 |   * block format change
615 |   * position change : y is now always at the feet of the bot
616 | 
617 | ## 1.0.0
618 | 
619 |  * updated minecraft protocol to 0.11 (Minecraft 1.6.2 support).
620 |  * small changes in the arguments of some events: `chat`, `whisper` and `message`. See [doc/api.md](https://github.com/andrewrk/mineflayer/blob/master/doc/api.md).
621 | 
622 | ## 0.1.1
623 | 
624 |  * updated minecraft protocol to 0.10 (Minecraft 1.5.2 support).
625 | 
626 | ## 0.1.0
627 | 
628 | Huge thanks to [zuazo](https://github.com/zuazo) for debugging and
629 | eliminating the problems with 1.5.1 protocol update and node 0.10 update!
630 | 
631 |  * update minecraft-protocol to 0.9.0 - includes many fixes
632 |  * blocks: fix buffer length assertion error (thanks zuazo)
633 |  * physics: fix assertion error (thanks zuazo)
634 | 
635 | ## 0.0.35
636 | 
637 |  * inventory: window clicking waits a bit if you have just dug
638 |    fixes a rejected transaction race condition.
639 | 
640 | ## 0.0.34
641 | 
642 |  * inventory: equipping makes the quick bar a basic LRU cache.
643 |    This can alleviate some race conditions when trying to equip a
644 |    different tool immediately after digging.
645 | 
646 | ## 0.0.33
647 | 
648 |  * crafting: fix shapeless recipe support
649 |  * inventory: fix several instances which could cause transaction rejected
650 |  * add missing recipes (thanks rom1504)
651 |  * `recipe.delta` data structure changed.
652 | 
653 | ## 0.0.32
654 | 
655 |  * digging: fix crash when not holding a tool
656 | 
657 | ## 0.0.31
658 | 
659 |  * only stationary water has a negative effect on digging
660 |  * digging: if you dig while already digging, instead of crashing,
661 |    mineflayer will cancel the in progress dig and start the new one.
662 |  * digging: in creative mode dig time is 0
663 |  * digging interruption error has a code so you can check for it
664 | 
665 | ## 0.0.30
666 | 
667 |  * expose the materials enum as `mineflayer.materials`
668 | 
669 | ## 0.0.29
670 | 
671 |  * digging is faster and has less bugs
672 |  * you can stop digging with `bot.stopDigging()`.
673 |  * `bot.dig(block, [timeout], [callback])` changed to `bot.dig(block, [callback])`.
674 |  * add `bot.digTime(block)`
675 |  * add `block.material`
676 |  * add `block.harvestTools`
677 |  * add `window.emptySlotCount()`
678 |  * block and item enums are cleaned up. Every block and item has an
679 |    unambiguous `name` and `displayName`.
680 | 
681 | ## 0.0.28
682 | 
683 |  * add missing recipe for wooden planks
684 |  * fix various crafting and inventory bugs
685 |  * unequip works with hand as a destination
686 | 
687 | ## 0.0.27
688 | 
689 |  * add `mineflayer.Location` which can help you locate chunk boundaries
690 |  * `entity.metadata` is formatted as an object instead of an array for
691 |    easier access
692 |  * `canDigBlock` returns `false` if `block` is `null` instead of crashing.
693 | 
694 | ## 0.0.26
695 | 
696 |  * fix `bot.heldItem` being wrong sometimes
697 |  * water and lava are not solid
698 | 
699 | ## 0.0.25
700 | 
701 |  * `bot.equip` - wait at least a tick before calling callback
702 | 
703 | ## 0.0.24
704 | 
705 |  * fix digging leaves not calling callback.
706 | 
707 | ## 0.0.23
708 | 
709 |  * add enchantment table support. See `examples/chest.js` for an example.
710 |  * rename `bot.tell` to `bot.whisper` to be consistent with 'whisper' event.
711 |    (thanks Darthfett)
712 | 
713 | ## 0.0.22
714 | 
715 |  * update vec3 to 0.1.3
716 |  * add "whisper" chat event
717 | 
718 | ## 0.0.21
719 | 
720 | This release is feature-complete with the old
721 | [C++/Qt based version of mineflayer](https://github.com/andrewrk/mineflayer/blob/cpp-qt-end).
722 | 
723 |  * add `bot.activateItem()`
724 |  * add `bot.deactivateItem()`
725 |  * add `bot.useOn(targetEntity)`
726 | 
727 | ## 0.0.20
728 | 
729 |  * add dispenser support
730 |    - add `mineflayer.Dispenser`
731 |    - add `bot.openDispenser(dispenserBlock)`
732 | 
733 | ## 0.0.19
734 | 
735 |  * add furnace support
736 |    - add `mineflayer.Furnace`
737 |    - add `bot.openFurnace(furnaceBlock)`
738 |  * `mineflayer.Chest`: "update" event renamed to "updateSlot"
739 |  * `bot.equip(itemType, destination, [callback])` changed to
740 |    `bot.equip(item, destination, [callback])`. Use `bot.inventory.items()`
741 |    to get a list of what items you can choose from to equip.
742 |  * fix `bot.openChest` not working for ender chests
743 |  * fix incorrectly scaled fuel percentage
744 |  * upgrade to minecraft-protocol 0.7.0
745 |    - `mineflayer.createBot` no longer takes a `email` argument.
746 |    - The `username` and `password` arguments are used to authenticate with the
747 |      official minecraft servers and determine the case-correct username. If
748 |      you have migrated your user account to a mojang login, `username` looks
749 |      like an email address.
750 |    - If you leave out the `password` argument, `username` is used to connect
751 |      directly to the server. In this case you will get kicked if the server is
752 |      in online mode.
753 | 
754 | ## 0.0.18
755 | 
756 |  * fix crash for some block updates
757 | 
758 | ## 0.0.17
759 | 
760 | recalled
761 | 
762 | ## 0.0.16
763 | 
764 |  * add chest support
765 |    - add `mineflayer.Chest`
766 |    - add `bot.openChest(chestBlock)`
767 |  * `block.meta` renamed to `block.metadata`
768 |  * `item.meta` renamed to `item.metadata`
769 |  * fix crash when player causes entityGone message
770 |  * update to minecraft-protocol 0.6.6
771 | 
772 | ## 0.0.15
773 | 
774 |  * fix `bot.sleep` not working at all
775 |  * add `bot.isSleeping`
776 |  * add "sleep" event
777 |  * add "wake" event
778 |  * `bot.sleep(bedPoint)` changed to `bot.sleep(bedBlock)`
779 |  * fix `mineflayer.Recipe` not exposed
780 | 
781 | ## 0.0.14
782 | 
783 |  * add crafting support
784 |    - add `mineflayer.windows`
785 |    - add `mineflayer.Recipe`
786 |    - `bot.inventory` is now an instance of `InventoryWindow`
787 |    - `bot.inventory.count` is no longer a map of id to count.
788 |      `Window` instances have a `count(itemType, [metadata])` method.
789 |    - `bot.inventory.quickBarSlot` moved to `bot.quickBarSlot`.
790 |    - add `'windowOpen' (window)` event
791 |    - add `'windowClose' (window)` event
792 |    - add `bot.craft(recipe, count, craftingTable, [callback])`
793 |    - add `bot.recipesFor(itemType, metadata, minResultCount, craftingTable)`
794 |  * `block.pos` renamed to `block.position`.
795 |  * `'blockUpdate' (point)` event signature changed to
796 |    `'blockUpdate' (oldBlock, newBlock)`
797 |  * `'blockUpdate:(x, y, z)'` event signature changed to
798 |    `'blockUpdate:(x, y, z)' (oldBlock, newBlock)`
799 |  * add `'diggingAborted' (block)` event
800 |  * add `bot.unequip(destination, [callback])`
801 |  * add `bot.toss(itemType, metadata, count, [callback])`
802 |  * `bot.startDigging(block)` changed to `bot.dig(block, [timeout], [callback])`.
803 |  * add `bot.activateBlock(block)`
804 | 
805 | ## 0.0.13
806 | 
807 |  * fix `bot.equip` when already equipping the item
808 |  * fix some incorrect block physics
809 |  * add `mineflayer.recipes` enum
810 |  * fix crash when digging at a high elevation
811 | 
812 | ## 0.0.12
813 | 
814 |  * add inventory support
815 |    - add `Item` class which is exposed on `mineflayer`
816 |    - add `bot.inventory` (see docs for more details)
817 |    - add `bot.equip(itemType, destination, [callback])`
818 |    - add `bot.tossStack(item, [callback])`
819 |  * add digging support
820 |    - add `bot.startDigging(block)`
821 |    - add `bot.canDigBlock(block)`
822 |  * blocks: add `blockUpdate:(x, y, z)` event.
823 |  * add building support
824 |    - add `bot.placeBlock(referenceBlock, faceVector)`
825 |  * add `block.painting`
826 |  * add `Painting` class which is exposed on `mineflayer`
827 |  * add experience orb support
828 |    - `entity.type` can be `orb` now
829 |    - `entity.count` is how much experience you get for collecting it
830 | 
831 | ## 0.0.11
832 | 
833 |  * physics: skip frames instead of glitching out
834 |  * default bot name to Player - `createBot` can take no arguments now.
835 | 
836 | ## 0.0.10
837 | 
838 |  * physics: fix bug: walking too slowly on Z axis
839 | 
840 | ## 0.0.9
841 | 
842 |  * ability to sprint (thanks ruan942)
843 |  * fix color code stripping (thanks rom1504)
844 |  * event "onNonSpokenChat" deleted
845 |  * new event "message" which fires for all messages
846 |  * `bot.chat` no longer checks for "/tell" at the beginning
847 |  * add `bot.tell(username, message)` method
848 |  * fix crash when an entity effect occurs
849 | 
850 | ## 0.0.8
851 | 
852 |  * chat: no longer suppress "chat" events for your own chat (thanks Darthfett).
853 |  * ability to mount / dismount vehicles and attack
854 |  * physics: fix tall grass and dead bushes treated as solid
855 |  * fix "respawn" event firing twice sometimes
856 |  * remove `bot.spawn()` and `autoSpawn` option. auto spawn is now mandatory.
857 |  * fix sending spawn packet twice on init
858 |  * fix bots spawning with their heads on backwards
859 |  * fix bots jumping when they get hit
860 |  * update player heights when they crouch
861 |  * add support for signs: `block.signText` and `bot.updateSign(block, text)`
862 | 
863 | ## 0.0.7
864 | 
865 |  * add `bot.time.day` and `bot.time.age` and "time" event
866 |  * add `bot.entities` which is a map of the entities around you
867 |  * add `bot.look(yaw, pitch, force)` and `bot.lookAt(point, force)`
868 | 
869 | ## 0.0.6
870 | 
871 |  * add a physics engine which understands gravity
872 |  * add jumper example, jumps whenever you chat
873 |  * add `respawn` event which fires when you die or change dimensions
874 |  * Block instances have a `boundingBox` property, which is currently either
875 |    `solid` or `empty`.
876 |  * fix `game` event to fire correctly
877 |  * `bot.game.spawnPoint` moved to `bot.spawnPoint`.
878 |  * `bot.game.players` moved to `bot.players`.
879 |  * `bot.quit` has a default reason of "disconnect.quitting" (thanks Darthfett)
880 | 
881 | ## 0.0.5
882 | 
883 |  * unload chunks when changing dimensions
884 |  * blocks: handle all forms of block changing so that `blockAt` is always
885 |    accurate.
886 | 
887 | ## 0.0.4
888 | 
889 |  * expose Block, Biome, and Entity
890 | 
891 | ## 0.0.3
892 | 
893 |  * add `bot.blockAt(point)` which returns a `Block`
894 |  * add `mineflayer.blocks`, `mineflayer.biomes`, and `mineflayer.items`
895 |  * 添加机器人 `chunk` 事件
896 |  * 修复`spawn` 事件和 `settings.showCape`
897 |  * added chatterbox example
898 |  * changed `entityDetach` event to have a vehicle argument
899 |  * changed `entityEffectEnd` event to have an effect argument
900 |    instead of `effectId`
901 |  * fix prefixes in pseudos in chat. (thanks rom1504)
902 |  * update vec3 to 0.1.0 which uses euclidean modulus
903 | 
904 | ## 0.0.2
905 | 
906 |  * 增加 bot.game.spawnPoint
907 |  * 增加 spawn 支持
908 |  * 增加 rain 支持
909 |  * 增加 support for getting kicked
910 |  * 增加 settings 支持
911 |  * 增加experience support
912 |  * 增加 bed 支持
913 |  * health status knowledge
914 |  * 增加实体跟踪API
915 | 


--------------------------------------------------------------------------------
/docs/zh/index.html:
--------------------------------------------------------------------------------
 1 | <!DOCTYPE html>
 2 | <html lang="zh-cmn-Hans">
 3 | <head>
 4 |   <meta charset="UTF-8">
 5 |   <title>Mineflayer - 使用稳定的高级API创建Minecraft机器人</title>
 6 |   <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
 7 |   <meta name="description" content="使用稳定的高级API创建Minecraft机器人">
 8 |   <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
 9 |   <link rel="stylesheet" href="//unpkg.com/docsify/lib/themes/vue.css">
10 |     <style>
11 |         .markdown-section {
12 |             max-width:1400px;
13 |         }
14 |     </style>
15 |     <!-- Global site tag (gtag.js) - Google Analytics -->
16 |     <script async src="https://www.googletagmanager.com/gtag/js?id=UA-128628977-3"></script>
17 |     <script>
18 |       window.dataLayer = window.dataLayer || [];
19 |       function gtag(){dataLayer.push(arguments);}
20 |       gtag('js', new Date());
21 | 
22 |       gtag('config', 'UA-128628977-3');
23 |     </script>
24 | </head>
25 | <body>
26 |   <div id="app"></div>
27 |   <script>
28 |     window.$docsify = {
29 |       name: 'mineflayer',
30 |       repo: 'https://github.com/PrismarineJS/mineflayer',
31 |       loadSidebar: true,
32 |       subMaxLevel: 2,
33 |       auto2top: true
34 |     }
35 |   </script>
36 |   <script src="//unpkg.com/docsify/lib/docsify.min.js"></script>
37 | </body>
38 | </html>
39 | 


--------------------------------------------------------------------------------
/docs/zh/tutorial.md:
--------------------------------------------------------------------------------
  1 | # 使用教程
  2 | 
  3 | **目录**
  4 | 
  5 | - [基础](#基础)
  6 |   - [Javascript 基础](#Javascript 基础知识)
  7 |     - [Installing Node](#installing-node)
  8 |     - [Javascript variables](#javascript-variables)
  9 |     - [Show output](#show-output)
 10 |     - [Javascript functions](#javascript-functions)
 11 |     - [Javascript 数据类型](#Javascript 数据类型)
 12 |     - [If-statements](#if-statements)
 13 |     - [Loops](#loops)
 14 |     - [Node 包管理器](#Node 包管理器)
 15 |   - [Creating a bot](#creating-a-bot)
 16 |     - [Javascript objects](#javascript-objects)
 17 |     - [Logging in](#logging-in)
 18 |   - [Passing along functions](#passing-along-functions)
 19 |   - [Listening for an event](#listening-for-an-event)
 20 |   - [Callbacks](#callbacks)
 21 |     - [Correct and incorrect approach](#correct-and-incorrect-approach)
 22 | - [高级](#高级)
 23 |   - [Asynchronousy](#asynchronousy)
 24 |   - [Loop over an object](#loop-over-an-object)
 25 |   - [Creating an event from chat](#creating-an-event-from-chat)
 26 |     - [Answer Hello Bot](#answer-hello-bot)
 27 |     - [Custom Chat](#custom-chat)
 28 | - [FAQ](#faq)
 29 |   - [How to run a bot on android](#how-to-run-a-bot-on-android)
 30 |     - [Install Termux](#install-termux)
 31 |     - [Setup](#setup)
 32 |     - [Start your bot](#start-your-bot)
 33 | 
 34 | ## 介绍
 35 | 
 36 | This tutorial will help you get started with Mineflayer, even if you know nothing about coding.  
 37 | If you already know some things about Node and NPM, you can go to the [Create a bot](#creating-a-bot) section, otherwise start here.
 38 | 
 39 | ## 基础
 40 | 
 41 | 以下几节是关于开始使用Mineflayer需要知道的基本概念。
 42 | 
 43 | ### Javascript 基础知识
 44 | 
 45 | #### Installing Node
 46 | 
 47 | In this section you will learn the basics about Javascript, Node and NPM.
 48 | 
 49 | Javascript, often abbreviated to JS, is a programming language designed for the web. It is what makes most interactivity on the web possible.  
 50 | Node.js, often just Node, makes it possible to use Javascript outside of web browsers.
 51 | 
 52 | So the first thing you have to do to get started is to install Node. You can get it [here](https://nodejs.org/en/download/).  
 53 | After it is installed, open a command prompt (also known as a terminal) and then type `node -v`  
 54 | If you have installed Node correctly, it should return a version number. If it says it can't find the command, try installing it again.
 55 | 
 56 | Now you have Node, you could start writing code, but we need to do 1 more thing.  
 57 | Javascript can be written in any basic text editor, but it is much easier if you use what is called an [Integrated development environment](https://en.wikipedia.org/wiki/Integrated_development_environment)(IDE)  
 58 | An IDE will help you write code because it can give you suggestions, or tell you if your code has potential problems. A good IDE to start with is [Visual Studio Code](https://code.visualstudio.com/)(VSCode)  
 59 | Once you have installed and set-up VSCode, create a new file and then save it somewhere with a name ending with `.js`, e.g. `bot.js`  
 60 | This will let VSCode know we are working with Javascript, and give you the correct suggestions.
 61 | 
 62 | #### Javascript variables
 63 | 
 64 | 首先输入以下内容：
 65 | 
 66 | ```js
 67 | const test = 5
 68 | ```
 69 | 
 70 | This will create a new variable named `test` and assign it the value `5`  
 71 | Variable are used to save data and use it later in the code.
 72 | 
 73 | Now save the file so we can run the code. Open a terminal again (or a new terminal in VSCode) and navigate to the same folder the file is saved in. This can be done using the `cd` command, for example: `cd Documents\javascript`  
 74 | Once your terminal is in the same folder as your Javascript file, you can run `node filename.js`  
 75 | If you have done everything correctly, you should see nothing.  
 76 | In the next chapter we will show you how you can 'print' things to the terminal.
 77 | 
 78 | In general, it is good practice to use the `const` keyword instead of the `let` keyword when defining a variable. A variable defined with `const` can't be modified later and thus is a constant.  
 79 | Javascript is then able to make your code run more efficiently because it knows it doesn't have to account for value changes for that variable.  
 80 | If you want a modifiable variable, you will still have to use `let` of course.
 81 | 
 82 | ```js
 83 | const test = 5
 84 | // eslint-disable-next-line
 85 | test = 10 // This line is invalid.
 86 | ```
 87 | 
 88 | The second line is invallid because you can't reassign the `test` variable.
 89 | 
 90 | If you want to help yourself and other people understand your code better, you can use comments.  
 91 | Comments can be created using `//` and everything after that is completely ignored by Javascript.
 92 | 
 93 | #### 显示输出
 94 | 
 95 | A lot of times you want to see the current value of a variable, to make sure your program is running correctly.  
 96 | 您可以通过将变量打印到终端来实现这一点.  
 97 | 在Javascript中，我们可以使用 `console.log()` 函数  
 98 | 
 99 | ```js
100 | const test = 5
101 | 
102 | console.log(test)
103 | ```
104 | 
105 | 现在，当您保存并运行此代码时，您最终应该会看到：
106 | 
107 | ```txt
108 | 5
109 | ```
110 | 
111 | #### Javascript functions
112 | 
113 | Next you will learn about functions. Functions are a piece of code that can be used multiple times throughout your code.  
114 | These can be useful because you don't have to type something multiple times.
115 | 
116 | ```js
117 | const addition = (a, b) => {
118 |   return a + b
119 | }
120 | 
121 | const test1 = addition(5, 10)
122 | const test2 = addition(1, 0)
123 | 
124 | console.log(test1)
125 | console.log(test2)
126 | ```
127 | 
128 | The `=>` is used to define a function, called the arrow operator.  
129 | Before the arrow operator is the parameter list, everything between the round brackets `()` are parameters, separated by a comma.  
130 | Parameters are variables you can give to your function so that your function can work with them.  
131 | Then after the arrow operator comes the function body, this is everything between the curly brackets `{}`  
132 | This is where you put the code of the function.  
133 | Now that the function is complete, we assign it to a variable to give it a name, in this case `addition`  
134 | 
135 | As you can see, this code takes the parameters `a` and `b` and adds them together.  
136 | Then the function will return the result.  
137 | When a function is defined, the code in the function body is not yet executed. To run a function you have to call it.  
138 | You can call a function by using the name of a function followed by round brackets. In this case `addition()`  
139 | However, the `addition` function requires 2 parameters. These can be passed along by putting them inside the round brackets, comma separated: `addition(1, 2)`  
140 | When the function is done, you can imagine that the function call is replaced by whatever the function has returned. So in this case `let test1 = addition(5, 10)` will become `let test1 = result` (You will not actually see this, but this can help you understand the concept)
141 | 
142 | Sometimes you will come across the following: `function addition() {}` This means the same thing, although `() => {}` is preferred. (If you really want to know why, look up 'javascript function vs arrow function')
143 | 
144 | The above should output the following:
145 | 
146 | ```txt
147 | 15
148 | 1
149 | ```
150 | 
151 | #### Javascript 数据类型
152 | 
153 | So far we have only worked with numbers, but Javascript can work with more variable types:
154 | 
155 | - A string is a piece of text that can contain multiple characters. Strings are defined by using the quotes `''`
156 | 
157 | ```js
158 | const string = 'This is a string' // string type
159 | ```
160 | 
161 | - An array is a type that can hold multiple variables inside itself. Arrays are defined by using the square brackets `[]`
162 | 
163 | ```js
164 | const array = [1, 2, 3] // array type
165 | ```
166 | - Object are basically advanced arrays, you will learn more about it later in this tutorial. Their defined by curly brackets `{}`
167 | 
168 | ```js
169 | const object = {} // object type
170 | ```
171 | 
172 | - Functions are also their own type.
173 | 
174 | ```js
175 | const adder = (a, b) => { return a + b } // function type
176 | ```
177 | 
178 | - A boolean is a type that can only be `true` or `false`
179 | 
180 | ```js
181 | const boolean = true // boolean type
182 | ```
183 | 
184 | - When something is not (yet) defined, its type is `undefined`
185 | 
186 | ```js
187 | let nothing // undefined type
188 | const notDefined = undefined // undefined type
189 | ```
190 | 
191 | #### If-statements
192 | 
193 | Sometimes you want to do different things based on a certain condition.  
194 | This can be achieved using if-statements.
195 | 
196 | ```js
197 | const name = 'Bob'
198 | 
199 | if (name === 'Bob') {
200 |   console.log('你的名字是 Bob')
201 | } else if (name === 'Alice') {
202 |   console.log('你的名字是 Alice')
203 | } else {
204 |   console.log('你的名字不是Bob或Alice')
205 | }
206 | ```
207 | 
208 | An if-statement is created using the `if` keyword. After that you have a condition between the round brackets `()` followed by the body between the curly brackets `{}`
209 | A condition has to be something that computes to a boolean.  
210 | In this case it uses an equal operator `===` which will be `true` if the value in front is the same as the value after. Otherwise it will be `false`
211 | If the condition is `true` the code in the body will be executed.  
212 | You can chain an if-statement with an else-if-statement or an else-statement.  
213 | You can have as many else-if-statements as you want, but only 1 if and else statement.  
214 | If you have an else-statement, it will be called only if all the chained statements before it are `false`
215 | 
216 | #### Loops
217 | 
218 | Loops are used to repeat certain code until a certain conditional is met.
219 | 
220 | ```js
221 | let countDown = 5
222 | 
223 | while (countDown > 0) {
224 |   console.log(countDown)
225 |   countDown = countDown - 1 // 从1递减
226 | }
227 | 
228 | console.log('已完成!')
229 | ```
230 | 
231 | 上述代码将打印以下内容
232 | 
233 | ```txt
234 | 5
235 | 4
236 | 3
237 | 2
238 | 1
239 | 已完成!
240 | ```
241 | 
242 | The `while` loop has a condition `()` and a body `{}`  
243 | When the code reaches the loop, it will check the condition. If the condition is `true`, the code in the body will be executed.  
244 | After the end of the body is reached, the condition is checked again, and if `true`, the body executed again.  
245 | This will happen for as long as the condition check is still `true`  
246 | Each loop, this code prints the current `countDown` number, and then decrements it by 1.  
247 | After the 5th loop, the condition `0 > 0` will be `false`, and thus the code will move on.
248 | 
249 | A `for` loop is also often used, and differs slightly from a `while` loop.  
250 | 
251 | ```js
252 | for (let countDown = 5; countDown > 0; countDown = countDown - 1) {
253 |   console.log(countDown)
254 | }
255 | ```
256 | 
257 | Instead of only a condition, the for loops has 3 different parts  
258 | These parts are separated by a semi-column.  
259 | The first parts `let countDown = 5` is only executed once, at the start of the loop.  
260 | The second part `countDown > 0` is the condition, this is the same as the while loop.  
261 | The third part `countDown = countDown - 1` is executed after each loop.:
262 | 
263 | If you want to do something for every item in an array, a `for of` loop can be useful.  
264 | 
265 | ```js
266 | const array = [1, 2, 3]
267 | 
268 | for (const item of array) {
269 |   console.log(item)
270 | }
271 | ```
272 | 
273 | A `for of` loop needs to have a variable before the `of`, this is the variable that can be used to access the current item.  
274 | The variable after the `of` needs to be something that contains other variable. These are mostly arrays, but also some objects.  
275 | The loop will execute the body for each item in the `array` and each loop the `item` variable will be the current item of the `array`
276 | 
277 | #### Node 包管理器
278 | 
279 | The last thing you need to know is how to use the [Node Package Manager](https://www.npmjs.com/).  
280 | NPM is automatically installed when you install Node.  
281 | NPM is used to get useful packages that other people created that can do useful things for you.  
282 | You can search for packages on [their website](https://www.npmjs.com/), and then install them using the `npm install` command in your terminal.  
283 | To install Mineflayer for example, run `npm install mineflayer`  
284 | 
285 | Then, Node can access installed modules by using the `require()` function.
286 | 
287 | ```js
288 | const mineflayer = require('mineflayer')
289 | ```
290 | 
291 | After this, the `mineflayer` variable can be used to access all the features of Mineflayer.
292 | 
293 | ### 创建机器人
294 | 
295 | Now that you know the basics of Javascript, Node and NPM, you're ready to start creating your first bot!  
296 | If you don't know any of the terms above, you should go back to the [previous section](#javascript-basics)
297 | 
298 | 下面是创建Mineflayer机器人所需的绝对最少代码
299 | 
300 | ```js
301 | const mineflayer = require('mineflayer')
302 | 
303 | const bot = mineflayer.createBot()
304 | ```
305 | 
306 | If you run this example, you'll notice that your program will not stop. If you want to stop your currently running program, press `Ctrl` + `c`  
307 | However, this bot isn't quite useful, as by default this will connect to a Minecraft server running on your machine with the port 25565.  
308 | If you want to choose which server you want your bot to connect to, you have to pass along a few options.
309 | 
310 | 
311 | ```js
312 | const mineflayer = require('mineflayer')
313 | 
314 | const options = {
315 |   host: 'localhost', // 将此项更改为所需的ip
316 |   port: 25565 // 将此项更改为所需的端口
317 | }
318 | 
319 | const bot = mineflayer.createBot(options)
320 | ```
321 | 
322 | #### Javascript objects
323 | 
324 | The curly brackets `{}` are used to create an object.  
325 | Objects contain what is called a key-value pair.  
326 | A key-value pair consist of a colon `:` and a key before the colon, and the value of that key after the colon.  
327 | The keys can then be used to retrieve their value.  
328 | You can have multiple key-value pairs by separating them by commas.
329 | 
330 | ```js
331 | const object = {
332 |   number: 10,
333 |   another: 5
334 | }
335 | 
336 | console.log(object.number) // 这将打印值10
337 | ```
338 | 
339 | This concept is often used to create what is named 'named parameters'  
340 | The advantage of this is that you don't have to use all the options available, and their position does not matter.  
341 | The value can be anything, even other object. If the value is a function, that function is often called a method for that object.  
342 | You can also create the object in-line.
343 | 
344 | ```js
345 | const bot = mineflayer.createBot({ host: 'localhost', port: 25565 })
346 | ```
347 | 
348 | #### 登录
349 | 
350 | Without any parameters, the bot will have the name `Player` and can only log into offline servers. (Cracked & open-to-lan)  
351 | If you supply the `createBot` with an `username` option, it will log in with that username. (Still only in offline server)  
352 | To log into a specific account, you have to supply both the `username` and the `password`
353 | 
354 | ```js
355 | const bot = mineflayer.createBot({
356 |   host: 'localhost',
357 |   port: 25565,
358 |   username: 'Player',
359 |   password: 'password'
360 | })
361 | ```
362 | 
363 | #### Command line arguments
364 | 
365 | What if somebody else likes your bot and wants to use it, but uses it on a different server and with a different account?  
366 | This means that everyone has to change the server address and login settings to their preference. (And it's of course also a bad idea to share your password)  
367 | To counter this, a lot of people use command line arguments.
368 | 
369 | ```js
370 | const bot = mineflayer.createBot({
371 |   host: process.argv[2],
372 |   port: parseInt(process.argv[3]),
373 |   username: process.argv[4],
374 |   password: process.argv[5]
375 | })
376 | ```
377 | 
378 | As you can see, no more sensitive data in your code! But now, how do you run it?  
379 | Now, instead of starting your program with just `node filename.js` you start it with `node filename.js host port username password`  
380 | Node will automatically split the whole command line into an array, separated by spaces.  
381 | This array is `process.argv`  
382 | The data in an array can be accessed using the index of each item. The index always start at 0, so the first item can be accessed with `[0]` and in this case will be `node` etc.
383 | 
384 | | | First item | Second item | Third Item | Fourth item | Fifth item | Sixth item |
385 | | --- | :---: | :---: | :---: | :---: | :---: | :---: |
386 | | Value | `node` | `filename.js` | `host` | `port` | `username` | `password` |
387 | | Index | `[0]` | `[1]` | `[2]` | `[3]` | `[4]` | `[5]`
388 | 
389 | ### Passing along functions
390 | 
391 | Not only basics variables like numbers and strings can be given as an argument.  
392 | Functions can also be passed as a variable.
393 | 
394 | ```js
395 | const welcome = () => {
396 |   bot.chat('你好!')
397 | }
398 | 
399 | bot.once('spawn', welcome)
400 | ```
401 | 
402 | As you can see, the `bot.once()` method takes 2 parameters.  
403 | The first parameter is an event name, the second parameter is the function to call when that event happens.  
404 | Remember, when passing along a function, only use the name and not the round brackets `()`
405 | 
406 | `bot.chat()` is the method for sending message to the chat.
407 | 
408 | You can also simplify this code by using a anonymous function.  
409 | An anonymous function doesn't have a name, and is created at the position where the function name used to go.  
410 | They still have to have a parameter list `()` and a function body `{}`, even if it isn't used.
411 | 
412 | ```js
413 | bot.once('spawn', () => {
414 |   bot.chat('你好!')
415 | })
416 | ```
417 | 
418 | ### Listening for an event
419 | 
420 | The bot object has many useful [events](http://prismarinejs.github.io/mineflayer/#/api?id=events).
421 | You can listen for an event by using either `bot.on()` method or `bot.once()` method of the bot object, which takes the name of an event and a function.
422 | To remove specific listener you can use `bot.removeListener()` method.
423 | 
424 | - `bot.on(eventName, listener)`
425 |   Execute the `listener` function for each time the event named `eventName` triggered.
426 | - `bot.once(eventName, listener)`
427 |   Execute the `listener` function, only once, the first time the event named `eventName` triggered.
428 | - `bot.removeListener(eventName, listener)`
429 |   Removes the specified `listener` for the event named `eventName`. In order to use this you either need to define your function with `function myNamedFunc() {}` or put your function in a variable with `const myNamedFunc = () => {}`. You can then use `myNamedFunc` in the listener argument.
430 | 
431 | Not only bot object, [`Chest`](http://prismarinejs.github.io/mineflayer/#/api?id=mineflayerchest), [`Furnace`](http://prismarinejs.github.io/mineflayer/#/api?id=mineflayerfurnace), [`Dispenser`](http://prismarinejs.github.io/mineflayer/#/api?id=mineflayerdispenser), [`EnchantmentTable`](http://prismarinejs.github.io/mineflayer/#/api?id=mineflayerenchantmenttable), [`Villager`](http://prismarinejs.github.io/mineflayer/#/api?id=mineflayervillager) object also have their own events!
432 | 
433 | ### Callbacks
434 | A [callback](https://en.wikipedia.org/wiki/Callback_(computer_programming)) is a function that you can give to another function, that is expected to be *called back*, generally when that function ends.  
435 | In Mineflayer, callbacks are often used to handle errors.
436 | 
437 | ```js
438 | bot.consume((error) => {
439 |   if (error) { // 这将检查是否发生错误
440 |     console.log(error)
441 |   } else {
442 |     console.log('Finished consuming')
443 |   }
444 | })
445 | ```
446 | 
447 | The above code will try to consume what the bot is currently holding.  
448 | When the consuming ends, the function that is passed along is called.  
449 | We can then do other things that we want to do after.  
450 | The function could also be called when an error occurs.
451 | 
452 | #### Correct and incorrect approach
453 | 
454 | Below is an example of a bot that will craft oak logs into oak planks and then into sticks.
455 | 
456 | Incorect approach ❌:
457 | 
458 | ```js
459 | const plankRecipe = bot.recipesFor(5)[0] // Get the first recipe for item id 5, which is oak planks.
460 | bot.craft(plankRecipe, 1) // ❌ start crafting oak planks.
461 | 
462 | const stickRecipe = bot.recipesFor(280)[0] // Get the first recipe for item id 5, which is sticks.
463 | bot.craft(stickRecipe, 1) // ❌ start crafting sticks.
464 | ```
465 | 
466 | 回调的正确方法 ✔️:
467 | 
468 | ```js
469 | const plankRecipe = bot.recipesFor(5)[0]
470 | 
471 | bot.craft(plankRecipe, 1, null, (error) => {
472 |   // After bot.craft(plankRecipe, ...) is finished, this callback is called and we continue. ✔️
473 |   if (error) { // 检查是否发生了错误
474 |     console.log(error)
475 |   } else {
476 |     const stickRecipe = bot.recipesFor(280)[0]
477 | 
478 |     bot.craft(stickRecipe, 1, null, (error) => {
479 |       // After bot.craft(stickRecipe, ...) is finished, this callback is called and we continue. ✔️
480 |       if (error) { // Check if an error happened.
481 |         console.log(error)
482 |       } else {
483 |         bot.chat('Crafting Sticks finished')
484 |       }
485 |     })
486 |   }
487 | })
488 | ```
489 | 
490 | The reason the incorrect approach is wrong is because when `bot.craft()` is called, the code will continue below while the bot is crafting.  
491 | By the time the code reaches the second `bot.craft()`, the first probably hasn't finished yet, which means the wanted resource is not available yet.  
492 | Using callbacks can fix this because they will only be called after the `bot.craft()` is finished.
493 | 
494 | More on the [bot.craft()](https://prismarinejs.github.io/mineflayer/#/api?id=botcraftrecipe-count-craftingtable-callback) method.
495 | 
496 | ## 高级
497 | 
498 | The following concepts aren't necessary to create a Mineflayer bot, but they can be useful to understand and create more advanced bots.  
499 | We assume you have understood the [Basics](#basics) tutorial.
500 | 
501 | ### Asynchronousy
502 | In Javascript, asynchronousy is an important concept.  
503 | By default, Javascript will run everything line by line, and only go to the next line if the current line is done. This is called blocking.  
504 | However, sometimes you have to do something that takes a relatively long time, and you don't want your whole program to block and wait for it to finish.  
505 | 
506 | Interacting with the filesystem is often done using asynchronousy, because reading and writing large files can take a long time.  
507 | 
508 | ```js
509 | const myPromise = new Promise((resolve, reject) => {
510 |   setTimeout(() => {
511 |     resolve('Success!') // 耶！一切都很顺利！
512 |   }, 1000)
513 | })
514 | 
515 | myPromise.then((successMessage) => {
516 |   console.log(successMessage)
517 | })
518 | 
519 | myPromise.catch((error) => {
520 |   console.log(error)
521 | })
522 | ```
523 | 
524 | The above codes uses what is called a Promise. A promise promises it will eventually complete.  
525 | The function given you a promise always has 2 parameters, a `resolve` function and a `reject` function.  
526 | If the promise is successful, it will call the `resolve` function, otherwise it will call the `reject` function.  
527 | The above code uses a `setTimeout`, which calls the given function after the set amount of milliseconds, 1000 in this case.  
528 | You can then tell the promise what it should do when it succeeds with `.then(function)` or when it fails with `.catch(function)`
529 | 
530 | The `.then` and `.catch` function can also be chained together with the promise to simplify the code.
531 | 
532 | ```js
533 | const myPromise = new Promise((resolve, reject) => {
534 |   setTimeout(() => {
535 |     resolve('Success!') // Yay! Everything went well!
536 |   }, 1000)
537 | }).then((successMessage) => {
538 |   console.log(successMessage)
539 | }).catch((error) => {
540 |   console.log(error)
541 | })
542 | ```
543 | 
544 | ### Loop over an object
545 | 
546 | The `for of` loop described in the [loops](#loops) chapter can also be used to loop over an object.
547 | 
548 | If we have the following object:
549 | 
550 | ```js
551 | const obj = {
552 |   a: 1,
553 |   b: 2,
554 |   c: 3
555 | }
556 | ```
557 | 
558 | The following will loop over all the values of the object.
559 | 
560 | ```js
561 | for (const value of Object.values(obj)) {
562 |   console.log(value)
563 | }
564 | ```
565 | 
566 | ```txt
567 | 1
568 | 2
569 | 3
570 | ```
571 | 
572 | This will loop over all the keys of the object.
573 | 
574 | ```js
575 | for (const key of Object.keys(obj)) {
576 |   console.log(key)
577 | }
578 | ```
579 | 
580 | ```txt
581 | a
582 | b
583 | c
584 | ```
585 | 
586 | You can also loop over the keys and values at the same time. You will have to destructure the variables first, explained [here.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)
587 | 
588 | ```js
589 | for (const [key, value] of Object.entries(obj)) {
590 |   console.log(key + ', ' + value)
591 | }
592 | ```
593 | 
594 | ```txt
595 | a, 1
596 | b, 2
597 | c, 3
598 | ```
599 | 
600 | These loops are possible because `Object.values(obj)` and `Object.keys(obj)` both return an array of the objects values and keys respectively.  
601 | `Object.entries(obj)` returns an array where each item is an array with 2 items: a key and its corresponding value.  
602 | It's important to know that, unlike the `Object.values()` and `Object.keys()` functions, the `Object.entries()` function does not guarantee that the order is the same as the order when the object was defined.
603 | 
604 | There is also a `for in` loop. However, you will most often want to use `for of` instead of `for in` because there are key differences.  
605 | The `for in` loop loops over the keys of an object instead of the values. (The index in case it is an array)
606 | However, it doesn't loop only over its own keys, but also keys from other object it 'inherits' from, which can be confusing or unwanted. More on this [here.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in)
607 | In general, you'll want to use `for of` instead of `for in` so make sure you don't confuse the two.
608 | 
609 | ### 从聊天中创建事件
610 | 
611 | You can create your own event from chat using [`bot.chatAddPattern()`](http://prismarinejs.github.io/mineflayer/#/api?id=botchataddpatternpattern-chattype-description) method. Useful for Bukkit servers where the chat format changes a lot.
612 | [`bot.chatAddPattern()`](http://prismarinejs.github.io/mineflayer/#/api?id=botchataddpatternpattern-chattype-description) method takes three arguments :
613 | 
614 | - `pattern` - regular expression (regex) to match chat
615 | - `chatType` - the event the bot emits when the pattern matches. e.g. "chat" or "whisper"
616 | - `description` - Optional, describes what the pattern is for
617 | 
618 | You can add [Groups and Range](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges) into the `pattern`, then the listener will spread the captured groups into arguments of your callback sequentially.
619 | 
620 | 阅读有关[正则表达式](https://en.wikipedia.org/wiki/Regular_expression)的更多信息
621 | 
622 | 例子 :
623 | 
624 | #### 回答你好 机器人
625 | 
626 | 在这里，我们创建一个机器人，从另一个玩家那里回答“你好”。
627 | 
628 | ```js
629 | bot.chatAddPattern(
630 |   /(helo|hello|Hello)/,
631 |   'hello',
632 |   'Someone says hello'
633 | )
634 | 
635 | const hi = () => {
636 |   bot.chat('Hi!')
637 | }
638 | 
639 | bot.on('hello', hi)
640 | ```
641 | 
642 | #### 自定义聊天
643 | 
644 | 基于自定义聊天格式创建事件  
645 | 自定义聊天示例:
646 | 
647 | ```txt
648 | [Player] 路人甲 > 你好
649 | [Admin] 李四 > Hi
650 | [Player] 法外狂徒张三 > 焯!我卡住了
651 | [Mod] Jim > 我马上到
652 | ```
653 | 
654 | ```js
655 | bot.chatAddPattern(
656 |   /^\[(.+)\] (\S+) > (.+)$/,
657 |   'my_chat_event',
658 |   'Custom chat event'
659 | )
660 | 
661 | const logger = (rank, username, message) => {
662 |   console.log(`${username} 说 ${message}`)
663 | }
664 | 
665 | bot.on('my_chat_event', logger)
666 | ```
667 | 
668 | 关于 `^\[(.+)\] (\S+) > (.+)




    
    

    
    
    
    

    
    
    
    



    



    

    

    

         正则表达式的解释可在[此处](https://regex101.com/r/VDUrDC/2)找到
669 | 
670 | ## FAQ
671 | 
672 | ### 如何在Android上运行机器人
673 | 
674 | 下面是在Android设备上用 [Termux](https://termux.com/)运行bot的快速设置教程
675 | 
676 | #### 安装Termux
677 | 
678 | 安装[Termux](https://termux.com/) 并启动
679 | 
680 | #### Setup
681 | 
682 | 安装 `Node.js`:
683 | 
684 | ```bash
685 | pkg update -y
686 | pkg install nodejs -y
687 | ```
688 | 
689 | ❗️ 允许应用程序设置上Termux的存储权限.
690 | 在内部存储上创建新文件夹：
691 | 
692 | ```bash
693 | cd /sdcard
694 | mkdir my_scripts
695 | cd my_scripts
696 | ```
697 | 
698 | 安装 `mineflayer`:
699 | 
700 | ```bash
701 | npm install mineflayer
702 | ```
703 | 
704 | 现在，您可以将所有脚本复制/存储到内部存储器中的`my_scripts`文件夹中。
705 | 
706 | #### 启动你的机器人
707 | 
708 | 要启动机器人，请使用Node运行脚本名称
709 | 
710 | ```bash
711 | node script_name.js
712 | ```
713 | 
714 | ❗️ 每次打开 Termux 时，您都必须在启动机器人之前将 cwd 更改为 `/sdcard/my_scripts`:
715 | 
716 | ```bash
717 | cd /sdcard/my_scripts
718 | ```
719 | 


--------------------------------------------------------------------------------